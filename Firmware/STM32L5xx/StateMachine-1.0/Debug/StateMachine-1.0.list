
StateMachine-1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084fc  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080086f0  080086f0  000186f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087e8  080087e8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080087e8  080087e8  000187e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087f0  080087f0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087f0  080087f0  000187f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087f4  080087f4  000187f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080087f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003670  20000014  0800880c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003684  0800880c  00023684  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bc8c  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006805  00000000  00000000  0004bcd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002228  00000000  00000000  000524e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e88  00000000  00000000  00054708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033ae5  00000000  00000000  00056590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ad2a  00000000  00000000  0008a075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00140ed2  00000000  00000000  000b4d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f5c71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000897c  00000000  00000000  001f5cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000014 	.word	0x20000014
 8000210:	00000000 	.word	0x00000000
 8000214:	080086d8 	.word	0x080086d8

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000018 	.word	0x20000018
 8000230:	080086d8 	.word	0x080086d8

08000234 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000234:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000236:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800023a:	4917      	ldr	r1, [pc, #92]	; (8000298 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 800023c:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000240:	4816      	ldr	r0, [pc, #88]	; (800029c <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000242:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000244:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 8000248:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800024a:	4815      	ldr	r0, [pc, #84]	; (80002a0 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800024c:	4912      	ldr	r1, [pc, #72]	; (8000298 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 800024e:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000250:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000252:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000256:	4913      	ldr	r1, [pc, #76]	; (80002a4 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 8000258:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800025a:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 800025e:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 8000260:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 8000264:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 8000268:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 800026c:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000270:	490d      	ldr	r1, [pc, #52]	; (80002a8 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 8000272:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 8000276:	4770      	bx	lr

08000278 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 8000278:	f7ff bffe 	b.w	8000278 <__tx_BadHandler>

0800027c <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 800027c:	b501      	push	{r0, lr}

    /* Do interrupt handler work here */
    /* .... */

    POP     {r0,lr}
 800027e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000282:	4770      	bx	lr

08000284 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 8000284:	b501      	push	{r0, lr}
    BL      _tx_timer_interrupt
 8000286:	f000 f89f 	bl	80003c8 <_tx_timer_interrupt>
    POP     {r0,lr}
 800028a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 800028e:	4770      	bx	lr

08000290 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000290:	f7ff bffe 	b.w	8000290 <__tx_NMIHandler>

08000294 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000294:	f7ff bffe 	b.w	8000294 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000298:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 800029c:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002a0:	20003074 	.word	0x20003074
    LDR     r1, =SYSTICK_CYCLES
 80002a4:	0010c8df 	.word	0x0010c8df
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002a8:	40ff0000 	.word	0x40ff0000

080002ac <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002ac:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002b0:	4a31      	ldr	r2, [pc, #196]	; (8000378 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002b2:	6010      	str	r0, [r2, #0]

#ifdef __ARM_PCS_VFP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002b4:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002b8:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002bc:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002c0:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002c2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002c6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002ca:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002ce:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002d2:	f3bf 8f6f 	isb	sy

080002d6 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002d6:	e7fe      	b.n	80002d6 <__tx_wait_here>

080002d8 <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002d8:	4828      	ldr	r0, [pc, #160]	; (800037c <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002da:	4a29      	ldr	r2, [pc, #164]	; (8000380 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 80002dc:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002e0:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002e2:	b191      	cbz	r1, 800030a <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002e4:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002e6:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002ea:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002ee:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002f2:	d101      	bne.n	80002f8 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002f4:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002f8 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002f8:	4c22      	ldr	r4, [pc, #136]	; (8000384 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002fa:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002fe:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000302:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000304:	b10d      	cbz	r5, 800030a <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000306:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000308:	6023      	str	r3, [r4, #0]

0800030a <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 800030a:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800030c:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800030e:	b1d1      	cbz	r1, 8000346 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000310:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 8000312:	b662      	cpsie	i

08000314 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000314:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000316:	4c1b      	ldr	r4, [pc, #108]	; (8000384 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000318:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800031a:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800031e:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000320:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000322:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000326:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800032a:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800032e:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000332:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000336:	d101      	bne.n	800033c <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000338:	ecbc 8a10 	vldmia	ip!, {s16-s31}

0800033c <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 800033c:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000340:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000344:	4770      	bx	lr

08000346 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000346:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000348:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800034a:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 800034c:	b949      	cbnz	r1, 8000362 <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 800034e:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 8000350:	f008 f8b2 	bl	80084b8 <tx_low_power_enter>
    POP     {r0-r3}
 8000354:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000356:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 8000358:	f008 f8c8 	bl	80084ec <tx_low_power_exit>
    POP     {r0-r3}
 800035c:	bc0f      	pop	{r0, r1, r2, r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800035e:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 8000360:	e7f1      	b.n	8000346 <__tx_ts_wait>

08000362 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 8000362:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000366:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 800036a:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */
    CPSIE   i                                       // Enable interrupts
 800036e:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 8000370:	e7d0      	b.n	8000314 <__tx_ts_restore>
 8000372:	bf00      	nop

08000374 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 8000374:	4770      	bx	lr
 8000376:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000378:	20003110 	.word	0x20003110
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800037c:	20003078 	.word	0x20003078
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000380:	2000307c 	.word	0x2000307c
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000384:	2000367c 	.word	0x2000367c

08000388 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000388:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 800038a:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 800038e:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 8000392:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 8000396:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000398:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 800039c:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 800039e:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003a0:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003a2:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003a4:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003a6:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003a8:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003aa:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003ae:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003b2:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003b4:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003b6:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003ba:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003bc:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003c2:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003c4:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003c6:	4770      	bx	lr

080003c8 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003c8:	4922      	ldr	r1, [pc, #136]	; (8000454 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003ca:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003cc:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003d0:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003d2:	4b21      	ldr	r3, [pc, #132]	; (8000458 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003d4:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003d6:	b13a      	cbz	r2, 80003e8 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003d8:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003dc:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003de:	b91a      	cbnz	r2, 80003e8 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003e0:	4b1e      	ldr	r3, [pc, #120]	; (800045c <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 80003e2:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003e6:	6018      	str	r0, [r3, #0]

080003e8 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003e8:	491d      	ldr	r1, [pc, #116]	; (8000460 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003ea:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003ec:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003ee:	b122      	cbz	r2, 80003fa <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003f0:	4b1c      	ldr	r3, [pc, #112]	; (8000464 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 80003f2:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003f6:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003f8:	e008      	b.n	800040c <__tx_timer_done>

080003fa <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003fa:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003fe:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000400:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000402:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000404:	d101      	bne.n	800040a <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000406:	4b19      	ldr	r3, [pc, #100]	; (800046c <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000408:	6818      	ldr	r0, [r3, #0]

0800040a <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800040a:	6008      	str	r0, [r1, #0]

0800040c <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800040e:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000410:	b912      	cbnz	r2, 8000418 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000412:	4914      	ldr	r1, [pc, #80]	; (8000464 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000414:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000416:	b1c8      	cbz	r0, 800044c <__tx_timer_nothing_expired>

08000418 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000418:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800041a:	4912      	ldr	r1, [pc, #72]	; (8000464 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800041c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800041e:	b108      	cbz	r0, 8000424 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000420:	f007 fb46 	bl	8007ab0 <_tx_timer_expiration_process>

08000424 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000424:	4b0d      	ldr	r3, [pc, #52]	; (800045c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000426:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000428:	b172      	cbz	r2, 8000448 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800042a:	f007 fab7 	bl	800799c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800042e:	4810      	ldr	r0, [pc, #64]	; (8000470 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000430:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000432:	b949      	cbnz	r1, 8000448 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000434:	480f      	ldr	r0, [pc, #60]	; (8000474 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000436:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000438:	4a0f      	ldr	r2, [pc, #60]	; (8000478 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800043a:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 800043c:	480f      	ldr	r0, [pc, #60]	; (800047c <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800043e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000442:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000444:	d000      	beq.n	8000448 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000446:	6002      	str	r2, [r0, #0]

08000448 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000448:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

0800044c <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 800044c:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000450:	4770      	bx	lr
 8000452:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000454:	2000311c 	.word	0x2000311c
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000458:	2000367c 	.word	0x2000367c
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800045c:	20003120 	.word	0x20003120
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000460:	200031ac 	.word	0x200031ac
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000464:	200031b0 	.word	0x200031b0
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000468:	200031a8 	.word	0x200031a8
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800046c:	200031a4 	.word	0x200031a4
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000470:	20003110 	.word	0x20003110
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000474:	20003078 	.word	0x20003078
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000478:	2000307c 	.word	0x2000307c
    LDR     r0, =0xE000ED04                         // Build address of control register
 800047c:	e000ed04 	.word	0xe000ed04

08000480 <__aeabi_uldivmod>:
 8000480:	b953      	cbnz	r3, 8000498 <__aeabi_uldivmod+0x18>
 8000482:	b94a      	cbnz	r2, 8000498 <__aeabi_uldivmod+0x18>
 8000484:	2900      	cmp	r1, #0
 8000486:	bf08      	it	eq
 8000488:	2800      	cmpeq	r0, #0
 800048a:	bf1c      	itt	ne
 800048c:	f04f 31ff 	movne.w	r1, #4294967295
 8000490:	f04f 30ff 	movne.w	r0, #4294967295
 8000494:	f000 b982 	b.w	800079c <__aeabi_idiv0>
 8000498:	f1ad 0c08 	sub.w	ip, sp, #8
 800049c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004a0:	f000 f806 	bl	80004b0 <__udivmoddi4>
 80004a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004ac:	b004      	add	sp, #16
 80004ae:	4770      	bx	lr

080004b0 <__udivmoddi4>:
 80004b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80004b6:	4604      	mov	r4, r0
 80004b8:	460f      	mov	r7, r1
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d148      	bne.n	8000550 <__udivmoddi4+0xa0>
 80004be:	428a      	cmp	r2, r1
 80004c0:	4694      	mov	ip, r2
 80004c2:	d961      	bls.n	8000588 <__udivmoddi4+0xd8>
 80004c4:	fab2 f382 	clz	r3, r2
 80004c8:	b143      	cbz	r3, 80004dc <__udivmoddi4+0x2c>
 80004ca:	f1c3 0120 	rsb	r1, r3, #32
 80004ce:	409f      	lsls	r7, r3
 80004d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d4:	409c      	lsls	r4, r3
 80004d6:	fa20 f101 	lsr.w	r1, r0, r1
 80004da:	430f      	orrs	r7, r1
 80004dc:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	fbb7 f6f1 	udiv	r6, r7, r1
 80004ea:	fb01 7716 	mls	r7, r1, r6, r7
 80004ee:	fb06 f00e 	mul.w	r0, r6, lr
 80004f2:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80004f6:	4290      	cmp	r0, r2
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x5c>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f106 37ff 	add.w	r7, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x5a>
 8000504:	4290      	cmp	r0, r2
 8000506:	f200 8137 	bhi.w	8000778 <__udivmoddi4+0x2c8>
 800050a:	463e      	mov	r6, r7
 800050c:	1a12      	subs	r2, r2, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb2 f0f1 	udiv	r0, r2, r1
 8000514:	fb01 2210 	mls	r2, r1, r0, r2
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x86>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 32ff 	add.w	r2, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x84>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 811c 	bhi.w	800076c <__udivmoddi4+0x2bc>
 8000534:	4610      	mov	r0, r2
 8000536:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053a:	eba4 040e 	sub.w	r4, r4, lr
 800053e:	2600      	movs	r6, #0
 8000540:	b11d      	cbz	r5, 800054a <__udivmoddi4+0x9a>
 8000542:	40dc      	lsrs	r4, r3
 8000544:	2300      	movs	r3, #0
 8000546:	e9c5 4300 	strd	r4, r3, [r5]
 800054a:	4631      	mov	r1, r6
 800054c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000550:	428b      	cmp	r3, r1
 8000552:	d909      	bls.n	8000568 <__udivmoddi4+0xb8>
 8000554:	2d00      	cmp	r5, #0
 8000556:	f000 80fd 	beq.w	8000754 <__udivmoddi4+0x2a4>
 800055a:	2600      	movs	r6, #0
 800055c:	e9c5 0100 	strd	r0, r1, [r5]
 8000560:	4630      	mov	r0, r6
 8000562:	4631      	mov	r1, r6
 8000564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000568:	fab3 f683 	clz	r6, r3
 800056c:	2e00      	cmp	r6, #0
 800056e:	d14b      	bne.n	8000608 <__udivmoddi4+0x158>
 8000570:	428b      	cmp	r3, r1
 8000572:	f0c0 80f2 	bcc.w	800075a <__udivmoddi4+0x2aa>
 8000576:	4282      	cmp	r2, r0
 8000578:	f240 80ef 	bls.w	800075a <__udivmoddi4+0x2aa>
 800057c:	4630      	mov	r0, r6
 800057e:	2d00      	cmp	r5, #0
 8000580:	d0e3      	beq.n	800054a <__udivmoddi4+0x9a>
 8000582:	e9c5 4700 	strd	r4, r7, [r5]
 8000586:	e7e0      	b.n	800054a <__udivmoddi4+0x9a>
 8000588:	b902      	cbnz	r2, 800058c <__udivmoddi4+0xdc>
 800058a:	deff      	udf	#255	; 0xff
 800058c:	fab2 f382 	clz	r3, r2
 8000590:	2b00      	cmp	r3, #0
 8000592:	f040 809d 	bne.w	80006d0 <__udivmoddi4+0x220>
 8000596:	1a89      	subs	r1, r1, r2
 8000598:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800059c:	b297      	uxth	r7, r2
 800059e:	2601      	movs	r6, #1
 80005a0:	0c20      	lsrs	r0, r4, #16
 80005a2:	fbb1 f2fe 	udiv	r2, r1, lr
 80005a6:	fb0e 1112 	mls	r1, lr, r2, r1
 80005aa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005ae:	fb07 f002 	mul.w	r0, r7, r2
 80005b2:	4288      	cmp	r0, r1
 80005b4:	d90f      	bls.n	80005d6 <__udivmoddi4+0x126>
 80005b6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ba:	f102 38ff 	add.w	r8, r2, #4294967295
 80005be:	bf2c      	ite	cs
 80005c0:	f04f 0901 	movcs.w	r9, #1
 80005c4:	f04f 0900 	movcc.w	r9, #0
 80005c8:	4288      	cmp	r0, r1
 80005ca:	d903      	bls.n	80005d4 <__udivmoddi4+0x124>
 80005cc:	f1b9 0f00 	cmp.w	r9, #0
 80005d0:	f000 80cf 	beq.w	8000772 <__udivmoddi4+0x2c2>
 80005d4:	4642      	mov	r2, r8
 80005d6:	1a09      	subs	r1, r1, r0
 80005d8:	b2a4      	uxth	r4, r4
 80005da:	fbb1 f0fe 	udiv	r0, r1, lr
 80005de:	fb0e 1110 	mls	r1, lr, r0, r1
 80005e2:	fb00 f707 	mul.w	r7, r0, r7
 80005e6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80005ea:	42a7      	cmp	r7, r4
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x150>
 80005ee:	eb1c 0404 	adds.w	r4, ip, r4
 80005f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f6:	d202      	bcs.n	80005fe <__udivmoddi4+0x14e>
 80005f8:	42a7      	cmp	r7, r4
 80005fa:	f200 80b4 	bhi.w	8000766 <__udivmoddi4+0x2b6>
 80005fe:	4608      	mov	r0, r1
 8000600:	1be4      	subs	r4, r4, r7
 8000602:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000606:	e79b      	b.n	8000540 <__udivmoddi4+0x90>
 8000608:	f1c6 0720 	rsb	r7, r6, #32
 800060c:	40b3      	lsls	r3, r6
 800060e:	fa01 f406 	lsl.w	r4, r1, r6
 8000612:	fa22 fc07 	lsr.w	ip, r2, r7
 8000616:	40f9      	lsrs	r1, r7
 8000618:	40b2      	lsls	r2, r6
 800061a:	ea4c 0c03 	orr.w	ip, ip, r3
 800061e:	fa20 f307 	lsr.w	r3, r0, r7
 8000622:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000626:	431c      	orrs	r4, r3
 8000628:	fa1f fe8c 	uxth.w	lr, ip
 800062c:	fa00 f306 	lsl.w	r3, r0, r6
 8000630:	0c20      	lsrs	r0, r4, #16
 8000632:	fbb1 f8f9 	udiv	r8, r1, r9
 8000636:	fb09 1118 	mls	r1, r9, r8, r1
 800063a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800063e:	fb08 f00e 	mul.w	r0, r8, lr
 8000642:	4288      	cmp	r0, r1
 8000644:	d90f      	bls.n	8000666 <__udivmoddi4+0x1b6>
 8000646:	eb1c 0101 	adds.w	r1, ip, r1
 800064a:	f108 3aff 	add.w	sl, r8, #4294967295
 800064e:	bf2c      	ite	cs
 8000650:	f04f 0b01 	movcs.w	fp, #1
 8000654:	f04f 0b00 	movcc.w	fp, #0
 8000658:	4288      	cmp	r0, r1
 800065a:	d903      	bls.n	8000664 <__udivmoddi4+0x1b4>
 800065c:	f1bb 0f00 	cmp.w	fp, #0
 8000660:	f000 808d 	beq.w	800077e <__udivmoddi4+0x2ce>
 8000664:	46d0      	mov	r8, sl
 8000666:	1a09      	subs	r1, r1, r0
 8000668:	b2a4      	uxth	r4, r4
 800066a:	fbb1 f0f9 	udiv	r0, r1, r9
 800066e:	fb09 1110 	mls	r1, r9, r0, r1
 8000672:	fb00 fe0e 	mul.w	lr, r0, lr
 8000676:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800067a:	458e      	cmp	lr, r1
 800067c:	d907      	bls.n	800068e <__udivmoddi4+0x1de>
 800067e:	eb1c 0101 	adds.w	r1, ip, r1
 8000682:	f100 34ff 	add.w	r4, r0, #4294967295
 8000686:	d201      	bcs.n	800068c <__udivmoddi4+0x1dc>
 8000688:	458e      	cmp	lr, r1
 800068a:	d87f      	bhi.n	800078c <__udivmoddi4+0x2dc>
 800068c:	4620      	mov	r0, r4
 800068e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000692:	eba1 010e 	sub.w	r1, r1, lr
 8000696:	fba0 9802 	umull	r9, r8, r0, r2
 800069a:	4541      	cmp	r1, r8
 800069c:	464c      	mov	r4, r9
 800069e:	46c6      	mov	lr, r8
 80006a0:	d302      	bcc.n	80006a8 <__udivmoddi4+0x1f8>
 80006a2:	d106      	bne.n	80006b2 <__udivmoddi4+0x202>
 80006a4:	454b      	cmp	r3, r9
 80006a6:	d204      	bcs.n	80006b2 <__udivmoddi4+0x202>
 80006a8:	3801      	subs	r0, #1
 80006aa:	ebb9 0402 	subs.w	r4, r9, r2
 80006ae:	eb68 0e0c 	sbc.w	lr, r8, ip
 80006b2:	2d00      	cmp	r5, #0
 80006b4:	d070      	beq.n	8000798 <__udivmoddi4+0x2e8>
 80006b6:	1b1a      	subs	r2, r3, r4
 80006b8:	eb61 010e 	sbc.w	r1, r1, lr
 80006bc:	fa22 f306 	lsr.w	r3, r2, r6
 80006c0:	fa01 f707 	lsl.w	r7, r1, r7
 80006c4:	40f1      	lsrs	r1, r6
 80006c6:	2600      	movs	r6, #0
 80006c8:	431f      	orrs	r7, r3
 80006ca:	e9c5 7100 	strd	r7, r1, [r5]
 80006ce:	e73c      	b.n	800054a <__udivmoddi4+0x9a>
 80006d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80006d4:	f1c3 0020 	rsb	r0, r3, #32
 80006d8:	fa01 f203 	lsl.w	r2, r1, r3
 80006dc:	fa21 f600 	lsr.w	r6, r1, r0
 80006e0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80006e4:	fa24 f100 	lsr.w	r1, r4, r0
 80006e8:	fa1f f78c 	uxth.w	r7, ip
 80006ec:	409c      	lsls	r4, r3
 80006ee:	4311      	orrs	r1, r2
 80006f0:	fbb6 f0fe 	udiv	r0, r6, lr
 80006f4:	0c0a      	lsrs	r2, r1, #16
 80006f6:	fb0e 6610 	mls	r6, lr, r0, r6
 80006fa:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80006fe:	fb00 f607 	mul.w	r6, r0, r7
 8000702:	4296      	cmp	r6, r2
 8000704:	d90e      	bls.n	8000724 <__udivmoddi4+0x274>
 8000706:	eb1c 0202 	adds.w	r2, ip, r2
 800070a:	f100 38ff 	add.w	r8, r0, #4294967295
 800070e:	bf2c      	ite	cs
 8000710:	f04f 0901 	movcs.w	r9, #1
 8000714:	f04f 0900 	movcc.w	r9, #0
 8000718:	4296      	cmp	r6, r2
 800071a:	d902      	bls.n	8000722 <__udivmoddi4+0x272>
 800071c:	f1b9 0f00 	cmp.w	r9, #0
 8000720:	d031      	beq.n	8000786 <__udivmoddi4+0x2d6>
 8000722:	4640      	mov	r0, r8
 8000724:	1b92      	subs	r2, r2, r6
 8000726:	b289      	uxth	r1, r1
 8000728:	fbb2 f6fe 	udiv	r6, r2, lr
 800072c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000730:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000734:	fb06 f207 	mul.w	r2, r6, r7
 8000738:	428a      	cmp	r2, r1
 800073a:	d907      	bls.n	800074c <__udivmoddi4+0x29c>
 800073c:	eb1c 0101 	adds.w	r1, ip, r1
 8000740:	f106 38ff 	add.w	r8, r6, #4294967295
 8000744:	d201      	bcs.n	800074a <__udivmoddi4+0x29a>
 8000746:	428a      	cmp	r2, r1
 8000748:	d823      	bhi.n	8000792 <__udivmoddi4+0x2e2>
 800074a:	4646      	mov	r6, r8
 800074c:	1a89      	subs	r1, r1, r2
 800074e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000752:	e725      	b.n	80005a0 <__udivmoddi4+0xf0>
 8000754:	462e      	mov	r6, r5
 8000756:	4628      	mov	r0, r5
 8000758:	e6f7      	b.n	800054a <__udivmoddi4+0x9a>
 800075a:	1a84      	subs	r4, r0, r2
 800075c:	eb61 0303 	sbc.w	r3, r1, r3
 8000760:	2001      	movs	r0, #1
 8000762:	461f      	mov	r7, r3
 8000764:	e70b      	b.n	800057e <__udivmoddi4+0xce>
 8000766:	4464      	add	r4, ip
 8000768:	3802      	subs	r0, #2
 800076a:	e749      	b.n	8000600 <__udivmoddi4+0x150>
 800076c:	4464      	add	r4, ip
 800076e:	3802      	subs	r0, #2
 8000770:	e6e1      	b.n	8000536 <__udivmoddi4+0x86>
 8000772:	3a02      	subs	r2, #2
 8000774:	4461      	add	r1, ip
 8000776:	e72e      	b.n	80005d6 <__udivmoddi4+0x126>
 8000778:	3e02      	subs	r6, #2
 800077a:	4462      	add	r2, ip
 800077c:	e6c6      	b.n	800050c <__udivmoddi4+0x5c>
 800077e:	f1a8 0802 	sub.w	r8, r8, #2
 8000782:	4461      	add	r1, ip
 8000784:	e76f      	b.n	8000666 <__udivmoddi4+0x1b6>
 8000786:	3802      	subs	r0, #2
 8000788:	4462      	add	r2, ip
 800078a:	e7cb      	b.n	8000724 <__udivmoddi4+0x274>
 800078c:	3802      	subs	r0, #2
 800078e:	4461      	add	r1, ip
 8000790:	e77d      	b.n	800068e <__udivmoddi4+0x1de>
 8000792:	3e02      	subs	r6, #2
 8000794:	4461      	add	r1, ip
 8000796:	e7d9      	b.n	800074c <__udivmoddi4+0x29c>
 8000798:	462e      	mov	r6, r5
 800079a:	e6d6      	b.n	800054a <__udivmoddi4+0x9a>

0800079c <__aeabi_idiv0>:
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop

080007a0 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af02      	add	r7, sp, #8
 80007a6:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007a8:	2334      	movs	r3, #52	; 0x34
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007b0:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <tx_application_define+0x34>)
 80007b2:	4909      	ldr	r1, [pc, #36]	; (80007d8 <tx_application_define+0x38>)
 80007b4:	4809      	ldr	r0, [pc, #36]	; (80007dc <tx_application_define+0x3c>)
 80007b6:	f007 fc33 	bl	8008020 <_txe_byte_pool_create>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d104      	bne.n	80007ca <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <tx_application_define+0x3c>)
 80007c2:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 80007c4:	68f8      	ldr	r0, [r7, #12]
 80007c6:	f000 f80b 	bl	80007e0 <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000030 	.word	0x20000030
 80007d8:	080086f0 	.word	0x080086f0
 80007dc:	20002830 	.word	0x20002830

080007e0 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08c      	sub	sp, #48	; 0x30
 80007e4:	af08      	add	r7, sp, #32
 80007e6:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
//  UINT status;
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	60bb      	str	r3, [r7, #8]
  (void)byte_pool;
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */

  tx_byte_allocate(byte_pool, (VOID **) &memory_ptr, CMD_QUEUE_SIZE*sizeof(UINT), TX_NO_WAIT);
 80007f0:	1d39      	adds	r1, r7, #4
 80007f2:	2300      	movs	r3, #0
 80007f4:	2228      	movs	r2, #40	; 0x28
 80007f6:	68b8      	ldr	r0, [r7, #8]
 80007f8:	f007 fb92 	bl	8007f20 <_txe_byte_allocate>
  tx_queue_create(&qs[CMD_Q], "Command Queue", TX_1_ULONG, memory_ptr, CMD_QUEUE_SIZE*sizeof(UINT));
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2238      	movs	r2, #56	; 0x38
 8000800:	9201      	str	r2, [sp, #4]
 8000802:	2228      	movs	r2, #40	; 0x28
 8000804:	9200      	str	r2, [sp, #0]
 8000806:	2201      	movs	r2, #1
 8000808:	4936      	ldr	r1, [pc, #216]	; (80008e4 <App_ThreadX_Init+0x104>)
 800080a:	4837      	ldr	r0, [pc, #220]	; (80008e8 <App_ThreadX_Init+0x108>)
 800080c:	f007 fcb0 	bl	8008170 <_txe_queue_create>

  tx_byte_allocate(byte_pool, (VOID **) &memory_ptr, CAN_SEND_QUEUE_SIZE*sizeof(UINT), TX_NO_WAIT);
 8000810:	1d39      	adds	r1, r7, #4
 8000812:	2300      	movs	r3, #0
 8000814:	2228      	movs	r2, #40	; 0x28
 8000816:	68b8      	ldr	r0, [r7, #8]
 8000818:	f007 fb82 	bl	8007f20 <_txe_byte_allocate>
  tx_queue_create(&qs[CMD_SEND_Q], "CAN Send Queue", TX_1_ULONG, memory_ptr, CAN_SEND_QUEUE_SIZE*sizeof(UINT));
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2238      	movs	r2, #56	; 0x38
 8000820:	9201      	str	r2, [sp, #4]
 8000822:	2228      	movs	r2, #40	; 0x28
 8000824:	9200      	str	r2, [sp, #0]
 8000826:	2201      	movs	r2, #1
 8000828:	4930      	ldr	r1, [pc, #192]	; (80008ec <App_ThreadX_Init+0x10c>)
 800082a:	4831      	ldr	r0, [pc, #196]	; (80008f0 <App_ThreadX_Init+0x110>)
 800082c:	f007 fca0 	bl	8008170 <_txe_queue_create>

  tx_byte_allocate(byte_pool, (VOID **) &memory_ptr, STATEM_THRD_STACK_SIZE, TX_NO_WAIT);
 8000830:	1d39      	adds	r1, r7, #4
 8000832:	2300      	movs	r3, #0
 8000834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000838:	68b8      	ldr	r0, [r7, #8]
 800083a:	f007 fb71 	bl	8007f20 <_txe_byte_allocate>
  tx_thread_create(&state_thrd, "State Machine Thread", state_thrd_fn, 0, memory_ptr, STATEM_THRD_STACK_SIZE,
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	22b0      	movs	r2, #176	; 0xb0
 8000842:	9206      	str	r2, [sp, #24]
 8000844:	2201      	movs	r2, #1
 8000846:	9205      	str	r2, [sp, #20]
 8000848:	2200      	movs	r2, #0
 800084a:	9204      	str	r2, [sp, #16]
 800084c:	2201      	movs	r2, #1
 800084e:	9203      	str	r2, [sp, #12]
 8000850:	2201      	movs	r2, #1
 8000852:	9202      	str	r2, [sp, #8]
 8000854:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000858:	9201      	str	r2, [sp, #4]
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	2300      	movs	r3, #0
 800085e:	4a25      	ldr	r2, [pc, #148]	; (80008f4 <App_ThreadX_Init+0x114>)
 8000860:	4925      	ldr	r1, [pc, #148]	; (80008f8 <App_ThreadX_Init+0x118>)
 8000862:	4826      	ldr	r0, [pc, #152]	; (80008fc <App_ThreadX_Init+0x11c>)
 8000864:	f007 fd3c 	bl	80082e0 <_txe_thread_create>
		 STATEM_THRD_PRIO, STATEM_THRD_PRIO, TX_NO_TIME_SLICE, TX_AUTO_START);

  tx_byte_allocate(byte_pool, (VOID **) &memory_ptr, UART_THRD_STACK_SIZE, TX_NO_WAIT);
 8000868:	1d39      	adds	r1, r7, #4
 800086a:	2300      	movs	r3, #0
 800086c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000870:	68b8      	ldr	r0, [r7, #8]
 8000872:	f007 fb55 	bl	8007f20 <_txe_byte_allocate>
  tx_thread_create(&uart_thrd, "UART Thread", uart_thrd_fn, 0, memory_ptr, UART_THRD_STACK_SIZE,
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	22b0      	movs	r2, #176	; 0xb0
 800087a:	9206      	str	r2, [sp, #24]
 800087c:	2201      	movs	r2, #1
 800087e:	9205      	str	r2, [sp, #20]
 8000880:	2200      	movs	r2, #0
 8000882:	9204      	str	r2, [sp, #16]
 8000884:	2201      	movs	r2, #1
 8000886:	9203      	str	r2, [sp, #12]
 8000888:	2201      	movs	r2, #1
 800088a:	9202      	str	r2, [sp, #8]
 800088c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000890:	9201      	str	r2, [sp, #4]
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2300      	movs	r3, #0
 8000896:	4a1a      	ldr	r2, [pc, #104]	; (8000900 <App_ThreadX_Init+0x120>)
 8000898:	491a      	ldr	r1, [pc, #104]	; (8000904 <App_ThreadX_Init+0x124>)
 800089a:	481b      	ldr	r0, [pc, #108]	; (8000908 <App_ThreadX_Init+0x128>)
 800089c:	f007 fd20 	bl	80082e0 <_txe_thread_create>
		 UART_THRD_PRIO, UART_THRD_PRIO, TX_NO_TIME_SLICE, TX_AUTO_START);

  tx_byte_allocate(byte_pool, (VOID **) &memory_ptr, CAN_THRD_STACK_SIZE, TX_NO_WAIT);
 80008a0:	1d39      	adds	r1, r7, #4
 80008a2:	2300      	movs	r3, #0
 80008a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008a8:	68b8      	ldr	r0, [r7, #8]
 80008aa:	f007 fb39 	bl	8007f20 <_txe_byte_allocate>
  tx_thread_create(&can_thrd, "CAN Thread", can_thrd_fn, 0, memory_ptr, CAN_THRD_STACK_SIZE,
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	22b0      	movs	r2, #176	; 0xb0
 80008b2:	9206      	str	r2, [sp, #24]
 80008b4:	2201      	movs	r2, #1
 80008b6:	9205      	str	r2, [sp, #20]
 80008b8:	2200      	movs	r2, #0
 80008ba:	9204      	str	r2, [sp, #16]
 80008bc:	2201      	movs	r2, #1
 80008be:	9203      	str	r2, [sp, #12]
 80008c0:	2201      	movs	r2, #1
 80008c2:	9202      	str	r2, [sp, #8]
 80008c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008c8:	9201      	str	r2, [sp, #4]
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2300      	movs	r3, #0
 80008ce:	4a0f      	ldr	r2, [pc, #60]	; (800090c <App_ThreadX_Init+0x12c>)
 80008d0:	490f      	ldr	r1, [pc, #60]	; (8000910 <App_ThreadX_Init+0x130>)
 80008d2:	4810      	ldr	r0, [pc, #64]	; (8000914 <App_ThreadX_Init+0x134>)
 80008d4:	f007 fd04 	bl	80082e0 <_txe_thread_create>
		 CAN_THRD_PRIO, CAN_THRD_PRIO, TX_NO_TIME_SLICE, TX_AUTO_START);

  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008d8:	68fb      	ldr	r3, [r7, #12]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	08008704 	.word	0x08008704
 80008e8:	20002864 	.word	0x20002864
 80008ec:	08008714 	.word	0x08008714
 80008f0:	2000289c 	.word	0x2000289c
 80008f4:	08000a0d 	.word	0x08000a0d
 80008f8:	08008724 	.word	0x08008724
 80008fc:	200028d4 	.word	0x200028d4
 8000900:	08000a17 	.word	0x08000a17
 8000904:	0800873c 	.word	0x0800873c
 8000908:	20002984 	.word	0x20002984
 800090c:	08000a33 	.word	0x08000a33
 8000910:	08008748 	.word	0x08008748
 8000914:	20002a34 	.word	0x20002a34

08000918 <App_ThreadX_LowPower_Enter>:
  * @brief  App_ThreadX_LowPower_Enter
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Enter(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */

  /* USER CODE END  App_ThreadX_LowPower_Enter */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <App_ThreadX_LowPower_Exit>:
  * @brief  App_ThreadX_LowPower_Exit
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Exit(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Exit */

  /* USER CODE END  App_ThreadX_LowPower_Exit */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000938:	f006 fb8a 	bl	8007050 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <get_cmd_ack>:
  // Sound off CAN nodes
  // Check for valid ranges of sensor data
  return 1;
}

int get_cmd_ack(int cmd) {
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if(cmd == CMD_ESTOP) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2bc0      	cmp	r3, #192	; 0xc0
 800094c:	d101      	bne.n	8000952 <get_cmd_ack+0x12>
    return ACK_ESTOP;
 800094e:	23a0      	movs	r3, #160	; 0xa0
 8000950:	e015      	b.n	800097e <get_cmd_ack+0x3e>
  } else if (cmd == CMD_PREP) {
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2bc2      	cmp	r3, #194	; 0xc2
 8000956:	d101      	bne.n	800095c <get_cmd_ack+0x1c>
    return ACK_PREP;
 8000958:	23a2      	movs	r3, #162	; 0xa2
 800095a:	e010      	b.n	800097e <get_cmd_ack+0x3e>
  } else if (cmd == CMD_LAUNCH) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2bc4      	cmp	r3, #196	; 0xc4
 8000960:	d101      	bne.n	8000966 <get_cmd_ack+0x26>
    return CMD_LAUNCH;
 8000962:	23c4      	movs	r3, #196	; 0xc4
 8000964:	e00b      	b.n	800097e <get_cmd_ack+0x3e>
  } else if (cmd == CMD_CRAWL) {
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2bc6      	cmp	r3, #198	; 0xc6
 800096a:	d101      	bne.n	8000970 <get_cmd_ack+0x30>
    return ACK_CRAWL;
 800096c:	23a6      	movs	r3, #166	; 0xa6
 800096e:	e006      	b.n	800097e <get_cmd_ack+0x3e>
  } else if (cmd == CMD_HEALTHCHK) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2bc8      	cmp	r3, #200	; 0xc8
 8000974:	d101      	bne.n	800097a <get_cmd_ack+0x3a>
    return ACK_HEALTHCHK;
 8000976:	23a8      	movs	r3, #168	; 0xa8
 8000978:	e001      	b.n	800097e <get_cmd_ack+0x3e>
  } else {
	  // INVALID COMMAND
    return -1;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800097e:	4618      	mov	r0, r3
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <receive_cmds>:

// USART functions
void receive_cmds(int * acked_cmd) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint8_t recv_buf[2];
  uint8_t send_buf[2];
  for(int i = 0; i < 10; i++) {
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	e02d      	b.n	80009f6 <receive_cmds+0x6a>
	recv_buf[0] = -1;
 800099a:	23ff      	movs	r3, #255	; 0xff
 800099c:	743b      	strb	r3, [r7, #16]
	recv_buf[1] = -1;
 800099e:	23ff      	movs	r3, #255	; 0xff
 80009a0:	747b      	strb	r3, [r7, #17]
	read_uart(recv_buf, 2, timeout);
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <receive_cmds+0x7c>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	461a      	mov	r2, r3
 80009a8:	f107 0310 	add.w	r3, r7, #16
 80009ac:	2102      	movs	r1, #2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 fc6a 	bl	8001288 <read_uart>
	if(recv_buf[0] != -1 && recv_buf[1] != -1) {
	  if(recv_buf[0] == CMD_MSG) {
 80009b4:	7c3b      	ldrb	r3, [r7, #16]
 80009b6:	2bc0      	cmp	r3, #192	; 0xc0
 80009b8:	d11a      	bne.n	80009f0 <receive_cmds+0x64>
		// Command received
		if(*acked_cmd != recv_buf[1]) {
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	7c7a      	ldrb	r2, [r7, #17]
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d015      	beq.n	80009f0 <receive_cmds+0x64>
		  *acked_cmd = recv_buf[1];
 80009c4:	7c7b      	ldrb	r3, [r7, #17]
 80009c6:	461a      	mov	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	601a      	str	r2, [r3, #0]
		  send_buf[0] = ACK_MSG;
 80009cc:	23a0      	movs	r3, #160	; 0xa0
 80009ce:	733b      	strb	r3, [r7, #12]
		  send_buf[1] = get_cmd_ack(recv_buf[1]);
 80009d0:	7c7b      	ldrb	r3, [r7, #17]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff ffb4 	bl	8000940 <get_cmd_ack>
 80009d8:	4603      	mov	r3, r0
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	737b      	strb	r3, [r7, #13]
		  write_uart(send_buf, 2, timeout);
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <receive_cmds+0x7c>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	461a      	mov	r2, r3
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2102      	movs	r1, #2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 fc62 	bl	80012b4 <write_uart>
  for(int i = 0; i < 10; i++) {
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	3301      	adds	r3, #1
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	2b09      	cmp	r3, #9
 80009fa:	ddce      	ble.n	800099a <receive_cmds+0xe>
	  }
	} else {
      break;
	}
  }
}
 80009fc:	bf00      	nop
 80009fe:	bf00      	nop
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000000 	.word	0x20000000

08000a0c <state_thrd_fn>:
}
void coasting(int cmd_msg) {

}

void state_thrd_fn(ULONG arg) {
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	while(1) {
 8000a14:	e7fe      	b.n	8000a14 <state_thrd_fn+0x8>

08000a16 <uart_thrd_fn>:
//				break;
//		}
	}
}

void uart_thrd_fn(ULONG arg) {
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b084      	sub	sp, #16
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
	int acked_cmd = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
	while(1) {
		receive_cmds(&acked_cmd);
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff ffb0 	bl	800098c <receive_cmds>
		acked_cmd = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
		receive_cmds(&acked_cmd);
 8000a30:	e7f7      	b.n	8000a22 <uart_thrd_fn+0xc>

08000a32 <can_thrd_fn>:
//		send_telemetry();
	}
}

void can_thrd_fn(ULONG arg) {
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]

}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a54:	4907      	ldr	r1, [pc, #28]	; (8000a74 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4013      	ands	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a66:	68fb      	ldr	r3, [r7, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	40021000 	.word	0x40021000

08000a78 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000a82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000a84:	4907      	ldr	r1, [pc, #28]	; (8000aa4 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000a8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4013      	ands	r3, r2
 8000a94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a96:	68fb      	ldr	r3, [r7, #12]
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aac:	f000 ff99 	bl	80019e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab0:	f000 f81a 	bl	8000ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab4:	f000 fa8c 	bl	8000fd0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ab8:	f000 f878 	bl	8000bac <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000abc:	f000 f8ec 	bl	8000c98 <MX_FDCAN1_Init>
  MX_LPUART1_UART_Init();
 8000ac0:	f000 f944 	bl	8000d4c <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000ac4:	f000 f990 	bl	8000de8 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000ac8:	f000 f9da 	bl	8000e80 <MX_RTC_Init>
  MX_UCPD1_Init();
 8000acc:	f000 fa22 	bl	8000f14 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8000ad0:	f000 fa56 	bl	8000f80 <MX_USB_PCD_Init>
  MX_ICACHE_Init();
 8000ad4:	f000 f926 	bl	8000d24 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  init_uart((void*)&huart3);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <main+0x3c>)
 8000ada:	f000 fbc5 	bl	8001268 <init_uart>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000ade:	f7ff ff29 	bl	8000934 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <main+0x3a>
 8000ae4:	20002c40 	.word	0x20002c40

08000ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b098      	sub	sp, #96	; 0x60
 8000aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aee:	f107 0318 	add.w	r3, r7, #24
 8000af2:	2248      	movs	r2, #72	; 0x48
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f007 fde6 	bl	80086c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f002 fcc8 	bl	80034a0 <HAL_PWREx_ControlVoltageScaling>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000b16:	f000 fba1 	bl	800125c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b1a:	f002 fca3 	bl	8003464 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b1e:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <SystemClock_Config+0xc0>)
 8000b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b24:	4a20      	ldr	r2, [pc, #128]	; (8000ba8 <SystemClock_Config+0xc0>)
 8000b26:	f023 0318 	bic.w	r3, r3, #24
 8000b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8000b2e:	2334      	movs	r3, #52	; 0x34
 8000b30:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b32:	2381      	movs	r3, #129	; 0x81
 8000b34:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b36:	2301      	movs	r3, #1
 8000b38:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b42:	2360      	movs	r3, #96	; 0x60
 8000b44:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b46:	2302      	movs	r3, #2
 8000b48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000b52:	2337      	movs	r3, #55	; 0x37
 8000b54:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b56:	2307      	movs	r3, #7
 8000b58:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b62:	f107 0318 	add.w	r3, r7, #24
 8000b66:	4618      	mov	r0, r3
 8000b68:	f002 fd2a 	bl	80035c0 <HAL_RCC_OscConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b72:	f000 fb73 	bl	800125c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b76:	230f      	movs	r3, #15
 8000b78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2105      	movs	r1, #5
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f003 f9f8 	bl	8003f84 <HAL_RCC_ClockConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b9a:	f000 fb5f 	bl	800125c <Error_Handler>
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3760      	adds	r7, #96	; 0x60
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000

08000bac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
 8000bcc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bce:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <MX_ADC1_Init+0xe0>)
 8000bd0:	4a2f      	ldr	r2, [pc, #188]	; (8000c90 <MX_ADC1_Init+0xe4>)
 8000bd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bd4:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <MX_ADC1_Init+0xe0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bda:	4b2c      	ldr	r3, [pc, #176]	; (8000c8c <MX_ADC1_Init+0xe0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000be0:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <MX_ADC1_Init+0xe0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000be6:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <MX_ADC1_Init+0xe0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bec:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <MX_ADC1_Init+0xe0>)
 8000bee:	2204      	movs	r2, #4
 8000bf0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bf2:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <MX_ADC1_Init+0xe0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bf8:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <MX_ADC1_Init+0xe0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000bfe:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <MX_ADC1_Init+0xe0>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c04:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_ADC1_Init+0xe0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_ADC1_Init+0xe0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c12:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <MX_ADC1_Init+0xe0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c18:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_ADC1_Init+0xe0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_ADC1_Init+0xe0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_ADC1_Init+0xe0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c2e:	4817      	ldr	r0, [pc, #92]	; (8000c8c <MX_ADC1_Init+0xe0>)
 8000c30:	f001 f8b2 	bl	8001d98 <HAL_ADC_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000c3a:	f000 fb0f 	bl	800125c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4810      	ldr	r0, [pc, #64]	; (8000c8c <MX_ADC1_Init+0xe0>)
 8000c4a:	f001 fe07 	bl	800285c <HAL_ADCEx_MultiModeConfigChannel>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c54:	f000 fb02 	bl	800125c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_ADC1_Init+0xe8>)
 8000c5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c5c:	2306      	movs	r3, #6
 8000c5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c64:	237f      	movs	r3, #127	; 0x7f
 8000c66:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_ADC1_Init+0xe0>)
 8000c76:	f001 f9e1 	bl	800203c <HAL_ADC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000c80:	f000 faec 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	; 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20002ae4 	.word	0x20002ae4
 8000c90:	42028000 	.word	0x42028000
 8000c94:	0c900008 	.word	0x0c900008

08000c98 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_FDCAN1_Init+0x84>)
 8000c9e:	4a20      	ldr	r2, [pc, #128]	; (8000d20 <MX_FDCAN1_Init+0x88>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000ca2:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <MX_FDCAN1_Init+0x84>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <MX_FDCAN1_Init+0x84>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000cae:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <MX_FDCAN1_Init+0x84>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000cb4:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <MX_FDCAN1_Init+0x84>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_FDCAN1_Init+0x84>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <MX_FDCAN1_Init+0x84>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_FDCAN1_Init+0x84>)
 8000cc8:	2210      	movs	r2, #16
 8000cca:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_FDCAN1_Init+0x84>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_FDCAN1_Init+0x84>)
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <MX_FDCAN1_Init+0x84>)
 8000cda:	2202      	movs	r2, #2
 8000cdc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_FDCAN1_Init+0x84>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <MX_FDCAN1_Init+0x84>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_FDCAN1_Init+0x84>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <MX_FDCAN1_Init+0x84>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_FDCAN1_Init+0x84>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000cfc:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <MX_FDCAN1_Init+0x84>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <MX_FDCAN1_Init+0x84>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_FDCAN1_Init+0x84>)
 8000d0a:	f001 ff2b 	bl	8002b64 <HAL_FDCAN_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000d14:	f000 faa2 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20002b4c 	.word	0x20002b4c
 8000d20:	4000a400 	.word	0x4000a400

08000d24 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f002 fa5b 	bl	80031e4 <HAL_ICACHE_ConfigAssociativityMode>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000d34:	f000 fa92 	bl	800125c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000d38:	f002 fa74 	bl	8003224 <HAL_ICACHE_Enable>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000d42:	f000 fa8b 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000d50:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <MX_LPUART1_UART_Init+0x90>)
 8000d52:	4a23      	ldr	r2, [pc, #140]	; (8000de0 <MX_LPUART1_UART_Init+0x94>)
 8000d54:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000d56:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <MX_LPUART1_UART_Init+0x90>)
 8000d58:	4a22      	ldr	r2, [pc, #136]	; (8000de4 <MX_LPUART1_UART_Init+0x98>)
 8000d5a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <MX_LPUART1_UART_Init+0x90>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <MX_LPUART1_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <MX_LPUART1_UART_Init+0x90>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <MX_LPUART1_UART_Init+0x90>)
 8000d70:	220c      	movs	r2, #12
 8000d72:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d74:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_LPUART1_UART_Init+0x90>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_LPUART1_UART_Init+0x90>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_LPUART1_UART_Init+0x90>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_LPUART1_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_LPUART1_UART_Init+0x90>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000d92:	4812      	ldr	r0, [pc, #72]	; (8000ddc <MX_LPUART1_UART_Init+0x90>)
 8000d94:	f004 fd22 	bl	80057dc <HAL_UART_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000d9e:	f000 fa5d 	bl	800125c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da2:	2100      	movs	r1, #0
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <MX_LPUART1_UART_Init+0x90>)
 8000da6:	f005 fb79 	bl	800649c <HAL_UARTEx_SetTxFifoThreshold>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000db0:	f000 fa54 	bl	800125c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db4:	2100      	movs	r1, #0
 8000db6:	4809      	ldr	r0, [pc, #36]	; (8000ddc <MX_LPUART1_UART_Init+0x90>)
 8000db8:	f005 fbae 	bl	8006518 <HAL_UARTEx_SetRxFifoThreshold>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000dc2:	f000 fa4b 	bl	800125c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_LPUART1_UART_Init+0x90>)
 8000dc8:	f005 fb2f 	bl	800642a <HAL_UARTEx_DisableFifoMode>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000dd2:	f000 fa43 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20002bb0 	.word	0x20002bb0
 8000de0:	40008000 	.word	0x40008000
 8000de4:	00033324 	.word	0x00033324

08000de8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dec:	4b22      	ldr	r3, [pc, #136]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000dee:	4a23      	ldr	r2, [pc, #140]	; (8000e7c <MX_USART3_UART_Init+0x94>)
 8000df0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000df2:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e00:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e06:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e0e:	220c      	movs	r2, #12
 8000e10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e30:	4811      	ldr	r0, [pc, #68]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e32:	f004 fcd3 	bl	80057dc <HAL_UART_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e3c:	f000 fa0e 	bl	800125c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e40:	2100      	movs	r1, #0
 8000e42:	480d      	ldr	r0, [pc, #52]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e44:	f005 fb2a 	bl	800649c <HAL_UARTEx_SetTxFifoThreshold>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e4e:	f000 fa05 	bl	800125c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e52:	2100      	movs	r1, #0
 8000e54:	4808      	ldr	r0, [pc, #32]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e56:	f005 fb5f 	bl	8006518 <HAL_UARTEx_SetRxFifoThreshold>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e60:	f000 f9fc 	bl	800125c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e64:	4804      	ldr	r0, [pc, #16]	; (8000e78 <MX_USART3_UART_Init+0x90>)
 8000e66:	f005 fae0 	bl	800642a <HAL_UARTEx_DisableFifoMode>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e70:	f000 f9f4 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20002c40 	.word	0x20002c40
 8000e7c:	40004800 	.word	0x40004800

08000e80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000e86:	463b      	mov	r3, r7
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
 8000e94:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <MX_RTC_Init+0x8c>)
 8000e98:	4a1d      	ldr	r2, [pc, #116]	; (8000f10 <MX_RTC_Init+0x90>)
 8000e9a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <MX_RTC_Init+0x8c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <MX_RTC_Init+0x8c>)
 8000ea4:	227f      	movs	r2, #127	; 0x7f
 8000ea6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_RTC_Init+0x8c>)
 8000eaa:	22ff      	movs	r2, #255	; 0xff
 8000eac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <MX_RTC_Init+0x8c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <MX_RTC_Init+0x8c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_RTC_Init+0x8c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MX_RTC_Init+0x8c>)
 8000ec2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <MX_RTC_Init+0x8c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ece:	480f      	ldr	r0, [pc, #60]	; (8000f0c <MX_RTC_Init+0x8c>)
 8000ed0:	f004 f880 	bl	8004fd4 <HAL_RTC_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000eda:	f000 f9bf 	bl	800125c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000eee:	463b      	mov	r3, r7
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4806      	ldr	r0, [pc, #24]	; (8000f0c <MX_RTC_Init+0x8c>)
 8000ef4:	f004 f974 	bl	80051e0 <HAL_RTCEx_PrivilegeModeSet>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000efe:	f000 f9ad 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20002cd0 	.word	0x20002cd0
 8000f10:	40002800 	.word	0x40002800

08000f14 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
 8000f28:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000f2a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000f2e:	f7ff fda3 	bl	8000a78 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000f32:	2002      	movs	r0, #2
 8000f34:	f7ff fd88 	bl	8000a48 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff fd85 	bl	8000a48 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f42:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000f44:	2303      	movs	r3, #3
 8000f46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4809      	ldr	r0, [pc, #36]	; (8000f78 <MX_UCPD1_Init+0x64>)
 8000f52:	f005 fcb8 	bl	80068c6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f5a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	463b      	mov	r3, r7
 8000f66:	4619      	mov	r1, r3
 8000f68:	4804      	ldr	r0, [pc, #16]	; (8000f7c <MX_UCPD1_Init+0x68>)
 8000f6a:	f005 fcac 	bl	80068c6 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	42020400 	.word	0x42020400
 8000f7c:	42020000 	.word	0x42020000

08000f80 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <MX_USB_PCD_Init+0x48>)
 8000f86:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <MX_USB_PCD_Init+0x4c>)
 8000f88:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_USB_PCD_Init+0x48>)
 8000f8c:	2208      	movs	r2, #8
 8000f8e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <MX_USB_PCD_Init+0x48>)
 8000f92:	2202      	movs	r2, #2
 8000f94:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_USB_PCD_Init+0x48>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <MX_USB_PCD_Init+0x48>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_USB_PCD_Init+0x48>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <MX_USB_PCD_Init+0x48>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_USB_PCD_Init+0x48>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_USB_PCD_Init+0x48>)
 8000fb6:	f002 f945 	bl	8003244 <HAL_PCD_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000fc0:	f000 f94c 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20002cf8 	.word	0x20002cf8
 8000fcc:	4000d400 	.word	0x4000d400

08000fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08e      	sub	sp, #56	; 0x38
 8000fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fe6:	4b8a      	ldr	r3, [pc, #552]	; (8001210 <MX_GPIO_Init+0x240>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	4a89      	ldr	r2, [pc, #548]	; (8001210 <MX_GPIO_Init+0x240>)
 8000fec:	f043 0310 	orr.w	r3, r3, #16
 8000ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff2:	4b87      	ldr	r3, [pc, #540]	; (8001210 <MX_GPIO_Init+0x240>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	623b      	str	r3, [r7, #32]
 8000ffc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	4b84      	ldr	r3, [pc, #528]	; (8001210 <MX_GPIO_Init+0x240>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	4a83      	ldr	r2, [pc, #524]	; (8001210 <MX_GPIO_Init+0x240>)
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100a:	4b81      	ldr	r3, [pc, #516]	; (8001210 <MX_GPIO_Init+0x240>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001016:	4b7e      	ldr	r3, [pc, #504]	; (8001210 <MX_GPIO_Init+0x240>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	4a7d      	ldr	r2, [pc, #500]	; (8001210 <MX_GPIO_Init+0x240>)
 800101c:	f043 0320 	orr.w	r3, r3, #32
 8001020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001022:	4b7b      	ldr	r3, [pc, #492]	; (8001210 <MX_GPIO_Init+0x240>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	f003 0320 	and.w	r3, r3, #32
 800102a:	61bb      	str	r3, [r7, #24]
 800102c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102e:	4b78      	ldr	r3, [pc, #480]	; (8001210 <MX_GPIO_Init+0x240>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	4a77      	ldr	r2, [pc, #476]	; (8001210 <MX_GPIO_Init+0x240>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103a:	4b75      	ldr	r3, [pc, #468]	; (8001210 <MX_GPIO_Init+0x240>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	4b72      	ldr	r3, [pc, #456]	; (8001210 <MX_GPIO_Init+0x240>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	4a71      	ldr	r2, [pc, #452]	; (8001210 <MX_GPIO_Init+0x240>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001052:	4b6f      	ldr	r3, [pc, #444]	; (8001210 <MX_GPIO_Init+0x240>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	4b6c      	ldr	r3, [pc, #432]	; (8001210 <MX_GPIO_Init+0x240>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	4a6b      	ldr	r2, [pc, #428]	; (8001210 <MX_GPIO_Init+0x240>)
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106a:	4b69      	ldr	r3, [pc, #420]	; (8001210 <MX_GPIO_Init+0x240>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001076:	4b66      	ldr	r3, [pc, #408]	; (8001210 <MX_GPIO_Init+0x240>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	4a65      	ldr	r2, [pc, #404]	; (8001210 <MX_GPIO_Init+0x240>)
 800107c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001082:	4b63      	ldr	r3, [pc, #396]	; (8001210 <MX_GPIO_Init+0x240>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108e:	4b60      	ldr	r3, [pc, #384]	; (8001210 <MX_GPIO_Init+0x240>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	4a5f      	ldr	r2, [pc, #380]	; (8001210 <MX_GPIO_Init+0x240>)
 8001094:	f043 0308 	orr.w	r3, r3, #8
 8001098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109a:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <MX_GPIO_Init+0x240>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	f003 0308 	and.w	r3, r3, #8
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80010a6:	f002 fa57 	bl	8003558 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2180      	movs	r1, #128	; 0x80
 80010ae:	4859      	ldr	r0, [pc, #356]	; (8001214 <MX_GPIO_Init+0x244>)
 80010b0:	f002 f880 	bl	80031b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ba:	4857      	ldr	r0, [pc, #348]	; (8001218 <MX_GPIO_Init+0x248>)
 80010bc:	f002 f87a 	bl	80031b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	21a0      	movs	r1, #160	; 0xa0
 80010c4:	4855      	ldr	r0, [pc, #340]	; (800121c <MX_GPIO_Init+0x24c>)
 80010c6:	f002 f875 	bl	80031b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80010ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d0:	2303      	movs	r3, #3
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	4850      	ldr	r0, [pc, #320]	; (8001220 <MX_GPIO_Init+0x250>)
 80010e0:	f001 fee8 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ea:	2303      	movs	r3, #3
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f6:	4619      	mov	r1, r3
 80010f8:	484a      	ldr	r0, [pc, #296]	; (8001224 <MX_GPIO_Init+0x254>)
 80010fa:	f001 fedb 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80010fe:	230b      	movs	r3, #11
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001102:	2303      	movs	r3, #3
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800110a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110e:	4619      	mov	r1, r3
 8001110:	4845      	ldr	r0, [pc, #276]	; (8001228 <MX_GPIO_Init+0x258>)
 8001112:	f001 fecf 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC3 PC6
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6
 8001116:	f641 734b 	movw	r3, #8011	; 0x1f4b
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111c:	2303      	movs	r3, #3
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001128:	4619      	mov	r1, r3
 800112a:	483a      	ldr	r0, [pc, #232]	; (8001214 <MX_GPIO_Init+0x244>)
 800112c:	f001 fec2 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001130:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001136:	2303      	movs	r3, #3
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001142:	4619      	mov	r1, r3
 8001144:	4834      	ldr	r0, [pc, #208]	; (8001218 <MX_GPIO_Init+0x248>)
 8001146:	f001 feb5 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB13
                           PB4 PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13
 800114a:	f242 3357 	movw	r3, #9047	; 0x2357
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001150:	2303      	movs	r3, #3
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115c:	4619      	mov	r1, r3
 800115e:	482f      	ldr	r0, [pc, #188]	; (800121c <MX_GPIO_Init+0x24c>)
 8001160:	f001 fea8 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG9
                           PG10 PG12 PG13 PG14
                           PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001164:	f24f 637f 	movw	r3, #63103	; 0xf67f
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800116a:	2303      	movs	r3, #3
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001176:	4619      	mov	r1, r3
 8001178:	482c      	ldr	r0, [pc, #176]	; (800122c <MX_GPIO_Init+0x25c>)
 800117a:	f001 fe9b 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800117e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001184:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <MX_GPIO_Init+0x260>)
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001190:	4619      	mov	r1, r3
 8001192:	4822      	ldr	r0, [pc, #136]	; (800121c <MX_GPIO_Init+0x24c>)
 8001194:	f001 fe8e 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 PD3 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001198:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119e:	2303      	movs	r3, #3
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011aa:	4619      	mov	r1, r3
 80011ac:	4821      	ldr	r0, [pc, #132]	; (8001234 <MX_GPIO_Init+0x264>)
 80011ae:	f001 fe81 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	4619      	mov	r1, r3
 80011c8:	4812      	ldr	r0, [pc, #72]	; (8001214 <MX_GPIO_Init+0x244>)
 80011ca:	f001 fe73 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80011ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80011e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e4:	4619      	mov	r1, r3
 80011e6:	480c      	ldr	r0, [pc, #48]	; (8001218 <MX_GPIO_Init+0x248>)
 80011e8:	f001 fe64 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 80011ec:	23a0      	movs	r3, #160	; 0xa0
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001200:	4619      	mov	r1, r3
 8001202:	4806      	ldr	r0, [pc, #24]	; (800121c <MX_GPIO_Init+0x24c>)
 8001204:	f001 fe56 	bl	8002eb4 <HAL_GPIO_Init>

}
 8001208:	bf00      	nop
 800120a:	3738      	adds	r7, #56	; 0x38
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000
 8001214:	42020800 	.word	0x42020800
 8001218:	42020000 	.word	0x42020000
 800121c:	42020400 	.word	0x42020400
 8001220:	42021000 	.word	0x42021000
 8001224:	42021400 	.word	0x42021400
 8001228:	42021c00 	.word	0x42021c00
 800122c:	42021800 	.word	0x42021800
 8001230:	10110000 	.word	0x10110000
 8001234:	42020c00 	.word	0x42020c00

08001238 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d101      	bne.n	800124e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800124a:	f000 fbe5 	bl	8001a18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40012c00 	.word	0x40012c00

0800125c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001260:	b672      	cpsid	i
}
 8001262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001264:	e7fe      	b.n	8001264 <Error_Handler+0x8>
	...

08001268 <init_uart>:
#include "peripheral_if.h"
#include "stm32l5xx_hal.h"

void * uart_handle;

void init_uart(void * uh) {
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	uart_handle = uh;
 8001270:	4a04      	ldr	r2, [pc, #16]	; (8001284 <init_uart+0x1c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20002fec 	.word	0x20002fec

08001288 <read_uart>:

int read_uart(uint8_t *buf, uint16_t size, uint32_t timeout) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	460b      	mov	r3, r1
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	817b      	strh	r3, [r7, #10]
	HAL_UART_Receive(uart_handle, buf, size, timeout);
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <read_uart+0x28>)
 8001298:	6818      	ldr	r0, [r3, #0]
 800129a:	897a      	ldrh	r2, [r7, #10]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68f9      	ldr	r1, [r7, #12]
 80012a0:	f004 fb82 	bl	80059a8 <HAL_UART_Receive>

}
 80012a4:	bf00      	nop
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20002fec 	.word	0x20002fec

080012b4 <write_uart>:

int write_uart(uint8_t *buf, uint16_t size, uint32_t timeout) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	460b      	mov	r3, r1
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	817b      	strh	r3, [r7, #10]
	  HAL_UART_Transmit(uart_handle, buf, size, timeout);
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <write_uart+0x28>)
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	897a      	ldrh	r2, [r7, #10]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68f9      	ldr	r1, [r7, #12]
 80012cc:	f004 fad6 	bl	800587c <HAL_UART_Transmit>

}
 80012d0:	bf00      	nop
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20002fec 	.word	0x20002fec

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_MspInit+0x44>)
 80012e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ea:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <HAL_MspInit+0x44>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6613      	str	r3, [r2, #96]	; 0x60
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_MspInit+0x44>)
 80012f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <HAL_MspInit+0x44>)
 8001300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001302:	4a08      	ldr	r2, [pc, #32]	; (8001324 <HAL_MspInit+0x44>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001308:	6593      	str	r3, [r2, #88]	; 0x58
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_MspInit+0x44>)
 800130c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000

08001328 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b0ae      	sub	sp, #184	; 0xb8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	2294      	movs	r2, #148	; 0x94
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f007 f9bd 	bl	80086c8 <memset>
  if(hadc->Instance==ADC1)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a1f      	ldr	r2, [pc, #124]	; (80013d0 <HAL_ADC_MspInit+0xa8>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d137      	bne.n	80013c8 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001358:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800135c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800135e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001362:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	4618      	mov	r0, r3
 800136c:	f003 f91c 	bl	80045a8 <HAL_RCCEx_PeriphCLKConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001376:	f7ff ff71 	bl	800125c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_ADC_MspInit+0xac>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	4a15      	ldr	r2, [pc, #84]	; (80013d4 <HAL_ADC_MspInit+0xac>)
 8001380:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_ADC_MspInit+0xac>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <HAL_ADC_MspInit+0xac>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <HAL_ADC_MspInit+0xac>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <HAL_ADC_MspInit+0xac>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80013aa:	2304      	movs	r3, #4
 80013ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b0:	2303      	movs	r3, #3
 80013b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013c0:	4619      	mov	r1, r3
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <HAL_ADC_MspInit+0xb0>)
 80013c4:	f001 fd76 	bl	8002eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	37b8      	adds	r7, #184	; 0xb8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	42028000 	.word	0x42028000
 80013d4:	40021000 	.word	0x40021000
 80013d8:	42020800 	.word	0x42020800

080013dc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b0ae      	sub	sp, #184	; 0xb8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	2294      	movs	r2, #148	; 0x94
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f007 f963 	bl	80086c8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a22      	ldr	r2, [pc, #136]	; (8001490 <HAL_FDCAN_MspInit+0xb4>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d13c      	bne.n	8001486 <HAL_FDCAN_MspInit+0xaa>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800140c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001410:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001412:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001416:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4618      	mov	r0, r3
 800141e:	f003 f8c3 	bl	80045a8 <HAL_RCCEx_PeriphCLKConfig>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001428:	f7ff ff18 	bl	800125c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <HAL_FDCAN_MspInit+0xb8>)
 800142e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001430:	4a18      	ldr	r2, [pc, #96]	; (8001494 <HAL_FDCAN_MspInit+0xb8>)
 8001432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001436:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <HAL_FDCAN_MspInit+0xb8>)
 800143a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <HAL_FDCAN_MspInit+0xb8>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001448:	4a12      	ldr	r2, [pc, #72]	; (8001494 <HAL_FDCAN_MspInit+0xb8>)
 800144a:	f043 0308 	orr.w	r3, r3, #8
 800144e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <HAL_FDCAN_MspInit+0xb8>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800145c:	2303      	movs	r3, #3
 800145e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001474:	2309      	movs	r3, #9
 8001476:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <HAL_FDCAN_MspInit+0xbc>)
 8001482:	f001 fd17 	bl	8002eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001486:	bf00      	nop
 8001488:	37b8      	adds	r7, #184	; 0xb8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	4000a400 	.word	0x4000a400
 8001494:	40021000 	.word	0x40021000
 8001498:	42020c00 	.word	0x42020c00

0800149c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b0b0      	sub	sp, #192	; 0xc0
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b4:	f107 0318 	add.w	r3, r7, #24
 80014b8:	2294      	movs	r2, #148	; 0x94
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f007 f903 	bl	80086c8 <memset>
  if(huart->Instance==LPUART1)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a43      	ldr	r2, [pc, #268]	; (80015d4 <HAL_UART_MspInit+0x138>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d13e      	bne.n	800154a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80014cc:	2320      	movs	r3, #32
 80014ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d4:	f107 0318 	add.w	r3, r7, #24
 80014d8:	4618      	mov	r0, r3
 80014da:	f003 f865 	bl	80045a8 <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014e4:	f7ff feba 	bl	800125c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80014e8:	4b3b      	ldr	r3, [pc, #236]	; (80015d8 <HAL_UART_MspInit+0x13c>)
 80014ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ec:	4a3a      	ldr	r2, [pc, #232]	; (80015d8 <HAL_UART_MspInit+0x13c>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80014f4:	4b38      	ldr	r3, [pc, #224]	; (80015d8 <HAL_UART_MspInit+0x13c>)
 80014f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001500:	4b35      	ldr	r3, [pc, #212]	; (80015d8 <HAL_UART_MspInit+0x13c>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001504:	4a34      	ldr	r2, [pc, #208]	; (80015d8 <HAL_UART_MspInit+0x13c>)
 8001506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800150a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150c:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <HAL_UART_MspInit+0x13c>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001518:	f002 f81e 	bl	8003558 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 800151c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001520:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001536:	2308      	movs	r3, #8
 8001538:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800153c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001540:	4619      	mov	r1, r3
 8001542:	4826      	ldr	r0, [pc, #152]	; (80015dc <HAL_UART_MspInit+0x140>)
 8001544:	f001 fcb6 	bl	8002eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001548:	e040      	b.n	80015cc <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a24      	ldr	r2, [pc, #144]	; (80015e0 <HAL_UART_MspInit+0x144>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d13b      	bne.n	80015cc <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001554:	2304      	movs	r3, #4
 8001556:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001558:	2300      	movs	r3, #0
 800155a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800155c:	f107 0318 	add.w	r3, r7, #24
 8001560:	4618      	mov	r0, r3
 8001562:	f003 f821 	bl	80045a8 <HAL_RCCEx_PeriphCLKConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800156c:	f7ff fe76 	bl	800125c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <HAL_UART_MspInit+0x13c>)
 8001572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001574:	4a18      	ldr	r2, [pc, #96]	; (80015d8 <HAL_UART_MspInit+0x13c>)
 8001576:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800157a:	6593      	str	r3, [r2, #88]	; 0x58
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <HAL_UART_MspInit+0x13c>)
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <HAL_UART_MspInit+0x13c>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158c:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <HAL_UART_MspInit+0x13c>)
 800158e:	f043 0302 	orr.w	r3, r3, #2
 8001592:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001594:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_UART_MspInit+0x13c>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015ba:	2307      	movs	r3, #7
 80015bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015c4:	4619      	mov	r1, r3
 80015c6:	4807      	ldr	r0, [pc, #28]	; (80015e4 <HAL_UART_MspInit+0x148>)
 80015c8:	f001 fc74 	bl	8002eb4 <HAL_GPIO_Init>
}
 80015cc:	bf00      	nop
 80015ce:	37c0      	adds	r7, #192	; 0xc0
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40008000 	.word	0x40008000
 80015d8:	40021000 	.word	0x40021000
 80015dc:	42021800 	.word	0x42021800
 80015e0:	40004800 	.word	0x40004800
 80015e4:	42020400 	.word	0x42020400

080015e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b0a8      	sub	sp, #160	; 0xa0
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2294      	movs	r2, #148	; 0x94
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f007 f865 	bl	80086c8 <memset>
  if(hrtc->Instance==RTC)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a16      	ldr	r2, [pc, #88]	; (800165c <HAL_RTC_MspInit+0x74>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d124      	bne.n	8001652 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001608:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800160c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800160e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001612:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	4618      	mov	r0, r3
 800161c:	f002 ffc4 	bl	80045a8 <HAL_RCCEx_PeriphCLKConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001626:	f7ff fe19 	bl	800125c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <HAL_RTC_MspInit+0x78>)
 800162c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001630:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <HAL_RTC_MspInit+0x78>)
 8001632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001636:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_RTC_MspInit+0x78>)
 800163c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163e:	4a08      	ldr	r2, [pc, #32]	; (8001660 <HAL_RTC_MspInit+0x78>)
 8001640:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001644:	6593      	str	r3, [r2, #88]	; 0x58
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_RTC_MspInit+0x78>)
 8001648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001652:	bf00      	nop
 8001654:	37a0      	adds	r7, #160	; 0xa0
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40002800 	.word	0x40002800
 8001660:	40021000 	.word	0x40021000

08001664 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b0ae      	sub	sp, #184	; 0xb8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	2294      	movs	r2, #148	; 0x94
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f007 f81f 	bl	80086c8 <memset>
  if(hpcd->Instance==USB)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a22      	ldr	r2, [pc, #136]	; (8001718 <HAL_PCD_MspInit+0xb4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d13d      	bne.n	8001710 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001698:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a0:	f107 0310 	add.w	r3, r7, #16
 80016a4:	4618      	mov	r0, r3
 80016a6:	f002 ff7f 	bl	80045a8 <HAL_RCCEx_PeriphCLKConfig>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80016b0:	f7ff fdd4 	bl	800125c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_PCD_MspInit+0xb8>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b8:	4a18      	ldr	r2, [pc, #96]	; (800171c <HAL_PCD_MspInit+0xb8>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c0:	4b16      	ldr	r3, [pc, #88]	; (800171c <HAL_PCD_MspInit+0xb8>)
 80016c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016cc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80016e6:	230a      	movs	r3, #10
 80016e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016f0:	4619      	mov	r1, r3
 80016f2:	480b      	ldr	r0, [pc, #44]	; (8001720 <HAL_PCD_MspInit+0xbc>)
 80016f4:	f001 fbde 	bl	8002eb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_PCD_MspInit+0xb8>)
 80016fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fc:	4a07      	ldr	r2, [pc, #28]	; (800171c <HAL_PCD_MspInit+0xb8>)
 80016fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001702:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <HAL_PCD_MspInit+0xb8>)
 8001706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001710:	bf00      	nop
 8001712:	37b8      	adds	r7, #184	; 0xb8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	4000d400 	.word	0x4000d400
 800171c:	40021000 	.word	0x40021000
 8001720:	42020000 	.word	0x42020000

08001724 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08c      	sub	sp, #48	; 0x30
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001734:	2200      	movs	r2, #0
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	202a      	movs	r0, #42	; 0x2a
 800173a:	f001 f9eb 	bl	8002b14 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800173e:	202a      	movs	r0, #42	; 0x2a
 8001740:	f001 fa02 	bl	8002b48 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001744:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <HAL_InitTick+0x9c>)
 8001746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001748:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <HAL_InitTick+0x9c>)
 800174a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800174e:	6613      	str	r3, [r2, #96]	; 0x60
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <HAL_InitTick+0x9c>)
 8001752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800175c:	f107 0210 	add.w	r2, r7, #16
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4611      	mov	r1, r2
 8001766:	4618      	mov	r0, r3
 8001768:	f002 fe0e 	bl	8004388 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800176c:	f002 fdf8 	bl	8004360 <HAL_RCC_GetPCLK2Freq>
 8001770:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001774:	4a13      	ldr	r2, [pc, #76]	; (80017c4 <HAL_InitTick+0xa0>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	0c9b      	lsrs	r3, r3, #18
 800177c:	3b01      	subs	r3, #1
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_InitTick+0xa4>)
 8001782:	4a12      	ldr	r2, [pc, #72]	; (80017cc <HAL_InitTick+0xa8>)
 8001784:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <HAL_InitTick+0xa4>)
 8001788:	f240 32e7 	movw	r2, #999	; 0x3e7
 800178c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800178e:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <HAL_InitTick+0xa4>)
 8001790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001792:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_InitTick+0xa4>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_InitTick+0xa4>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80017a0:	4809      	ldr	r0, [pc, #36]	; (80017c8 <HAL_InitTick+0xa4>)
 80017a2:	f003 fd49 	bl	8005238 <HAL_TIM_Base_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d104      	bne.n	80017b6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80017ac:	4806      	ldr	r0, [pc, #24]	; (80017c8 <HAL_InitTick+0xa4>)
 80017ae:	f003 fda5 	bl	80052fc <HAL_TIM_Base_Start_IT>
 80017b2:	4603      	mov	r3, r0
 80017b4:	e000      	b.n	80017b8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3730      	adds	r7, #48	; 0x30
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40021000 	.word	0x40021000
 80017c4:	431bde83 	.word	0x431bde83
 80017c8:	20002ff0 	.word	0x20002ff0
 80017cc:	40012c00 	.word	0x40012c00

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <NMI_Handler+0x4>

080017d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <HardFault_Handler+0x4>

080017dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <MemManage_Handler+0x4>

080017e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <BusFault_Handler+0x4>

080017e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <UsageFault_Handler+0x4>

080017ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <TIM1_UP_IRQHandler+0x10>)
 8001802:	f003 fdeb 	bl	80053dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20002ff0 	.word	0x20002ff0

08001810 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <SystemInit+0x20>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181a:	4a05      	ldr	r2, [pc, #20]	; (8001830 <SystemInit+0x20>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800183a:	4b4f      	ldr	r3, [pc, #316]	; (8001978 <SystemCoreClockUpdate+0x144>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	d107      	bne.n	8001856 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001846:	4b4c      	ldr	r3, [pc, #304]	; (8001978 <SystemCoreClockUpdate+0x144>)
 8001848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	e005      	b.n	8001862 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001856:	4b48      	ldr	r3, [pc, #288]	; (8001978 <SystemCoreClockUpdate+0x144>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	f003 030f 	and.w	r3, r3, #15
 8001860:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001862:	4a46      	ldr	r2, [pc, #280]	; (800197c <SystemCoreClockUpdate+0x148>)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800186c:	4b42      	ldr	r3, [pc, #264]	; (8001978 <SystemCoreClockUpdate+0x144>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 030c 	and.w	r3, r3, #12
 8001874:	2b0c      	cmp	r3, #12
 8001876:	d866      	bhi.n	8001946 <SystemCoreClockUpdate+0x112>
 8001878:	a201      	add	r2, pc, #4	; (adr r2, 8001880 <SystemCoreClockUpdate+0x4c>)
 800187a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187e:	bf00      	nop
 8001880:	080018b5 	.word	0x080018b5
 8001884:	08001947 	.word	0x08001947
 8001888:	08001947 	.word	0x08001947
 800188c:	08001947 	.word	0x08001947
 8001890:	080018bd 	.word	0x080018bd
 8001894:	08001947 	.word	0x08001947
 8001898:	08001947 	.word	0x08001947
 800189c:	08001947 	.word	0x08001947
 80018a0:	080018c5 	.word	0x080018c5
 80018a4:	08001947 	.word	0x08001947
 80018a8:	08001947 	.word	0x08001947
 80018ac:	08001947 	.word	0x08001947
 80018b0:	080018cd 	.word	0x080018cd
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80018b4:	4a32      	ldr	r2, [pc, #200]	; (8001980 <SystemCoreClockUpdate+0x14c>)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	6013      	str	r3, [r2, #0]
      break;
 80018ba:	e048      	b.n	800194e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80018bc:	4b30      	ldr	r3, [pc, #192]	; (8001980 <SystemCoreClockUpdate+0x14c>)
 80018be:	4a31      	ldr	r2, [pc, #196]	; (8001984 <SystemCoreClockUpdate+0x150>)
 80018c0:	601a      	str	r2, [r3, #0]
      break;
 80018c2:	e044      	b.n	800194e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80018c4:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <SystemCoreClockUpdate+0x14c>)
 80018c6:	4a30      	ldr	r2, [pc, #192]	; (8001988 <SystemCoreClockUpdate+0x154>)
 80018c8:	601a      	str	r2, [r3, #0]
      break;
 80018ca:	e040      	b.n	800194e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80018cc:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <SystemCoreClockUpdate+0x144>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80018d6:	4b28      	ldr	r3, [pc, #160]	; (8001978 <SystemCoreClockUpdate+0x144>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	3301      	adds	r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d003      	beq.n	80018f2 <SystemCoreClockUpdate+0xbe>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d006      	beq.n	80018fe <SystemCoreClockUpdate+0xca>
 80018f0:	e00b      	b.n	800190a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80018f2:	4a24      	ldr	r2, [pc, #144]	; (8001984 <SystemCoreClockUpdate+0x150>)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fa:	613b      	str	r3, [r7, #16]
          break;
 80018fc:	e00b      	b.n	8001916 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80018fe:	4a22      	ldr	r2, [pc, #136]	; (8001988 <SystemCoreClockUpdate+0x154>)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	613b      	str	r3, [r7, #16]
          break;
 8001908:	e005      	b.n	8001916 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001912:	613b      	str	r3, [r7, #16]
          break;
 8001914:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001916:	4b18      	ldr	r3, [pc, #96]	; (8001978 <SystemCoreClockUpdate+0x144>)
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	0a1b      	lsrs	r3, r3, #8
 800191c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	fb02 f303 	mul.w	r3, r2, r3
 8001926:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <SystemCoreClockUpdate+0x144>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	0e5b      	lsrs	r3, r3, #25
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	3301      	adds	r3, #1
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001940:	4a0f      	ldr	r2, [pc, #60]	; (8001980 <SystemCoreClockUpdate+0x14c>)
 8001942:	6013      	str	r3, [r2, #0]
      break;
 8001944:	e003      	b.n	800194e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001946:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <SystemCoreClockUpdate+0x14c>)
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	6013      	str	r3, [r2, #0]
      break;
 800194c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <SystemCoreClockUpdate+0x144>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	091b      	lsrs	r3, r3, #4
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	4a0c      	ldr	r2, [pc, #48]	; (800198c <SystemCoreClockUpdate+0x158>)
 800195a:	5cd3      	ldrb	r3, [r2, r3]
 800195c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <SystemCoreClockUpdate+0x14c>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
 8001968:	4a05      	ldr	r2, [pc, #20]	; (8001980 <SystemCoreClockUpdate+0x14c>)
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	371c      	adds	r7, #28
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	40021000 	.word	0x40021000
 800197c:	08008780 	.word	0x08008780
 8001980:	20000004 	.word	0x20000004
 8001984:	00f42400 	.word	0x00f42400
 8001988:	007a1200 	.word	0x007a1200
 800198c:	08008768 	.word	0x08008768

08001990 <Reset_Handler>:
 8001990:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c8 <LoopForever+0x2>
 8001994:	f7ff ff3c 	bl	8001810 <SystemInit>
 8001998:	2100      	movs	r1, #0
 800199a:	e003      	b.n	80019a4 <LoopCopyDataInit>

0800199c <CopyDataInit>:
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <LoopForever+0x6>)
 800199e:	585b      	ldr	r3, [r3, r1]
 80019a0:	5043      	str	r3, [r0, r1]
 80019a2:	3104      	adds	r1, #4

080019a4 <LoopCopyDataInit>:
 80019a4:	480a      	ldr	r0, [pc, #40]	; (80019d0 <LoopForever+0xa>)
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <LoopForever+0xe>)
 80019a8:	1842      	adds	r2, r0, r1
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d3f6      	bcc.n	800199c <CopyDataInit>
 80019ae:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <LoopForever+0x12>)
 80019b0:	e002      	b.n	80019b8 <LoopFillZerobss>

080019b2 <FillZerobss>:
 80019b2:	2300      	movs	r3, #0
 80019b4:	f842 3b04 	str.w	r3, [r2], #4

080019b8 <LoopFillZerobss>:
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <LoopForever+0x16>)
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d3f9      	bcc.n	80019b2 <FillZerobss>
 80019be:	f006 fe5f 	bl	8008680 <__libc_init_array>
 80019c2:	f7ff f871 	bl	8000aa8 <main>

080019c6 <LoopForever>:
 80019c6:	e7fe      	b.n	80019c6 <LoopForever>
 80019c8:	20030000 	.word	0x20030000
 80019cc:	080087f8 	.word	0x080087f8
 80019d0:	20000000 	.word	0x20000000
 80019d4:	20000014 	.word	0x20000014
 80019d8:	20000014 	.word	0x20000014
 80019dc:	20003684 	.word	0x20003684

080019e0 <ADC1_2_IRQHandler>:
 80019e0:	e7fe      	b.n	80019e0 <ADC1_2_IRQHandler>

080019e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80019ec:	2004      	movs	r0, #4
 80019ee:	f001 f886 	bl	8002afe <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80019f2:	f7ff ff1f 	bl	8001834 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019f6:	2007      	movs	r0, #7
 80019f8:	f7ff fe94 	bl	8001724 <HAL_InitTick>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	71fb      	strb	r3, [r7, #7]
 8001a06:	e001      	b.n	8001a0c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a08:	f7ff fc6a 	bl	80012e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_IncTick+0x20>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_IncTick+0x24>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <HAL_IncTick+0x24>)
 8001a2a:	6013      	str	r3, [r2, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	2000000c 	.word	0x2000000c
 8001a3c:	2000303c 	.word	0x2000303c

08001a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return uwTick;
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <HAL_GetTick+0x14>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	2000303c 	.word	0x2000303c

08001a58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	609a      	str	r2, [r3, #8]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	609a      	str	r2, [r3, #8]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3360      	adds	r3, #96	; 0x60
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <LL_ADC_SetOffset+0x44>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	4313      	orrs	r3, r2
 8001af0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001af8:	bf00      	nop
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	03fff000 	.word	0x03fff000

08001b08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3360      	adds	r3, #96	; 0x60
 8001b16:	461a      	mov	r2, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3360      	adds	r3, #96	; 0x60
 8001b44:	461a      	mov	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b5e:	bf00      	nop
 8001b60:	371c      	adds	r7, #28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	615a      	str	r2, [r3, #20]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3330      	adds	r3, #48	; 0x30
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	0a1b      	lsrs	r3, r3, #8
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	4413      	add	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	f003 031f 	and.w	r3, r3, #31
 8001bba:	211f      	movs	r1, #31
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	0e9b      	lsrs	r3, r3, #26
 8001bc8:	f003 011f 	and.w	r1, r3, #31
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bdc:	bf00      	nop
 8001bde:	371c      	adds	r7, #28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	3314      	adds	r3, #20
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	0e5b      	lsrs	r3, r3, #25
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	4413      	add	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	0d1b      	lsrs	r3, r3, #20
 8001c10:	f003 031f 	and.w	r3, r3, #31
 8001c14:	2107      	movs	r1, #7
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	401a      	ands	r2, r3
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	0d1b      	lsrs	r3, r3, #20
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c32:	bf00      	nop
 8001c34:	371c      	adds	r7, #28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 0318 	and.w	r3, r3, #24
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c64:	40d9      	lsrs	r1, r3
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	400b      	ands	r3, r1
 8001c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	0007ffff 	.word	0x0007ffff

08001c88 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6093      	str	r3, [r2, #8]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cc0:	d101      	bne.n	8001cc6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ce4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ce8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d10:	d101      	bne.n	8001d16 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <LL_ADC_IsEnabled+0x18>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e000      	b.n	8001d3e <LL_ADC_IsEnabled+0x1a>
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d101      	bne.n	8001d62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d101      	bne.n	8001d88 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e134      	b.n	800201c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d109      	bne.n	8001dd4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff fab1 	bl	8001328 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff67 	bl	8001cac <LL_ADC_IsDeepPowerDownEnabled>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d004      	beq.n	8001dee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff4d 	bl	8001c88 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ff82 	bl	8001cfc <LL_ADC_IsInternalRegulatorEnabled>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d115      	bne.n	8001e2a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff66 	bl	8001cd4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e08:	4b86      	ldr	r3, [pc, #536]	; (8002024 <HAL_ADC_Init+0x28c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	099b      	lsrs	r3, r3, #6
 8001e0e:	4a86      	ldr	r2, [pc, #536]	; (8002028 <HAL_ADC_Init+0x290>)
 8001e10:	fba2 2303 	umull	r2, r3, r2, r3
 8001e14:	099b      	lsrs	r3, r3, #6
 8001e16:	3301      	adds	r3, #1
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e1c:	e002      	b.n	8001e24 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f9      	bne.n	8001e1e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff64 	bl	8001cfc <LL_ADC_IsInternalRegulatorEnabled>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10d      	bne.n	8001e56 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3e:	f043 0210 	orr.w	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4a:	f043 0201 	orr.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff ff75 	bl	8001d4a <LL_ADC_REG_IsConversionOngoing>
 8001e60:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f040 80cd 	bne.w	800200a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f040 80c9 	bne.w	800200a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e80:	f043 0202 	orr.w	r2, r3, #2
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff49 	bl	8001d24 <LL_ADC_IsEnabled>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d110      	bne.n	8001eba <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e98:	4864      	ldr	r0, [pc, #400]	; (800202c <HAL_ADC_Init+0x294>)
 8001e9a:	f7ff ff43 	bl	8001d24 <LL_ADC_IsEnabled>
 8001e9e:	4604      	mov	r4, r0
 8001ea0:	4863      	ldr	r0, [pc, #396]	; (8002030 <HAL_ADC_Init+0x298>)
 8001ea2:	f7ff ff3f 	bl	8001d24 <LL_ADC_IsEnabled>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4323      	orrs	r3, r4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d105      	bne.n	8001eba <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	485f      	ldr	r0, [pc, #380]	; (8002034 <HAL_ADC_Init+0x29c>)
 8001eb6:	f7ff fdcf 	bl	8001a58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7e5b      	ldrb	r3, [r3, #25]
 8001ebe:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ec4:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001eca:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001ed0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed8:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d106      	bne.n	8001ef6 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	3b01      	subs	r3, #1
 8001eee:	045b      	lsls	r3, r3, #17
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d009      	beq.n	8001f12 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f02:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	4b47      	ldr	r3, [pc, #284]	; (8002038 <HAL_ADC_Init+0x2a0>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	69b9      	ldr	r1, [r7, #24]
 8001f22:	430b      	orrs	r3, r1
 8001f24:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff ff0d 	bl	8001d4a <LL_ADC_REG_IsConversionOngoing>
 8001f30:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff1a 	bl	8001d70 <LL_ADC_INJ_IsConversionOngoing>
 8001f3c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d140      	bne.n	8001fc6 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d13d      	bne.n	8001fc6 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	7e1b      	ldrb	r3, [r3, #24]
 8001f52:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f54:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f5c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f6c:	f023 0306 	bic.w	r3, r3, #6
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	69b9      	ldr	r1, [r7, #24]
 8001f76:	430b      	orrs	r3, r1
 8001f78:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d118      	bne.n	8001fb6 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f8e:	f023 0304 	bic.w	r3, r3, #4
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f9a:	4311      	orrs	r1, r2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fa0:	4311      	orrs	r1, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	611a      	str	r2, [r3, #16]
 8001fb4:	e007      	b.n	8001fc6 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0201 	bic.w	r2, r2, #1
 8001fc4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd4:	f023 010f 	bic.w	r1, r3, #15
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	1e5a      	subs	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	631a      	str	r2, [r3, #48]	; 0x30
 8001fe6:	e007      	b.n	8001ff8 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 020f 	bic.w	r2, r2, #15
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffc:	f023 0303 	bic.w	r3, r3, #3
 8002000:	f043 0201 	orr.w	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	659a      	str	r2, [r3, #88]	; 0x58
 8002008:	e007      	b.n	800201a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200e:	f043 0210 	orr.w	r2, r3, #16
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800201a:	7ffb      	ldrb	r3, [r7, #31]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3724      	adds	r7, #36	; 0x24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd90      	pop	{r4, r7, pc}
 8002024:	20000004 	.word	0x20000004
 8002028:	053e2d63 	.word	0x053e2d63
 800202c:	42028000 	.word	0x42028000
 8002030:	42028100 	.word	0x42028100
 8002034:	42028300 	.word	0x42028300
 8002038:	fff0c007 	.word	0xfff0c007

0800203c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800203c:	b590      	push	{r4, r7, lr}
 800203e:	b0b7      	sub	sp, #220	; 0xdc
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_ADC_ConfigChannel+0x22>
 800205a:	2302      	movs	r3, #2
 800205c:	e3c1      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x7a6>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fe6d 	bl	8001d4a <LL_ADC_REG_IsConversionOngoing>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 83a6 	bne.w	80027c4 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	f7ff fd83 	bl	8001b90 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fe5b 	bl	8001d4a <LL_ADC_REG_IsConversionOngoing>
 8002094:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fe67 	bl	8001d70 <LL_ADC_INJ_IsConversionOngoing>
 80020a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 81c1 	bne.w	8002432 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f040 81bc 	bne.w	8002432 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020c2:	d10f      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2200      	movs	r2, #0
 80020ce:	4619      	mov	r1, r3
 80020d0:	f7ff fd8a 	bl	8001be8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fd44 	bl	8001b6a <LL_ADC_SetSamplingTimeCommonConfig>
 80020e2:	e00e      	b.n	8002102 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	6819      	ldr	r1, [r3, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	461a      	mov	r2, r3
 80020f2:	f7ff fd79 	bl	8001be8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2100      	movs	r1, #0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fd34 	bl	8001b6a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	08db      	lsrs	r3, r3, #3
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	2b04      	cmp	r3, #4
 8002122:	d00a      	beq.n	800213a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	6919      	ldr	r1, [r3, #16]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002134:	f7ff fcc4 	bl	8001ac0 <LL_ADC_SetOffset>
 8002138:	e17b      	b.n	8002432 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fce1 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 8002146:	4603      	mov	r3, r0
 8002148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10a      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x12a>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fcd6 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 800215c:	4603      	mov	r3, r0
 800215e:	0e9b      	lsrs	r3, r3, #26
 8002160:	f003 021f 	and.w	r2, r3, #31
 8002164:	e01e      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x168>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2100      	movs	r1, #0
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fccb 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 8002172:	4603      	mov	r3, r0
 8002174:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002184:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002188:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800218c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8002194:	2320      	movs	r3, #32
 8002196:	e004      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8002198:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d105      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x180>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	0e9b      	lsrs	r3, r3, #26
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	e018      	b.n	80021ee <HAL_ADC_ConfigChannel+0x1b2>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80021d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80021d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 80021e0:	2320      	movs	r3, #32
 80021e2:	e004      	b.n	80021ee <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 80021e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021e8:	fab3 f383 	clz	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d106      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fc9a 	bl	8001b34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2101      	movs	r1, #1
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fc7e 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 800220c:	4603      	mov	r3, r0
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10a      	bne.n	800222c <HAL_ADC_ConfigChannel+0x1f0>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2101      	movs	r1, #1
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fc73 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 8002222:	4603      	mov	r3, r0
 8002224:	0e9b      	lsrs	r3, r3, #26
 8002226:	f003 021f 	and.w	r2, r3, #31
 800222a:	e01e      	b.n	800226a <HAL_ADC_ConfigChannel+0x22e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2101      	movs	r1, #1
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fc68 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 8002238:	4603      	mov	r3, r0
 800223a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800224a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800224e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002252:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 800225a:	2320      	movs	r3, #32
 800225c:	e004      	b.n	8002268 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 800225e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002272:	2b00      	cmp	r3, #0
 8002274:	d105      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x246>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	0e9b      	lsrs	r3, r3, #26
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	e018      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x278>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002296:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800229a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800229e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 80022a6:	2320      	movs	r3, #32
 80022a8:	e004      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 80022aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022ae:	fab3 f383 	clz	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d106      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2200      	movs	r2, #0
 80022be:	2101      	movs	r1, #1
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fc37 	bl	8001b34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2102      	movs	r1, #2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fc1b 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10a      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x2b6>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2102      	movs	r1, #2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fc10 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 80022e8:	4603      	mov	r3, r0
 80022ea:	0e9b      	lsrs	r3, r3, #26
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	e01e      	b.n	8002330 <HAL_ADC_ConfigChannel+0x2f4>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2102      	movs	r1, #2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fc05 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 80022fe:	4603      	mov	r3, r0
 8002300:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002310:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002314:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002318:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8002320:	2320      	movs	r3, #32
 8002322:	e004      	b.n	800232e <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002324:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002338:	2b00      	cmp	r3, #0
 800233a:	d105      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x30c>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0e9b      	lsrs	r3, r3, #26
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	e016      	b.n	8002376 <HAL_ADC_ConfigChannel+0x33a>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800235a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800235c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002360:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002368:	2320      	movs	r3, #32
 800236a:	e004      	b.n	8002376 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 800236c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002376:	429a      	cmp	r2, r3
 8002378:	d106      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2200      	movs	r2, #0
 8002380:	2102      	movs	r1, #2
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fbd6 	bl	8001b34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2103      	movs	r1, #3
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fbba 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 8002394:	4603      	mov	r3, r0
 8002396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10a      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x378>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2103      	movs	r1, #3
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fbaf 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 80023aa:	4603      	mov	r3, r0
 80023ac:	0e9b      	lsrs	r3, r3, #26
 80023ae:	f003 021f 	and.w	r2, r3, #31
 80023b2:	e017      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x3a8>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2103      	movs	r1, #3
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fba4 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 80023c0:	4603      	mov	r3, r0
 80023c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80023cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023ce:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80023d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 80023d6:	2320      	movs	r3, #32
 80023d8:	e003      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 80023da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023dc:	fab3 f383 	clz	r3, r3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d105      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x3c0>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	0e9b      	lsrs	r3, r3, #26
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	e011      	b.n	8002420 <HAL_ADC_ConfigChannel+0x3e4>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002404:	fa93 f3a3 	rbit	r3, r3
 8002408:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800240a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800240c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800240e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002414:	2320      	movs	r3, #32
 8002416:	e003      	b.n	8002420 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8002418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002420:	429a      	cmp	r2, r3
 8002422:	d106      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2200      	movs	r2, #0
 800242a:	2103      	movs	r1, #3
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fb81 	bl	8001b34 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fc74 	bl	8001d24 <LL_ADC_IsEnabled>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	f040 81c9 	bne.w	80027d6 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	6819      	ldr	r1, [r3, #0]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	461a      	mov	r2, r3
 8002452:	f7ff fbf5 	bl	8001c40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	4a8f      	ldr	r2, [pc, #572]	; (8002698 <HAL_ADC_ConfigChannel+0x65c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	f040 8131 	bne.w	80026c4 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10b      	bne.n	800248a <HAL_ADC_ConfigChannel+0x44e>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	0e9b      	lsrs	r3, r3, #26
 8002478:	3301      	adds	r3, #1
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	2b09      	cmp	r3, #9
 8002480:	bf94      	ite	ls
 8002482:	2301      	movls	r3, #1
 8002484:	2300      	movhi	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	e019      	b.n	80024be <HAL_ADC_ConfigChannel+0x482>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800249a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800249c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 80024a2:	2320      	movs	r3, #32
 80024a4:	e003      	b.n	80024ae <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 80024a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024a8:	fab3 f383 	clz	r3, r3
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	3301      	adds	r3, #1
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	2b09      	cmp	r3, #9
 80024b6:	bf94      	ite	ls
 80024b8:	2301      	movls	r3, #1
 80024ba:	2300      	movhi	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d079      	beq.n	80025b6 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d107      	bne.n	80024de <HAL_ADC_ConfigChannel+0x4a2>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	0e9b      	lsrs	r3, r3, #26
 80024d4:	3301      	adds	r3, #1
 80024d6:	069b      	lsls	r3, r3, #26
 80024d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024dc:	e015      	b.n	800250a <HAL_ADC_ConfigChannel+0x4ce>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80024f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80024f6:	2320      	movs	r3, #32
 80024f8:	e003      	b.n	8002502 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80024fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024fc:	fab3 f383 	clz	r3, r3
 8002500:	b2db      	uxtb	r3, r3
 8002502:	3301      	adds	r3, #1
 8002504:	069b      	lsls	r3, r3, #26
 8002506:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <HAL_ADC_ConfigChannel+0x4ee>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	0e9b      	lsrs	r3, r3, #26
 800251c:	3301      	adds	r3, #1
 800251e:	f003 031f 	and.w	r3, r3, #31
 8002522:	2101      	movs	r1, #1
 8002524:	fa01 f303 	lsl.w	r3, r1, r3
 8002528:	e017      	b.n	800255a <HAL_ADC_ConfigChannel+0x51e>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800253a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800253c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8002542:	2320      	movs	r3, #32
 8002544:	e003      	b.n	800254e <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8002546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	3301      	adds	r3, #1
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	2101      	movs	r1, #1
 8002556:	fa01 f303 	lsl.w	r3, r1, r3
 800255a:	ea42 0103 	orr.w	r1, r2, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10a      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x544>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	0e9b      	lsrs	r3, r3, #26
 8002570:	3301      	adds	r3, #1
 8002572:	f003 021f 	and.w	r2, r3, #31
 8002576:	4613      	mov	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	4413      	add	r3, r2
 800257c:	051b      	lsls	r3, r3, #20
 800257e:	e018      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x576>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800258e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002590:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002598:	2320      	movs	r3, #32
 800259a:	e003      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800259c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	f003 021f 	and.w	r2, r3, #31
 80025aa:	4613      	mov	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4413      	add	r3, r2
 80025b0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b2:	430b      	orrs	r3, r1
 80025b4:	e081      	b.n	80026ba <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d107      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x596>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	0e9b      	lsrs	r3, r3, #26
 80025c8:	3301      	adds	r3, #1
 80025ca:	069b      	lsls	r3, r3, #26
 80025cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025d0:	e015      	b.n	80025fe <HAL_ADC_ConfigChannel+0x5c2>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80025e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80025e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80025ea:	2320      	movs	r3, #32
 80025ec:	e003      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	3301      	adds	r3, #1
 80025f8:	069b      	lsls	r3, r3, #26
 80025fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_ADC_ConfigChannel+0x5e2>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	0e9b      	lsrs	r3, r3, #26
 8002610:	3301      	adds	r3, #1
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	2101      	movs	r1, #1
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	e017      	b.n	800264e <HAL_ADC_ConfigChannel+0x612>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	61fb      	str	r3, [r7, #28]
  return result;
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002636:	2320      	movs	r3, #32
 8002638:	e003      	b.n	8002642 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	3301      	adds	r3, #1
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	2101      	movs	r1, #1
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	ea42 0103 	orr.w	r1, r2, r3
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10d      	bne.n	800267a <HAL_ADC_ConfigChannel+0x63e>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	0e9b      	lsrs	r3, r3, #26
 8002664:	3301      	adds	r3, #1
 8002666:	f003 021f 	and.w	r2, r3, #31
 800266a:	4613      	mov	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	3b1e      	subs	r3, #30
 8002672:	051b      	lsls	r3, r3, #20
 8002674:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002678:	e01e      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x67c>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa93 f3a3 	rbit	r3, r3
 8002686:	613b      	str	r3, [r7, #16]
  return result;
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d104      	bne.n	800269c <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002692:	2320      	movs	r3, #32
 8002694:	e006      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x668>
 8002696:	bf00      	nop
 8002698:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	3301      	adds	r3, #1
 80026a6:	f003 021f 	and.w	r2, r3, #31
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	3b1e      	subs	r3, #30
 80026b2:	051b      	lsls	r3, r3, #20
 80026b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026b8:	430b      	orrs	r3, r1
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	6892      	ldr	r2, [r2, #8]
 80026be:	4619      	mov	r1, r3
 80026c0:	f7ff fa92 	bl	8001be8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b48      	ldr	r3, [pc, #288]	; (80027ec <HAL_ADC_ConfigChannel+0x7b0>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8082 	beq.w	80027d6 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026d2:	4847      	ldr	r0, [pc, #284]	; (80027f0 <HAL_ADC_ConfigChannel+0x7b4>)
 80026d4:	f7ff f9e6 	bl	8001aa4 <LL_ADC_GetCommonPathInternalCh>
 80026d8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026dc:	4845      	ldr	r0, [pc, #276]	; (80027f4 <HAL_ADC_ConfigChannel+0x7b8>)
 80026de:	f7ff fb21 	bl	8001d24 <LL_ADC_IsEnabled>
 80026e2:	4604      	mov	r4, r0
 80026e4:	4844      	ldr	r0, [pc, #272]	; (80027f8 <HAL_ADC_ConfigChannel+0x7bc>)
 80026e6:	f7ff fb1d 	bl	8001d24 <LL_ADC_IsEnabled>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4323      	orrs	r3, r4
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d15e      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a41      	ldr	r2, [pc, #260]	; (80027fc <HAL_ADC_ConfigChannel+0x7c0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d127      	bne.n	800274c <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002700:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d121      	bne.n	800274c <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a39      	ldr	r2, [pc, #228]	; (80027f4 <HAL_ADC_ConfigChannel+0x7b8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d161      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002712:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002716:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800271a:	4619      	mov	r1, r3
 800271c:	4834      	ldr	r0, [pc, #208]	; (80027f0 <HAL_ADC_ConfigChannel+0x7b4>)
 800271e:	f7ff f9ae 	bl	8001a7e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002722:	4b37      	ldr	r3, [pc, #220]	; (8002800 <HAL_ADC_ConfigChannel+0x7c4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	099b      	lsrs	r3, r3, #6
 8002728:	4a36      	ldr	r2, [pc, #216]	; (8002804 <HAL_ADC_ConfigChannel+0x7c8>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	099b      	lsrs	r3, r3, #6
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	4613      	mov	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800273c:	e002      	b.n	8002744 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3b01      	subs	r3, #1
 8002742:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f9      	bne.n	800273e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800274a:	e044      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2d      	ldr	r2, [pc, #180]	; (8002808 <HAL_ADC_ConfigChannel+0x7cc>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d113      	bne.n	800277e <HAL_ADC_ConfigChannel+0x742>
 8002756:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800275a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10d      	bne.n	800277e <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a23      	ldr	r2, [pc, #140]	; (80027f4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d134      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800276c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002770:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002774:	4619      	mov	r1, r3
 8002776:	481e      	ldr	r0, [pc, #120]	; (80027f0 <HAL_ADC_ConfigChannel+0x7b4>)
 8002778:	f7ff f981 	bl	8001a7e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800277c:	e02b      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x79a>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a22      	ldr	r2, [pc, #136]	; (800280c <HAL_ADC_ConfigChannel+0x7d0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d126      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x79a>
 8002788:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800278c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d120      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a16      	ldr	r2, [pc, #88]	; (80027f4 <HAL_ADC_ConfigChannel+0x7b8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d11b      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800279e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027a6:	4619      	mov	r1, r3
 80027a8:	4811      	ldr	r0, [pc, #68]	; (80027f0 <HAL_ADC_ConfigChannel+0x7b4>)
 80027aa:	f7ff f968 	bl	8001a7e <LL_ADC_SetCommonPathInternalCh>
 80027ae:	e012      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b4:	f043 0220 	orr.w	r2, r3, #32
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80027c2:	e008      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	f043 0220 	orr.w	r2, r3, #32
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80027de:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	37dc      	adds	r7, #220	; 0xdc
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd90      	pop	{r4, r7, pc}
 80027ea:	bf00      	nop
 80027ec:	80080000 	.word	0x80080000
 80027f0:	42028300 	.word	0x42028300
 80027f4:	42028000 	.word	0x42028000
 80027f8:	42028100 	.word	0x42028100
 80027fc:	c7520000 	.word	0xc7520000
 8002800:	20000004 	.word	0x20000004
 8002804:	053e2d63 	.word	0x053e2d63
 8002808:	cb840000 	.word	0xcb840000
 800280c:	80000001 	.word	0x80000001

08002810 <LL_ADC_IsEnabled>:
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <LL_ADC_IsEnabled+0x18>
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <LL_ADC_IsEnabled+0x1a>
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <LL_ADC_REG_IsConversionOngoing>:
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b04      	cmp	r3, #4
 8002848:	d101      	bne.n	800284e <LL_ADC_REG_IsConversionOngoing+0x18>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800285c:	b590      	push	{r4, r7, lr}
 800285e:	b0a1      	sub	sp, #132	; 0x84
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002876:	2302      	movs	r3, #2
 8002878:	e089      	b.n	800298e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002882:	2300      	movs	r3, #0
 8002884:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002886:	2300      	movs	r3, #0
 8002888:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a42      	ldr	r2, [pc, #264]	; (8002998 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d102      	bne.n	800289a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002894:	4b41      	ldr	r3, [pc, #260]	; (800299c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	e001      	b.n	800289e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10b      	bne.n	80028bc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e068      	b.n	800298e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff ffb9 	bl	8002836 <LL_ADC_REG_IsConversionOngoing>
 80028c4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff ffb3 	bl	8002836 <LL_ADC_REG_IsConversionOngoing>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d14a      	bne.n	800296c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80028d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d147      	bne.n	800296c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028dc:	4b30      	ldr	r3, [pc, #192]	; (80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80028de:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d027      	beq.n	8002938 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80028e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028fa:	035b      	lsls	r3, r3, #13
 80028fc:	430b      	orrs	r3, r1
 80028fe:	431a      	orrs	r2, r3
 8002900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002902:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002904:	4824      	ldr	r0, [pc, #144]	; (8002998 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002906:	f7ff ff83 	bl	8002810 <LL_ADC_IsEnabled>
 800290a:	4604      	mov	r4, r0
 800290c:	4823      	ldr	r0, [pc, #140]	; (800299c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800290e:	f7ff ff7f 	bl	8002810 <LL_ADC_IsEnabled>
 8002912:	4603      	mov	r3, r0
 8002914:	4323      	orrs	r3, r4
 8002916:	2b00      	cmp	r3, #0
 8002918:	d132      	bne.n	8002980 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800291a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002922:	f023 030f 	bic.w	r3, r3, #15
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	6811      	ldr	r1, [r2, #0]
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	6892      	ldr	r2, [r2, #8]
 800292e:	430a      	orrs	r2, r1
 8002930:	431a      	orrs	r2, r3
 8002932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002934:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002936:	e023      	b.n	8002980 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002942:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002944:	4814      	ldr	r0, [pc, #80]	; (8002998 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002946:	f7ff ff63 	bl	8002810 <LL_ADC_IsEnabled>
 800294a:	4604      	mov	r4, r0
 800294c:	4813      	ldr	r0, [pc, #76]	; (800299c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800294e:	f7ff ff5f 	bl	8002810 <LL_ADC_IsEnabled>
 8002952:	4603      	mov	r3, r0
 8002954:	4323      	orrs	r3, r4
 8002956:	2b00      	cmp	r3, #0
 8002958:	d112      	bne.n	8002980 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800295a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002962:	f023 030f 	bic.w	r3, r3, #15
 8002966:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002968:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800296a:	e009      	b.n	8002980 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002970:	f043 0220 	orr.w	r2, r3, #32
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800297e:	e000      	b.n	8002982 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002980:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800298a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800298e:	4618      	mov	r0, r3
 8002990:	3784      	adds	r7, #132	; 0x84
 8002992:	46bd      	mov	sp, r7
 8002994:	bd90      	pop	{r4, r7, pc}
 8002996:	bf00      	nop
 8002998:	42028000 	.word	0x42028000
 800299c:	42028100 	.word	0x42028100
 80029a0:	42028300 	.word	0x42028300

080029a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <__NVIC_SetPriorityGrouping+0x44>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029c0:	4013      	ands	r3, r2
 80029c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029d6:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <__NVIC_SetPriorityGrouping+0x44>)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	60d3      	str	r3, [r2, #12]
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <__NVIC_GetPriorityGrouping+0x18>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	0a1b      	lsrs	r3, r3, #8
 80029f6:	f003 0307 	and.w	r3, r3, #7
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	db0b      	blt.n	8002a32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	f003 021f 	and.w	r2, r3, #31
 8002a20:	4907      	ldr	r1, [pc, #28]	; (8002a40 <__NVIC_EnableIRQ+0x38>)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	2001      	movs	r0, #1
 8002a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	e000e100 	.word	0xe000e100

08002a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	6039      	str	r1, [r7, #0]
 8002a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	db0a      	blt.n	8002a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	490c      	ldr	r1, [pc, #48]	; (8002a90 <__NVIC_SetPriority+0x4c>)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	0152      	lsls	r2, r2, #5
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	440b      	add	r3, r1
 8002a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a6c:	e00a      	b.n	8002a84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	4908      	ldr	r1, [pc, #32]	; (8002a94 <__NVIC_SetPriority+0x50>)
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	3b04      	subs	r3, #4
 8002a7c:	0152      	lsls	r2, r2, #5
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	440b      	add	r3, r1
 8002a82:	761a      	strb	r2, [r3, #24]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000e100 	.word	0xe000e100
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f1c3 0307 	rsb	r3, r3, #7
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	bf28      	it	cs
 8002ab6:	2303      	movcs	r3, #3
 8002ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3303      	adds	r3, #3
 8002abe:	2b06      	cmp	r3, #6
 8002ac0:	d902      	bls.n	8002ac8 <NVIC_EncodePriority+0x30>
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3b04      	subs	r3, #4
 8002ac6:	e000      	b.n	8002aca <NVIC_EncodePriority+0x32>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	401a      	ands	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	43d9      	mvns	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af0:	4313      	orrs	r3, r2
         );
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3724      	adds	r7, #36	; 0x24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff ff4c 	bl	80029a4 <__NVIC_SetPriorityGrouping>
}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b22:	f7ff ff63 	bl	80029ec <__NVIC_GetPriorityGrouping>
 8002b26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	6978      	ldr	r0, [r7, #20]
 8002b2e:	f7ff ffb3 	bl	8002a98 <NVIC_EncodePriority>
 8002b32:	4602      	mov	r2, r0
 8002b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff ff82 	bl	8002a44 <__NVIC_SetPriority>
}
 8002b40:	bf00      	nop
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff ff56 	bl	8002a08 <__NVIC_EnableIRQ>
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e142      	b.n	8002dfc <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fe fc26 	bl	80013dc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0210 	bic.w	r2, r2, #16
 8002b9e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ba0:	f7fe ff4e 	bl	8001a40 <HAL_GetTick>
 8002ba4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002ba6:	e012      	b.n	8002bce <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002ba8:	f7fe ff4a 	bl	8001a40 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b0a      	cmp	r3, #10
 8002bb4:	d90b      	bls.n	8002bce <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bba:	f043 0201 	orr.w	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e116      	b.n	8002dfc <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d0e5      	beq.n	8002ba8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699a      	ldr	r2, [r3, #24]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bec:	f7fe ff28 	bl	8001a40 <HAL_GetTick>
 8002bf0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002bf2:	e012      	b.n	8002c1a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002bf4:	f7fe ff24 	bl	8001a40 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b0a      	cmp	r3, #10
 8002c00:	d90b      	bls.n	8002c1a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c06:	f043 0201 	orr.w	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2203      	movs	r2, #3
 8002c12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e0f0      	b.n	8002dfc <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0e5      	beq.n	8002bf4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0202 	orr.w	r2, r2, #2
 8002c36:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002c38:	4a72      	ldr	r2, [pc, #456]	; (8002e04 <HAL_FDCAN_Init+0x2a0>)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7c1b      	ldrb	r3, [r3, #16]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d108      	bne.n	8002c5a <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c56:	619a      	str	r2, [r3, #24]
 8002c58:	e007      	b.n	8002c6a <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c68:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	7c5b      	ldrb	r3, [r3, #17]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d108      	bne.n	8002c84 <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	699a      	ldr	r2, [r3, #24]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c80:	619a      	str	r2, [r3, #24]
 8002c82:	e007      	b.n	8002c94 <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c92:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	7c9b      	ldrb	r3, [r3, #18]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d108      	bne.n	8002cae <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002caa:	619a      	str	r2, [r3, #24]
 8002cac:	e007      	b.n	8002cbe <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	699a      	ldr	r2, [r3, #24]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cbc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002ce2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0210 	bic.w	r2, r2, #16
 8002cf2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d108      	bne.n	8002d0e <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0204 	orr.w	r2, r2, #4
 8002d0a:	619a      	str	r2, [r3, #24]
 8002d0c:	e02c      	b.n	8002d68 <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d028      	beq.n	8002d68 <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d01c      	beq.n	8002d58 <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699a      	ldr	r2, [r3, #24]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d2c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0210 	orr.w	r2, r2, #16
 8002d3c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d110      	bne.n	8002d68 <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	699a      	ldr	r2, [r3, #24]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0220 	orr.w	r2, r2, #32
 8002d54:	619a      	str	r2, [r3, #24]
 8002d56:	e007      	b.n	8002d68 <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0220 	orr.w	r2, r2, #32
 8002d66:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	3b01      	subs	r3, #1
 8002d76:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d78:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002d80:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002d90:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d92:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d9c:	d115      	bne.n	8002dca <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	3b01      	subs	r3, #1
 8002daa:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002dac:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	3b01      	subs	r3, #1
 8002db4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002db6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002dc6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002dc8:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f811 	bl	8002e08 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	4000a500 	.word	0x4000a500

08002e08 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002e10:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002e12:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e22:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2a:	041a      	lsls	r2, r3, #16
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e48:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e50:	061a      	lsls	r2, r3, #24
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	e005      	b.n	8002e96 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3304      	adds	r3, #4
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d3f3      	bcc.n	8002e8a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	4000ac00 	.word	0x4000ac00

08002eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ec2:	e158      	b.n	8003176 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	2101      	movs	r1, #1
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 814a 	beq.w	8003170 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d00b      	beq.n	8002efc <HAL_GPIO_Init+0x48>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d007      	beq.n	8002efc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ef0:	2b11      	cmp	r3, #17
 8002ef2:	d003      	beq.n	8002efc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b12      	cmp	r3, #18
 8002efa:	d130      	bne.n	8002f5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	2203      	movs	r2, #3
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4013      	ands	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f32:	2201      	movs	r2, #1
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	091b      	lsrs	r3, r3, #4
 8002f48:	f003 0201 	and.w	r2, r3, #1
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	2203      	movs	r2, #3
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4013      	ands	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_Init+0xea>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b12      	cmp	r3, #18
 8002f9c:	d123      	bne.n	8002fe6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	08da      	lsrs	r2, r3, #3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3208      	adds	r2, #8
 8002fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002faa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	220f      	movs	r2, #15
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	691a      	ldr	r2, [r3, #16]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	08da      	lsrs	r2, r3, #3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3208      	adds	r2, #8
 8002fe0:	6939      	ldr	r1, [r7, #16]
 8002fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 0203 	and.w	r2, r3, #3
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 80a4 	beq.w	8003170 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003028:	4a5a      	ldr	r2, [pc, #360]	; (8003194 <HAL_GPIO_Init+0x2e0>)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	089b      	lsrs	r3, r3, #2
 800302e:	3318      	adds	r3, #24
 8003030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003034:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	220f      	movs	r2, #15
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4013      	ands	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a52      	ldr	r2, [pc, #328]	; (8003198 <HAL_GPIO_Init+0x2e4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d025      	beq.n	80030a0 <HAL_GPIO_Init+0x1ec>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a51      	ldr	r2, [pc, #324]	; (800319c <HAL_GPIO_Init+0x2e8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d01f      	beq.n	800309c <HAL_GPIO_Init+0x1e8>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a50      	ldr	r2, [pc, #320]	; (80031a0 <HAL_GPIO_Init+0x2ec>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d019      	beq.n	8003098 <HAL_GPIO_Init+0x1e4>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a4f      	ldr	r2, [pc, #316]	; (80031a4 <HAL_GPIO_Init+0x2f0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d013      	beq.n	8003094 <HAL_GPIO_Init+0x1e0>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a4e      	ldr	r2, [pc, #312]	; (80031a8 <HAL_GPIO_Init+0x2f4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00d      	beq.n	8003090 <HAL_GPIO_Init+0x1dc>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a4d      	ldr	r2, [pc, #308]	; (80031ac <HAL_GPIO_Init+0x2f8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d007      	beq.n	800308c <HAL_GPIO_Init+0x1d8>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a4c      	ldr	r2, [pc, #304]	; (80031b0 <HAL_GPIO_Init+0x2fc>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d101      	bne.n	8003088 <HAL_GPIO_Init+0x1d4>
 8003084:	2306      	movs	r3, #6
 8003086:	e00c      	b.n	80030a2 <HAL_GPIO_Init+0x1ee>
 8003088:	2307      	movs	r3, #7
 800308a:	e00a      	b.n	80030a2 <HAL_GPIO_Init+0x1ee>
 800308c:	2305      	movs	r3, #5
 800308e:	e008      	b.n	80030a2 <HAL_GPIO_Init+0x1ee>
 8003090:	2304      	movs	r3, #4
 8003092:	e006      	b.n	80030a2 <HAL_GPIO_Init+0x1ee>
 8003094:	2303      	movs	r3, #3
 8003096:	e004      	b.n	80030a2 <HAL_GPIO_Init+0x1ee>
 8003098:	2302      	movs	r3, #2
 800309a:	e002      	b.n	80030a2 <HAL_GPIO_Init+0x1ee>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <HAL_GPIO_Init+0x1ee>
 80030a0:	2300      	movs	r3, #0
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	f002 0203 	and.w	r2, r2, #3
 80030a8:	00d2      	lsls	r2, r2, #3
 80030aa:	4093      	lsls	r3, r2
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80030b2:	4938      	ldr	r1, [pc, #224]	; (8003194 <HAL_GPIO_Init+0x2e0>)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	089b      	lsrs	r3, r3, #2
 80030b8:	3318      	adds	r3, #24
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030c0:	4b34      	ldr	r3, [pc, #208]	; (8003194 <HAL_GPIO_Init+0x2e0>)
 80030c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	43db      	mvns	r3, r3
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4013      	ands	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030e6:	4a2b      	ldr	r2, [pc, #172]	; (8003194 <HAL_GPIO_Init+0x2e0>)
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80030ee:	4b29      	ldr	r3, [pc, #164]	; (8003194 <HAL_GPIO_Init+0x2e0>)
 80030f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4013      	ands	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003114:	4a1f      	ldr	r2, [pc, #124]	; (8003194 <HAL_GPIO_Init+0x2e0>)
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800311c:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <HAL_GPIO_Init+0x2e0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	43db      	mvns	r3, r3
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4013      	ands	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003140:	4a14      	ldr	r2, [pc, #80]	; (8003194 <HAL_GPIO_Init+0x2e0>)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003146:	4b13      	ldr	r3, [pc, #76]	; (8003194 <HAL_GPIO_Init+0x2e0>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	43db      	mvns	r3, r3
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4013      	ands	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800316a:	4a0a      	ldr	r2, [pc, #40]	; (8003194 <HAL_GPIO_Init+0x2e0>)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	3301      	adds	r3, #1
 8003174:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	fa22 f303 	lsr.w	r3, r2, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	f47f ae9f 	bne.w	8002ec4 <HAL_GPIO_Init+0x10>
  }
}
 8003186:	bf00      	nop
 8003188:	bf00      	nop
 800318a:	371c      	adds	r7, #28
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	4002f400 	.word	0x4002f400
 8003198:	42020000 	.word	0x42020000
 800319c:	42020400 	.word	0x42020400
 80031a0:	42020800 	.word	0x42020800
 80031a4:	42020c00 	.word	0x42020c00
 80031a8:	42021000 	.word	0x42021000
 80031ac:	42021400 	.word	0x42021400
 80031b0:	42021800 	.word	0x42021800

080031b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	807b      	strh	r3, [r7, #2]
 80031c0:	4613      	mov	r3, r2
 80031c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031c4:	787b      	ldrb	r3, [r7, #1]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031ca:	887a      	ldrh	r2, [r7, #2]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031d0:	e002      	b.n	80031d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031d2:	887a      	ldrh	r2, [r7, #2]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
 8003200:	e007      	b.n	8003212 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003202:	4b07      	ldr	r3, [pc, #28]	; (8003220 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 0204 	bic.w	r2, r3, #4
 800320a:	4905      	ldr	r1, [pc, #20]	; (8003220 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003212:	7bfb      	ldrb	r3, [r7, #15]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	40030400 	.word	0x40030400

08003224 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_ICACHE_Enable+0x1c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a04      	ldr	r2, [pc, #16]	; (8003240 <HAL_ICACHE_Enable+0x1c>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	40030400 	.word	0x40030400

08003244 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003246:	b08b      	sub	sp, #44	; 0x2c
 8003248:	af06      	add	r7, sp, #24
 800324a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0d7      	b.n	8003406 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d106      	bne.n	8003270 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fe f9fa 	bl	8001664 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2203      	movs	r2, #3
 8003274:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f003 fb8f 	bl	80069a0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003282:	2300      	movs	r3, #0
 8003284:	73fb      	strb	r3, [r7, #15]
 8003286:	e04c      	b.n	8003322 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	440b      	add	r3, r1
 8003298:	3301      	adds	r3, #1
 800329a:	2201      	movs	r2, #1
 800329c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	440b      	add	r3, r1
 80032ae:	7bfa      	ldrb	r2, [r7, #15]
 80032b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032b2:	7bfa      	ldrb	r2, [r7, #15]
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	b298      	uxth	r0, r3
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	440b      	add	r3, r1
 80032c4:	3336      	adds	r3, #54	; 0x36
 80032c6:	4602      	mov	r2, r0
 80032c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	440b      	add	r3, r1
 80032da:	3303      	adds	r3, #3
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032e0:	7bfa      	ldrb	r2, [r7, #15]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	440b      	add	r3, r1
 80032ee:	3338      	adds	r3, #56	; 0x38
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032f4:	7bfa      	ldrb	r2, [r7, #15]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	440b      	add	r3, r1
 8003302:	333c      	adds	r3, #60	; 0x3c
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003308:	7bfa      	ldrb	r2, [r7, #15]
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	440b      	add	r3, r1
 8003316:	3340      	adds	r3, #64	; 0x40
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	3301      	adds	r3, #1
 8003320:	73fb      	strb	r3, [r7, #15]
 8003322:	7bfa      	ldrb	r2, [r7, #15]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	429a      	cmp	r2, r3
 800332a:	d3ad      	bcc.n	8003288 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
 8003330:	e044      	b.n	80033bc <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003332:	7bfa      	ldrb	r2, [r7, #15]
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	440b      	add	r3, r1
 8003340:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003348:	7bfa      	ldrb	r2, [r7, #15]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	440b      	add	r3, r1
 8003356:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800335a:	7bfa      	ldrb	r2, [r7, #15]
 800335c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800335e:	7bfa      	ldrb	r2, [r7, #15]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	440b      	add	r3, r1
 800336c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003374:	7bfa      	ldrb	r2, [r7, #15]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	440b      	add	r3, r1
 8003382:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800338a:	7bfa      	ldrb	r2, [r7, #15]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	440b      	add	r3, r1
 8003398:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033a0:	7bfa      	ldrb	r2, [r7, #15]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	440b      	add	r3, r1
 80033ae:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	3301      	adds	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
 80033bc:	7bfa      	ldrb	r2, [r7, #15]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d3b5      	bcc.n	8003332 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	687e      	ldr	r6, [r7, #4]
 80033ce:	466d      	mov	r5, sp
 80033d0:	f106 0410 	add.w	r4, r6, #16
 80033d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	602b      	str	r3, [r5, #0]
 80033dc:	1d33      	adds	r3, r6, #4
 80033de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033e0:	6838      	ldr	r0, [r7, #0]
 80033e2:	f003 faf8 	bl	80069d6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d102      	bne.n	8003404 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f805 	bl	800340e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800340e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800340e:	b480      	push	{r7}
 8003410:	b085      	sub	sp, #20
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003432:	b29b      	uxth	r3, r3
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003446:	b29b      	uxth	r3, r3
 8003448:	f043 0302 	orr.w	r3, r3, #2
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a04      	ldr	r2, [pc, #16]	; (8003480 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800346e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003472:	6013      	str	r3, [r2, #0]
}
 8003474:	bf00      	nop
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40007000 	.word	0x40007000

08003484 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003488:	4b04      	ldr	r3, [pc, #16]	; (800349c <HAL_PWREx_GetVoltageRange+0x18>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40007000 	.word	0x40007000

080034a0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80034a8:	4b27      	ldr	r3, [pc, #156]	; (8003548 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034b0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80034b2:	f000 f861 	bl	8003578 <HAL_PWREx_SMPS_GetEffectiveMode>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034bc:	d101      	bne.n	80034c2 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e03e      	b.n	8003540 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80034c2:	4b21      	ldr	r3, [pc, #132]	; (8003548 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ce:	d101      	bne.n	80034d4 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e035      	b.n	8003540 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d101      	bne.n	80034e0 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	e02f      	b.n	8003540 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80034e0:	4b19      	ldr	r3, [pc, #100]	; (8003548 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80034e8:	4917      	ldr	r1, [pc, #92]	; (8003548 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80034f0:	4b16      	ldr	r3, [pc, #88]	; (800354c <HAL_PWREx_ControlVoltageScaling+0xac>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	095b      	lsrs	r3, r3, #5
 80034f6:	4a16      	ldr	r2, [pc, #88]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80034f8:	fba2 2303 	umull	r2, r3, r2, r3
 80034fc:	09db      	lsrs	r3, r3, #7
 80034fe:	2232      	movs	r2, #50	; 0x32
 8003500:	fb02 f303 	mul.w	r3, r2, r3
 8003504:	4a13      	ldr	r2, [pc, #76]	; (8003554 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	08db      	lsrs	r3, r3, #3
 800350c:	3301      	adds	r3, #1
 800350e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003510:	e002      	b.n	8003518 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	3b01      	subs	r3, #1
 8003516:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003518:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003524:	d102      	bne.n	800352c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f2      	bne.n	8003512 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800352c:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003538:	d101      	bne.n	800353e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e000      	b.n	8003540 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40007000 	.word	0x40007000
 800354c:	20000004 	.word	0x20000004
 8003550:	0a7c5ac5 	.word	0x0a7c5ac5
 8003554:	cccccccd 	.word	0xcccccccd

08003558 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <HAL_PWREx_EnableVddIO2+0x1c>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	4a04      	ldr	r2, [pc, #16]	; (8003574 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003566:	6053      	str	r3, [r2, #4]
}
 8003568:	bf00      	nop
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40007000 	.word	0x40007000

08003578 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800357e:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800358e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003592:	607b      	str	r3, [r7, #4]
 8003594:	e00a      	b.n	80035ac <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d103      	bne.n	80035a8 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80035a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	e001      	b.n	80035ac <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80035a8:	2300      	movs	r3, #0
 80035aa:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80035ac:	687b      	ldr	r3, [r7, #4]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40007000 	.word	0x40007000

080035c0 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d102      	bne.n	80035d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	f000 bcd0 	b.w	8003f74 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035d4:	4b99      	ldr	r3, [pc, #612]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 030c 	and.w	r3, r3, #12
 80035dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035de:	4b97      	ldr	r3, [pc, #604]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80e9 	beq.w	80037c8 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d006      	beq.n	800360a <HAL_RCC_OscConfig+0x4a>
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b0c      	cmp	r3, #12
 8003600:	f040 8083 	bne.w	800370a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d17f      	bne.n	800370a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800360a:	4b8c      	ldr	r3, [pc, #560]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d006      	beq.n	8003624 <HAL_RCC_OscConfig+0x64>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d102      	bne.n	8003624 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	f000 bca8 	b.w	8003f74 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003628:	4b84      	ldr	r3, [pc, #528]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b00      	cmp	r3, #0
 8003632:	d004      	beq.n	800363e <HAL_RCC_OscConfig+0x7e>
 8003634:	4b81      	ldr	r3, [pc, #516]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800363c:	e005      	b.n	800364a <HAL_RCC_OscConfig+0x8a>
 800363e:	4b7f      	ldr	r3, [pc, #508]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 8003640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003644:	091b      	lsrs	r3, r3, #4
 8003646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800364a:	4293      	cmp	r3, r2
 800364c:	d224      	bcs.n	8003698 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	4618      	mov	r0, r3
 8003654:	f000 feca 	bl	80043ec <RCC_SetFlashLatencyFromMSIRange>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	f000 bc88 	b.w	8003f74 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003664:	4b75      	ldr	r3, [pc, #468]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a74      	ldr	r2, [pc, #464]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 800366a:	f043 0308 	orr.w	r3, r3, #8
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	4b72      	ldr	r3, [pc, #456]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	496f      	ldr	r1, [pc, #444]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003682:	4b6e      	ldr	r3, [pc, #440]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	021b      	lsls	r3, r3, #8
 8003690:	496a      	ldr	r1, [pc, #424]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 8003692:	4313      	orrs	r3, r2
 8003694:	604b      	str	r3, [r1, #4]
 8003696:	e026      	b.n	80036e6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003698:	4b68      	ldr	r3, [pc, #416]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a67      	ldr	r2, [pc, #412]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 800369e:	f043 0308 	orr.w	r3, r3, #8
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	4b65      	ldr	r3, [pc, #404]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	4962      	ldr	r1, [pc, #392]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036b6:	4b61      	ldr	r3, [pc, #388]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	021b      	lsls	r3, r3, #8
 80036c4:	495d      	ldr	r1, [pc, #372]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fe89 	bl	80043ec <RCC_SetFlashLatencyFromMSIRange>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	f000 bc47 	b.w	8003f74 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80036e6:	f000 fe13 	bl	8004310 <HAL_RCC_GetHCLKFreq>
 80036ea:	4603      	mov	r3, r0
 80036ec:	4a54      	ldr	r2, [pc, #336]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80036ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036f0:	4b54      	ldr	r3, [pc, #336]	; (8003844 <HAL_RCC_OscConfig+0x284>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fe f815 	bl	8001724 <HAL_InitTick>
 80036fa:	4603      	mov	r3, r0
 80036fc:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d060      	beq.n	80037c6 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	f000 bc35 	b.w	8003f74 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d039      	beq.n	8003786 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003712:	4b4a      	ldr	r3, [pc, #296]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a49      	ldr	r2, [pc, #292]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800371e:	f7fe f98f 	bl	8001a40 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003724:	e00f      	b.n	8003746 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003726:	f7fe f98b 	bl	8001a40 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d908      	bls.n	8003746 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003734:	4b41      	ldr	r3, [pc, #260]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d102      	bne.n	8003746 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	f000 bc17 	b.w	8003f74 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003746:	4b3d      	ldr	r3, [pc, #244]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0e9      	beq.n	8003726 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003752:	4b3a      	ldr	r3, [pc, #232]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a39      	ldr	r2, [pc, #228]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 8003758:	f043 0308 	orr.w	r3, r3, #8
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	4b37      	ldr	r3, [pc, #220]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	4934      	ldr	r1, [pc, #208]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 800376c:	4313      	orrs	r3, r2
 800376e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003770:	4b32      	ldr	r3, [pc, #200]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	021b      	lsls	r3, r3, #8
 800377e:	492f      	ldr	r1, [pc, #188]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 8003780:	4313      	orrs	r3, r2
 8003782:	604b      	str	r3, [r1, #4]
 8003784:	e020      	b.n	80037c8 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003786:	4b2d      	ldr	r3, [pc, #180]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a2c      	ldr	r2, [pc, #176]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 800378c:	f023 0301 	bic.w	r3, r3, #1
 8003790:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003792:	f7fe f955 	bl	8001a40 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003798:	e00e      	b.n	80037b8 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800379a:	f7fe f951 	bl	8001a40 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d907      	bls.n	80037b8 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037a8:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e3dd      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037b8:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1ea      	bne.n	800379a <HAL_RCC_OscConfig+0x1da>
 80037c4:	e000      	b.n	80037c8 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d07e      	beq.n	80038d2 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d005      	beq.n	80037e6 <HAL_RCC_OscConfig+0x226>
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	2b0c      	cmp	r3, #12
 80037de:	d10e      	bne.n	80037fe <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d10b      	bne.n	80037fe <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e6:	4b15      	ldr	r3, [pc, #84]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d06e      	beq.n	80038d0 <HAL_RCC_OscConfig+0x310>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d16a      	bne.n	80038d0 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e3ba      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003806:	d106      	bne.n	8003816 <HAL_RCC_OscConfig+0x256>
 8003808:	4b0c      	ldr	r3, [pc, #48]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a0b      	ldr	r2, [pc, #44]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 800380e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	e024      	b.n	8003860 <HAL_RCC_OscConfig+0x2a0>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800381e:	d113      	bne.n	8003848 <HAL_RCC_OscConfig+0x288>
 8003820:	4b06      	ldr	r3, [pc, #24]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a05      	ldr	r2, [pc, #20]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 8003826:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	4b03      	ldr	r3, [pc, #12]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a02      	ldr	r2, [pc, #8]	; (800383c <HAL_RCC_OscConfig+0x27c>)
 8003832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	e012      	b.n	8003860 <HAL_RCC_OscConfig+0x2a0>
 800383a:	bf00      	nop
 800383c:	40021000 	.word	0x40021000
 8003840:	20000004 	.word	0x20000004
 8003844:	20000008 	.word	0x20000008
 8003848:	4b8b      	ldr	r3, [pc, #556]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a8a      	ldr	r2, [pc, #552]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 800384e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	4b88      	ldr	r3, [pc, #544]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a87      	ldr	r2, [pc, #540]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 800385a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800385e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d019      	beq.n	800389c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7fe f8ea 	bl	8001a40 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800386e:	e00e      	b.n	800388e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003870:	f7fe f8e6 	bl	8001a40 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	; 0x64
 800387c:	d907      	bls.n	800388e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800387e:	4b7e      	ldr	r3, [pc, #504]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e372      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800388e:	4b7a      	ldr	r3, [pc, #488]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0ea      	beq.n	8003870 <HAL_RCC_OscConfig+0x2b0>
 800389a:	e01a      	b.n	80038d2 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fe f8d0 	bl	8001a40 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038a2:	e00e      	b.n	80038c2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a4:	f7fe f8cc 	bl	8001a40 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b64      	cmp	r3, #100	; 0x64
 80038b0:	d907      	bls.n	80038c2 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038b2:	4b71      	ldr	r3, [pc, #452]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e358      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038c2:	4b6d      	ldr	r3, [pc, #436]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1ea      	bne.n	80038a4 <HAL_RCC_OscConfig+0x2e4>
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d06c      	beq.n	80039b8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d005      	beq.n	80038f0 <HAL_RCC_OscConfig+0x330>
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	2b0c      	cmp	r3, #12
 80038e8:	d119      	bne.n	800391e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d116      	bne.n	800391e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038f0:	4b61      	ldr	r3, [pc, #388]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_RCC_OscConfig+0x348>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e335      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003908:	4b5b      	ldr	r3, [pc, #364]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	061b      	lsls	r3, r3, #24
 8003916:	4958      	ldr	r1, [pc, #352]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 8003918:	4313      	orrs	r3, r2
 800391a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800391c:	e04c      	b.n	80039b8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d029      	beq.n	800397a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003926:	4b54      	ldr	r3, [pc, #336]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a53      	ldr	r2, [pc, #332]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 800392c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003932:	f7fe f885 	bl	8001a40 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003938:	e00e      	b.n	8003958 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393a:	f7fe f881 	bl	8001a40 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d907      	bls.n	8003958 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003948:	4b4b      	ldr	r3, [pc, #300]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e30d      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003958:	4b47      	ldr	r3, [pc, #284]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0ea      	beq.n	800393a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003964:	4b44      	ldr	r3, [pc, #272]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	061b      	lsls	r3, r3, #24
 8003972:	4941      	ldr	r1, [pc, #260]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]
 8003978:	e01e      	b.n	80039b8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800397a:	4b3f      	ldr	r3, [pc, #252]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a3e      	ldr	r2, [pc, #248]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 8003980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003986:	f7fe f85b 	bl	8001a40 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800398c:	e00e      	b.n	80039ac <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800398e:	f7fe f857 	bl	8001a40 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d907      	bls.n	80039ac <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800399c:	4b36      	ldr	r3, [pc, #216]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e2e3      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039ac:	4b32      	ldr	r3, [pc, #200]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1ea      	bne.n	800398e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d062      	beq.n	8003a8a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d038      	beq.n	8003a3e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d108      	bne.n	80039e6 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80039d4:	4b28      	ldr	r3, [pc, #160]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 80039d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039da:	4a27      	ldr	r2, [pc, #156]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 80039dc:	f023 0310 	bic.w	r3, r3, #16
 80039e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80039e4:	e007      	b.n	80039f6 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80039e6:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 80039e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ec:	4a22      	ldr	r2, [pc, #136]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 80039ee:	f043 0310 	orr.w	r3, r3, #16
 80039f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039f6:	4b20      	ldr	r3, [pc, #128]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 80039f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fc:	4a1e      	ldr	r2, [pc, #120]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a06:	f7fe f81b 	bl	8001a40 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a0c:	e00f      	b.n	8003a2e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0e:	f7fe f817 	bl	8001a40 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b07      	cmp	r3, #7
 8003a1a:	d908      	bls.n	8003a2e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a1c:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 8003a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e2a2      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a2e:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 8003a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0e8      	beq.n	8003a0e <HAL_RCC_OscConfig+0x44e>
 8003a3c:	e025      	b.n	8003a8a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a3e:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 8003a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a44:	4a0c      	ldr	r2, [pc, #48]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 8003a46:	f023 0301 	bic.w	r3, r3, #1
 8003a4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4e:	f7fd fff7 	bl	8001a40 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a54:	e012      	b.n	8003a7c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a56:	f7fd fff3 	bl	8001a40 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b07      	cmp	r3, #7
 8003a62:	d90b      	bls.n	8003a7c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a64:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <HAL_RCC_OscConfig+0x4b8>)
 8003a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d004      	beq.n	8003a7c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e27e      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a7c:	4ba8      	ldr	r3, [pc, #672]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e5      	bne.n	8003a56 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 812d 	beq.w	8003cf2 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a9c:	4ba0      	ldr	r3, [pc, #640]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10d      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa8:	4b9d      	ldr	r3, [pc, #628]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aac:	4a9c      	ldr	r2, [pc, #624]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ab4:	4b9a      	ldr	r3, [pc, #616]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac4:	4b97      	ldr	r3, [pc, #604]	; (8003d24 <HAL_RCC_OscConfig+0x764>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d11e      	bne.n	8003b0e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ad0:	4b94      	ldr	r3, [pc, #592]	; (8003d24 <HAL_RCC_OscConfig+0x764>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a93      	ldr	r2, [pc, #588]	; (8003d24 <HAL_RCC_OscConfig+0x764>)
 8003ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ada:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003adc:	f7fd ffb0 	bl	8001a40 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ae2:	e00e      	b.n	8003b02 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae4:	f7fd ffac 	bl	8001a40 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d907      	bls.n	8003b02 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af2:	4b8c      	ldr	r3, [pc, #560]	; (8003d24 <HAL_RCC_OscConfig+0x764>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e238      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b02:	4b88      	ldr	r3, [pc, #544]	; (8003d24 <HAL_RCC_OscConfig+0x764>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0ea      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d01f      	beq.n	8003b5a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d010      	beq.n	8003b48 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003b26:	4b7e      	ldr	r3, [pc, #504]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2c:	4a7c      	ldr	r2, [pc, #496]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003b2e:	f043 0304 	orr.w	r3, r3, #4
 8003b32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b36:	4b7a      	ldr	r3, [pc, #488]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3c:	4a78      	ldr	r2, [pc, #480]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b46:	e018      	b.n	8003b7a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b48:	4b75      	ldr	r3, [pc, #468]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	4a74      	ldr	r2, [pc, #464]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b58:	e00f      	b.n	8003b7a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b5a:	4b71      	ldr	r3, [pc, #452]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b60:	4a6f      	ldr	r2, [pc, #444]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003b62:	f023 0301 	bic.w	r3, r3, #1
 8003b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003b6a:	4b6d      	ldr	r3, [pc, #436]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	4a6b      	ldr	r2, [pc, #428]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003b72:	f023 0304 	bic.w	r3, r3, #4
 8003b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d068      	beq.n	8003c54 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b82:	f7fd ff5d 	bl	8001a40 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b88:	e011      	b.n	8003bae <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fd ff59 	bl	8001a40 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d908      	bls.n	8003bae <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b9c:	4b60      	ldr	r3, [pc, #384]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e1e2      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bae:	4b5c      	ldr	r3, [pc, #368]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0e6      	beq.n	8003b8a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d022      	beq.n	8003c0e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003bc8:	4b55      	ldr	r3, [pc, #340]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	4a54      	ldr	r2, [pc, #336]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003bd8:	e011      	b.n	8003bfe <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fd ff31 	bl	8001a40 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d908      	bls.n	8003bfe <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003bec:	4b4c      	ldr	r3, [pc, #304]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e1ba      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003bfe:	4b48      	ldr	r3, [pc, #288]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0e6      	beq.n	8003bda <HAL_RCC_OscConfig+0x61a>
 8003c0c:	e068      	b.n	8003ce0 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003c0e:	4b44      	ldr	r3, [pc, #272]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c14:	4a42      	ldr	r2, [pc, #264]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c1e:	e011      	b.n	8003c44 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c20:	f7fd ff0e 	bl	8001a40 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d908      	bls.n	8003c44 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c32:	4b3b      	ldr	r3, [pc, #236]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e197      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c44:	4b36      	ldr	r3, [pc, #216]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1e6      	bne.n	8003c20 <HAL_RCC_OscConfig+0x660>
 8003c52:	e045      	b.n	8003ce0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c54:	f7fd fef4 	bl	8001a40 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c5a:	e011      	b.n	8003c80 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5c:	f7fd fef0 	bl	8001a40 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d908      	bls.n	8003c80 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c6e:	4b2c      	ldr	r3, [pc, #176]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e179      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c80:	4b27      	ldr	r3, [pc, #156]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e6      	bne.n	8003c5c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003c8e:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d021      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003c9c:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	4a1f      	ldr	r2, [pc, #124]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003cac:	e011      	b.n	8003cd2 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cae:	f7fd fec7 	bl	8001a40 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d908      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003cc0:	4b17      	ldr	r3, [pc, #92]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e150      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003cd2:	4b13      	ldr	r3, [pc, #76]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e6      	bne.n	8003cae <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ce0:	7ffb      	ldrb	r3, [r7, #31]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d105      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce6:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cea:	4a0d      	ldr	r2, [pc, #52]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d04f      	beq.n	8003d9e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d028      	beq.n	8003d58 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d06:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003d08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d0c:	4a04      	ldr	r2, [pc, #16]	; (8003d20 <HAL_RCC_OscConfig+0x760>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d16:	f7fd fe93 	bl	8001a40 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d1c:	e014      	b.n	8003d48 <HAL_RCC_OscConfig+0x788>
 8003d1e:	bf00      	nop
 8003d20:	40021000 	.word	0x40021000
 8003d24:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d28:	f7fd fe8a 	bl	8001a40 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d908      	bls.n	8003d48 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d36:	4b91      	ldr	r3, [pc, #580]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e115      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d48:	4b8c      	ldr	r3, [pc, #560]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0e8      	beq.n	8003d28 <HAL_RCC_OscConfig+0x768>
 8003d56:	e022      	b.n	8003d9e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d58:	4b88      	ldr	r3, [pc, #544]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d5e:	4a87      	ldr	r2, [pc, #540]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003d60:	f023 0301 	bic.w	r3, r3, #1
 8003d64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d68:	f7fd fe6a 	bl	8001a40 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d6e:	e00f      	b.n	8003d90 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d70:	f7fd fe66 	bl	8001a40 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d908      	bls.n	8003d90 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d7e:	4b7f      	ldr	r3, [pc, #508]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e0f1      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d90:	4b7a      	ldr	r3, [pc, #488]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e8      	bne.n	8003d70 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80e5 	beq.w	8003f72 <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da8:	4b74      	ldr	r3, [pc, #464]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b0c      	cmp	r3, #12
 8003db2:	f000 809f 	beq.w	8003ef4 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d166      	bne.n	8003e8c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dbe:	4b6f      	ldr	r3, [pc, #444]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a6e      	ldr	r2, [pc, #440]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003dc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dca:	f7fd fe39 	bl	8001a40 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd0:	e00e      	b.n	8003df0 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd2:	f7fd fe35 	bl	8001a40 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d907      	bls.n	8003df0 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de0:	4b66      	ldr	r3, [pc, #408]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e0c1      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df0:	4b62      	ldr	r3, [pc, #392]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1ea      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dfc:	4b5f      	ldr	r3, [pc, #380]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	4b5f      	ldr	r3, [pc, #380]	; (8003f80 <HAL_RCC_OscConfig+0x9c0>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e0c:	3a01      	subs	r2, #1
 8003e0e:	0112      	lsls	r2, r2, #4
 8003e10:	4311      	orrs	r1, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e16:	0212      	lsls	r2, r2, #8
 8003e18:	4311      	orrs	r1, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e1e:	0852      	lsrs	r2, r2, #1
 8003e20:	3a01      	subs	r2, #1
 8003e22:	0552      	lsls	r2, r2, #21
 8003e24:	4311      	orrs	r1, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e2a:	0852      	lsrs	r2, r2, #1
 8003e2c:	3a01      	subs	r2, #1
 8003e2e:	0652      	lsls	r2, r2, #25
 8003e30:	4311      	orrs	r1, r2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e36:	06d2      	lsls	r2, r2, #27
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	4950      	ldr	r1, [pc, #320]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e40:	4b4e      	ldr	r3, [pc, #312]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a4d      	ldr	r2, [pc, #308]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e4a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e4c:	4b4b      	ldr	r3, [pc, #300]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4a4a      	ldr	r2, [pc, #296]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fd fdf2 	bl	8001a40 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e5e:	e00e      	b.n	8003e7e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e60:	f7fd fdee 	bl	8001a40 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d907      	bls.n	8003e7e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e6e:	4b43      	ldr	r3, [pc, #268]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e07a      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e7e:	4b3f      	ldr	r3, [pc, #252]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0ea      	beq.n	8003e60 <HAL_RCC_OscConfig+0x8a0>
 8003e8a:	e072      	b.n	8003f72 <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e8c:	4b3b      	ldr	r3, [pc, #236]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a3a      	ldr	r2, [pc, #232]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e96:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003e98:	4b38      	ldr	r3, [pc, #224]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d105      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ea4:	4b35      	ldr	r3, [pc, #212]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	4a34      	ldr	r2, [pc, #208]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003eaa:	f023 0303 	bic.w	r3, r3, #3
 8003eae:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003eb0:	4b32      	ldr	r3, [pc, #200]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4a31      	ldr	r2, [pc, #196]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003eb6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ebe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fd fdbe 	bl	8001a40 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ec6:	e00e      	b.n	8003ee6 <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec8:	f7fd fdba 	bl	8001a40 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d907      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed6:	4b29      	ldr	r3, [pc, #164]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e046      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee6:	4b25      	ldr	r3, [pc, #148]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1ea      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x908>
 8003ef2:	e03e      	b.n	8003f72 <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e039      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003f00:	4b1e      	ldr	r3, [pc, #120]	; (8003f7c <HAL_RCC_OscConfig+0x9bc>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f003 0203 	and.w	r2, r3, #3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d12c      	bne.n	8003f6e <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d123      	bne.n	8003f6e <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d11b      	bne.n	8003f6e <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f40:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d113      	bne.n	8003f6e <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	085b      	lsrs	r3, r3, #1
 8003f52:	3b01      	subs	r3, #1
 8003f54:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d109      	bne.n	8003f6e <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f64:	085b      	lsrs	r3, r3, #1
 8003f66:	3b01      	subs	r3, #1
 8003f68:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d001      	beq.n	8003f72 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3720      	adds	r7, #32
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	019f800c 	.word	0x019f800c

08003f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e10d      	b.n	80041b8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f9c:	4b88      	ldr	r3, [pc, #544]	; (80041c0 <HAL_RCC_ClockConfig+0x23c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 030f 	and.w	r3, r3, #15
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d910      	bls.n	8003fcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003faa:	4b85      	ldr	r3, [pc, #532]	; (80041c0 <HAL_RCC_ClockConfig+0x23c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f023 020f 	bic.w	r2, r3, #15
 8003fb2:	4983      	ldr	r1, [pc, #524]	; (80041c0 <HAL_RCC_ClockConfig+0x23c>)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fba:	4b81      	ldr	r3, [pc, #516]	; (80041c0 <HAL_RCC_ClockConfig+0x23c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0f5      	b.n	80041b8 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 8094 	beq.w	8004102 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d134      	bne.n	800404c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe2:	4b78      	ldr	r3, [pc, #480]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e0e2      	b.n	80041b8 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ff2:	f000 fa5f 	bl	80044b4 <RCC_GetSysClockFreqFromPLLSource>
 8003ff6:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4a73      	ldr	r2, [pc, #460]	; (80041c8 <HAL_RCC_ClockConfig+0x244>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d956      	bls.n	80040ae <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004000:	4b70      	ldr	r3, [pc, #448]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10a      	bne.n	8004022 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800400c:	4b6d      	ldr	r3, [pc, #436]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004014:	4a6b      	ldr	r2, [pc, #428]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 8004016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800401a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800401c:	2380      	movs	r3, #128	; 0x80
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	e045      	b.n	80040ae <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d03f      	beq.n	80040ae <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004032:	2b00      	cmp	r3, #0
 8004034:	d13b      	bne.n	80040ae <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004036:	4b63      	ldr	r3, [pc, #396]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800403e:	4a61      	ldr	r2, [pc, #388]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 8004040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004044:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004046:	2380      	movs	r3, #128	; 0x80
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	e030      	b.n	80040ae <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b02      	cmp	r3, #2
 8004052:	d107      	bne.n	8004064 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004054:	4b5b      	ldr	r3, [pc, #364]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d115      	bne.n	800408c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0a9      	b.n	80041b8 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d107      	bne.n	800407c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800406c:	4b55      	ldr	r3, [pc, #340]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d109      	bne.n	800408c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e09d      	b.n	80041b8 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800407c:	4b51      	ldr	r3, [pc, #324]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e095      	b.n	80041b8 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800408c:	f000 f8a2 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 8004090:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	4a4c      	ldr	r2, [pc, #304]	; (80041c8 <HAL_RCC_ClockConfig+0x244>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d909      	bls.n	80040ae <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800409a:	4b4a      	ldr	r3, [pc, #296]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040a2:	4a48      	ldr	r2, [pc, #288]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 80040a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80040aa:	2380      	movs	r3, #128	; 0x80
 80040ac:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040ae:	4b45      	ldr	r3, [pc, #276]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f023 0203 	bic.w	r2, r3, #3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	4942      	ldr	r1, [pc, #264]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c0:	f7fd fcbe 	bl	8001a40 <HAL_GetTick>
 80040c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c6:	e013      	b.n	80040f0 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c8:	f7fd fcba 	bl	8001a40 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d90a      	bls.n	80040f0 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040da:	4b3a      	ldr	r3, [pc, #232]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 020c 	and.w	r2, r3, #12
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d001      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e063      	b.n	80041b8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f0:	4b34      	ldr	r3, [pc, #208]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 020c 	and.w	r2, r3, #12
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	429a      	cmp	r2, r3
 8004100:	d1e2      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d009      	beq.n	8004122 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800410e:	4b2d      	ldr	r3, [pc, #180]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	492a      	ldr	r1, [pc, #168]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 800411c:	4313      	orrs	r3, r2
 800411e:	608b      	str	r3, [r1, #8]
 8004120:	e008      	b.n	8004134 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b80      	cmp	r3, #128	; 0x80
 8004126:	d105      	bne.n	8004134 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004128:	4b26      	ldr	r3, [pc, #152]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	4a25      	ldr	r2, [pc, #148]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 800412e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004132:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004134:	4b22      	ldr	r3, [pc, #136]	; (80041c0 <HAL_RCC_ClockConfig+0x23c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d210      	bcs.n	8004164 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004142:	4b1f      	ldr	r3, [pc, #124]	; (80041c0 <HAL_RCC_ClockConfig+0x23c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f023 020f 	bic.w	r2, r3, #15
 800414a:	491d      	ldr	r1, [pc, #116]	; (80041c0 <HAL_RCC_ClockConfig+0x23c>)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	4313      	orrs	r3, r2
 8004150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004152:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <HAL_RCC_ClockConfig+0x23c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e029      	b.n	80041b8 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	d008      	beq.n	8004182 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004170:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4911      	ldr	r1, [pc, #68]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 800417e:	4313      	orrs	r3, r2
 8004180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d009      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800418e:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4909      	ldr	r1, [pc, #36]	; (80041c4 <HAL_RCC_ClockConfig+0x240>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80041a2:	f000 f8b5 	bl	8004310 <HAL_RCC_GetHCLKFreq>
 80041a6:	4603      	mov	r3, r0
 80041a8:	4a08      	ldr	r2, [pc, #32]	; (80041cc <HAL_RCC_ClockConfig+0x248>)
 80041aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041ac:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <HAL_RCC_ClockConfig+0x24c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fd fab7 	bl	8001724 <HAL_InitTick>
 80041b6:	4603      	mov	r3, r0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40022000 	.word	0x40022000
 80041c4:	40021000 	.word	0x40021000
 80041c8:	04c4b400 	.word	0x04c4b400
 80041cc:	20000004 	.word	0x20000004
 80041d0:	20000008 	.word	0x20000008

080041d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b089      	sub	sp, #36	; 0x24
 80041d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	2300      	movs	r3, #0
 80041e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041e2:	4b47      	ldr	r3, [pc, #284]	; (8004300 <HAL_RCC_GetSysClockFreq+0x12c>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
 80041ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041ec:	4b44      	ldr	r3, [pc, #272]	; (8004300 <HAL_RCC_GetSysClockFreq+0x12c>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0303 	and.w	r3, r3, #3
 80041f4:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <HAL_RCC_GetSysClockFreq+0x34>
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	2b0c      	cmp	r3, #12
 8004200:	d121      	bne.n	8004246 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d11e      	bne.n	8004246 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004208:	4b3d      	ldr	r3, [pc, #244]	; (8004300 <HAL_RCC_GetSysClockFreq+0x12c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b00      	cmp	r3, #0
 8004212:	d107      	bne.n	8004224 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004214:	4b3a      	ldr	r3, [pc, #232]	; (8004300 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800421a:	0a1b      	lsrs	r3, r3, #8
 800421c:	f003 030f 	and.w	r3, r3, #15
 8004220:	61fb      	str	r3, [r7, #28]
 8004222:	e005      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004224:	4b36      	ldr	r3, [pc, #216]	; (8004300 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	091b      	lsrs	r3, r3, #4
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004230:	4a34      	ldr	r2, [pc, #208]	; (8004304 <HAL_RCC_GetSysClockFreq+0x130>)
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004238:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10d      	bne.n	800425c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004244:	e00a      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	2b04      	cmp	r3, #4
 800424a:	d102      	bne.n	8004252 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800424c:	4b2e      	ldr	r3, [pc, #184]	; (8004308 <HAL_RCC_GetSysClockFreq+0x134>)
 800424e:	61bb      	str	r3, [r7, #24]
 8004250:	e004      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b08      	cmp	r3, #8
 8004256:	d101      	bne.n	800425c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004258:	4b2c      	ldr	r3, [pc, #176]	; (800430c <HAL_RCC_GetSysClockFreq+0x138>)
 800425a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	2b0c      	cmp	r3, #12
 8004260:	d146      	bne.n	80042f0 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004262:	4b27      	ldr	r3, [pc, #156]	; (8004300 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800426c:	4b24      	ldr	r3, [pc, #144]	; (8004300 <HAL_RCC_GetSysClockFreq+0x12c>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	3301      	adds	r3, #1
 8004278:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b02      	cmp	r3, #2
 800427e:	d003      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0xb4>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b03      	cmp	r3, #3
 8004284:	d00d      	beq.n	80042a2 <HAL_RCC_GetSysClockFreq+0xce>
 8004286:	e019      	b.n	80042bc <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004288:	4a1f      	ldr	r2, [pc, #124]	; (8004308 <HAL_RCC_GetSysClockFreq+0x134>)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004290:	4a1b      	ldr	r2, [pc, #108]	; (8004300 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004292:	68d2      	ldr	r2, [r2, #12]
 8004294:	0a12      	lsrs	r2, r2, #8
 8004296:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800429a:	fb02 f303 	mul.w	r3, r2, r3
 800429e:	617b      	str	r3, [r7, #20]
        break;
 80042a0:	e019      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042a2:	4a1a      	ldr	r2, [pc, #104]	; (800430c <HAL_RCC_GetSysClockFreq+0x138>)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042aa:	4a15      	ldr	r2, [pc, #84]	; (8004300 <HAL_RCC_GetSysClockFreq+0x12c>)
 80042ac:	68d2      	ldr	r2, [r2, #12]
 80042ae:	0a12      	lsrs	r2, r2, #8
 80042b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042b4:	fb02 f303 	mul.w	r3, r2, r3
 80042b8:	617b      	str	r3, [r7, #20]
        break;
 80042ba:	e00c      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042bc:	69fa      	ldr	r2, [r7, #28]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c4:	4a0e      	ldr	r2, [pc, #56]	; (8004300 <HAL_RCC_GetSysClockFreq+0x12c>)
 80042c6:	68d2      	ldr	r2, [r2, #12]
 80042c8:	0a12      	lsrs	r2, r2, #8
 80042ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042ce:	fb02 f303 	mul.w	r3, r2, r3
 80042d2:	617b      	str	r3, [r7, #20]
        break;
 80042d4:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80042d6:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <HAL_RCC_GetSysClockFreq+0x12c>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	0e5b      	lsrs	r3, r3, #25
 80042dc:	f003 0303 	and.w	r3, r3, #3
 80042e0:	3301      	adds	r3, #1
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042f0:	69bb      	ldr	r3, [r7, #24]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3724      	adds	r7, #36	; 0x24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40021000 	.word	0x40021000
 8004304:	08008780 	.word	0x08008780
 8004308:	00f42400 	.word	0x00f42400
 800430c:	007a1200 	.word	0x007a1200

08004310 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004314:	f7ff ff5e 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 8004318:	4602      	mov	r2, r0
 800431a:	4b05      	ldr	r3, [pc, #20]	; (8004330 <HAL_RCC_GetHCLKFreq+0x20>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	f003 030f 	and.w	r3, r3, #15
 8004324:	4903      	ldr	r1, [pc, #12]	; (8004334 <HAL_RCC_GetHCLKFreq+0x24>)
 8004326:	5ccb      	ldrb	r3, [r1, r3]
 8004328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800432c:	4618      	mov	r0, r3
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40021000 	.word	0x40021000
 8004334:	08008768 	.word	0x08008768

08004338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800433c:	f7ff ffe8 	bl	8004310 <HAL_RCC_GetHCLKFreq>
 8004340:	4602      	mov	r2, r0
 8004342:	4b05      	ldr	r3, [pc, #20]	; (8004358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	0a1b      	lsrs	r3, r3, #8
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	4903      	ldr	r1, [pc, #12]	; (800435c <HAL_RCC_GetPCLK1Freq+0x24>)
 800434e:	5ccb      	ldrb	r3, [r1, r3]
 8004350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004354:	4618      	mov	r0, r3
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40021000 	.word	0x40021000
 800435c:	08008778 	.word	0x08008778

08004360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004364:	f7ff ffd4 	bl	8004310 <HAL_RCC_GetHCLKFreq>
 8004368:	4602      	mov	r2, r0
 800436a:	4b05      	ldr	r3, [pc, #20]	; (8004380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	0adb      	lsrs	r3, r3, #11
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	4903      	ldr	r1, [pc, #12]	; (8004384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004376:	5ccb      	ldrb	r3, [r1, r3]
 8004378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800437c:	4618      	mov	r0, r3
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40021000 	.word	0x40021000
 8004384:	08008778 	.word	0x08008778

08004388 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	220f      	movs	r2, #15
 8004396:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004398:	4b12      	ldr	r3, [pc, #72]	; (80043e4 <HAL_RCC_GetClockConfig+0x5c>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 0203 	and.w	r2, r3, #3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80043a4:	4b0f      	ldr	r3, [pc, #60]	; (80043e4 <HAL_RCC_GetClockConfig+0x5c>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80043b0:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <HAL_RCC_GetClockConfig+0x5c>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80043bc:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <HAL_RCC_GetClockConfig+0x5c>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	08db      	lsrs	r3, r3, #3
 80043c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80043ca:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <HAL_RCC_GetClockConfig+0x60>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 020f 	and.w	r2, r3, #15
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	601a      	str	r2, [r3, #0]
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40021000 	.word	0x40021000
 80043e8:	40022000 	.word	0x40022000

080043ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043f8:	4b2c      	ldr	r3, [pc, #176]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80043fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004404:	f7ff f83e 	bl	8003484 <HAL_PWREx_GetVoltageRange>
 8004408:	6138      	str	r0, [r7, #16]
 800440a:	e014      	b.n	8004436 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800440c:	4b27      	ldr	r3, [pc, #156]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800440e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004410:	4a26      	ldr	r2, [pc, #152]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004416:	6593      	str	r3, [r2, #88]	; 0x58
 8004418:	4b24      	ldr	r3, [pc, #144]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800441a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004424:	f7ff f82e 	bl	8003484 <HAL_PWREx_GetVoltageRange>
 8004428:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800442a:	4b20      	ldr	r3, [pc, #128]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800442c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442e:	4a1f      	ldr	r2, [pc, #124]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004434:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <RCC_SetFlashLatencyFromMSIRange+0x58>
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004442:	d10b      	bne.n	800445c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b80      	cmp	r3, #128	; 0x80
 8004448:	d919      	bls.n	800447e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2ba0      	cmp	r3, #160	; 0xa0
 800444e:	d902      	bls.n	8004456 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004450:	2302      	movs	r3, #2
 8004452:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004454:	e013      	b.n	800447e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004456:	2301      	movs	r3, #1
 8004458:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800445a:	e010      	b.n	800447e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b80      	cmp	r3, #128	; 0x80
 8004460:	d902      	bls.n	8004468 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004462:	2303      	movs	r3, #3
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	e00a      	b.n	800447e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b80      	cmp	r3, #128	; 0x80
 800446c:	d102      	bne.n	8004474 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800446e:	2302      	movs	r3, #2
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	e004      	b.n	800447e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b70      	cmp	r3, #112	; 0x70
 8004478:	d101      	bne.n	800447e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800447a:	2301      	movs	r3, #1
 800447c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800447e:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f023 020f 	bic.w	r2, r3, #15
 8004486:	490a      	ldr	r1, [pc, #40]	; (80044b0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800448e:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	429a      	cmp	r2, r3
 800449a:	d001      	beq.n	80044a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40021000 	.word	0x40021000
 80044b0:	40022000 	.word	0x40022000

080044b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80044be:	4b36      	ldr	r3, [pc, #216]	; (8004598 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d118      	bne.n	80044fc <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044ca:	4b33      	ldr	r3, [pc, #204]	; (8004598 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d107      	bne.n	80044e6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044d6:	4b30      	ldr	r3, [pc, #192]	; (8004598 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80044d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044dc:	0a1b      	lsrs	r3, r3, #8
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	e005      	b.n	80044f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044e6:	4b2c      	ldr	r3, [pc, #176]	; (8004598 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	091b      	lsrs	r3, r3, #4
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80044f2:	4a2a      	ldr	r2, [pc, #168]	; (800459c <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044fa:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044fc:	4b26      	ldr	r3, [pc, #152]	; (8004598 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004506:	4b24      	ldr	r3, [pc, #144]	; (8004598 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	091b      	lsrs	r3, r3, #4
 800450c:	f003 030f 	and.w	r3, r3, #15
 8004510:	3301      	adds	r3, #1
 8004512:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d003      	beq.n	8004522 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b03      	cmp	r3, #3
 800451e:	d00d      	beq.n	800453c <RCC_GetSysClockFreqFromPLLSource+0x88>
 8004520:	e019      	b.n	8004556 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004522:	4a1f      	ldr	r2, [pc, #124]	; (80045a0 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	fbb2 f3f3 	udiv	r3, r2, r3
 800452a:	4a1b      	ldr	r2, [pc, #108]	; (8004598 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800452c:	68d2      	ldr	r2, [r2, #12]
 800452e:	0a12      	lsrs	r2, r2, #8
 8004530:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004534:	fb02 f303 	mul.w	r3, r2, r3
 8004538:	613b      	str	r3, [r7, #16]
      break;
 800453a:	e019      	b.n	8004570 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800453c:	4a19      	ldr	r2, [pc, #100]	; (80045a4 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	4a14      	ldr	r2, [pc, #80]	; (8004598 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004546:	68d2      	ldr	r2, [r2, #12]
 8004548:	0a12      	lsrs	r2, r2, #8
 800454a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800454e:	fb02 f303 	mul.w	r3, r2, r3
 8004552:	613b      	str	r3, [r7, #16]
      break;
 8004554:	e00c      	b.n	8004570 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	fbb2 f3f3 	udiv	r3, r2, r3
 800455e:	4a0e      	ldr	r2, [pc, #56]	; (8004598 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004560:	68d2      	ldr	r2, [r2, #12]
 8004562:	0a12      	lsrs	r2, r2, #8
 8004564:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004568:	fb02 f303 	mul.w	r3, r2, r3
 800456c:	613b      	str	r3, [r7, #16]
      break;
 800456e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004570:	4b09      	ldr	r3, [pc, #36]	; (8004598 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	0e5b      	lsrs	r3, r3, #25
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	3301      	adds	r3, #1
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	fbb2 f3f3 	udiv	r3, r2, r3
 8004588:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800458a:	683b      	ldr	r3, [r7, #0]
}
 800458c:	4618      	mov	r0, r3
 800458e:	371c      	adds	r7, #28
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	40021000 	.word	0x40021000
 800459c:	08008780 	.word	0x08008780
 80045a0:	00f42400 	.word	0x00f42400
 80045a4:	007a1200 	.word	0x007a1200

080045a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045b0:	2300      	movs	r3, #0
 80045b2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045b4:	2300      	movs	r3, #0
 80045b6:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d040      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c8:	2b80      	cmp	r3, #128	; 0x80
 80045ca:	d02a      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80045cc:	2b80      	cmp	r3, #128	; 0x80
 80045ce:	d825      	bhi.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80045d0:	2b60      	cmp	r3, #96	; 0x60
 80045d2:	d026      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80045d4:	2b60      	cmp	r3, #96	; 0x60
 80045d6:	d821      	bhi.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80045d8:	2b40      	cmp	r3, #64	; 0x40
 80045da:	d006      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x42>
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	d81d      	bhi.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d009      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d010      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80045e8:	e018      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045ea:	4b8f      	ldr	r3, [pc, #572]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	4a8e      	ldr	r2, [pc, #568]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f4:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80045f6:	e015      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	2100      	movs	r1, #0
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fb56 	bl	8004cb0 <RCCEx_PLLSAI1_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004608:	e00c      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3320      	adds	r3, #32
 800460e:	2100      	movs	r1, #0
 8004610:	4618      	mov	r0, r3
 8004612:	f000 fc33 	bl	8004e7c <RCCEx_PLLSAI2_Config>
 8004616:	4603      	mov	r3, r0
 8004618:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800461a:	e003      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	77fb      	strb	r3, [r7, #31]
        break;
 8004620:	e000      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8004622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004624:	7ffb      	ldrb	r3, [r7, #31]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10b      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800462a:	4b7f      	ldr	r3, [pc, #508]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800462c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004630:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004638:	497b      	ldr	r1, [pc, #492]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004640:	e001      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004642:	7ffb      	ldrb	r3, [r7, #31]
 8004644:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d047      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465a:	d030      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x116>
 800465c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004660:	d82a      	bhi.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004666:	d02a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004668:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800466c:	d824      	bhi.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800466e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004672:	d008      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004678:	d81e      	bhi.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800467e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004682:	d010      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004684:	e018      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004686:	4b68      	ldr	r3, [pc, #416]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	4a67      	ldr	r2, [pc, #412]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800468c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004690:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004692:	e015      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3304      	adds	r3, #4
 8004698:	2100      	movs	r1, #0
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fb08 	bl	8004cb0 <RCCEx_PLLSAI1_Config>
 80046a0:	4603      	mov	r3, r0
 80046a2:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80046a4:	e00c      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3320      	adds	r3, #32
 80046aa:	2100      	movs	r1, #0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fbe5 	bl	8004e7c <RCCEx_PLLSAI2_Config>
 80046b2:	4603      	mov	r3, r0
 80046b4:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80046b6:	e003      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	77fb      	strb	r3, [r7, #31]
        break;
 80046bc:	e000      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80046be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046c0:	7ffb      	ldrb	r3, [r7, #31]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10b      	bne.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046c6:	4b58      	ldr	r3, [pc, #352]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	4954      	ldr	r1, [pc, #336]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80046dc:	e001      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046de:	7ffb      	ldrb	r3, [r7, #31]
 80046e0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 80ab 	beq.w	8004846 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f0:	2300      	movs	r3, #0
 80046f2:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046f4:	4b4c      	ldr	r3, [pc, #304]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10d      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004700:	4b49      	ldr	r3, [pc, #292]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004704:	4a48      	ldr	r2, [pc, #288]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470a:	6593      	str	r3, [r2, #88]	; 0x58
 800470c:	4b46      	ldr	r3, [pc, #280]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800470e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004718:	2301      	movs	r3, #1
 800471a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800471c:	4b43      	ldr	r3, [pc, #268]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a42      	ldr	r2, [pc, #264]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004726:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004728:	f7fd f98a 	bl	8001a40 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800472e:	e00f      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004730:	f7fd f986 	bl	8001a40 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d908      	bls.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800473e:	4b3b      	ldr	r3, [pc, #236]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004746:	2b00      	cmp	r3, #0
 8004748:	d109      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800474e:	e006      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004750:	4b36      	ldr	r3, [pc, #216]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0e9      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800475c:	e000      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800475e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004760:	7ffb      	ldrb	r3, [r7, #31]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d164      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004766:	4b30      	ldr	r3, [pc, #192]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004770:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d01f      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	429a      	cmp	r2, r3
 8004782:	d019      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004784:	4b28      	ldr	r3, [pc, #160]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004790:	4b25      	ldr	r3, [pc, #148]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	4a24      	ldr	r2, [pc, #144]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047a0:	4b21      	ldr	r3, [pc, #132]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a6:	4a20      	ldr	r2, [pc, #128]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047b0:	4a1d      	ldr	r2, [pc, #116]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d01f      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c2:	f7fd f93d 	bl	8001a40 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047c8:	e012      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ca:	f7fd f939 	bl	8001a40 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d8:	4293      	cmp	r3, r2
 80047da:	d909      	bls.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047dc:	4b12      	ldr	r3, [pc, #72]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80047ee:	e007      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047f0:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0e5      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x222>
 80047fe:	e000      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8004800:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8004802:	7ffb      	ldrb	r3, [r7, #31]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10c      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004808:	4b07      	ldr	r3, [pc, #28]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004818:	4903      	ldr	r1, [pc, #12]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004820:	e008      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004822:	7ffb      	ldrb	r3, [r7, #31]
 8004824:	77bb      	strb	r3, [r7, #30]
 8004826:	e005      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8004828:	40021000 	.word	0x40021000
 800482c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004830:	7ffb      	ldrb	r3, [r7, #31]
 8004832:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004834:	7dfb      	ldrb	r3, [r7, #23]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d105      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483a:	4b9c      	ldr	r3, [pc, #624]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800483c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483e:	4a9b      	ldr	r2, [pc, #620]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004844:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004852:	4b96      	ldr	r3, [pc, #600]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004858:	f023 0203 	bic.w	r2, r3, #3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004860:	4992      	ldr	r1, [pc, #584]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00a      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004874:	4b8d      	ldr	r3, [pc, #564]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487a:	f023 020c 	bic.w	r2, r3, #12
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	498a      	ldr	r1, [pc, #552]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004884:	4313      	orrs	r3, r2
 8004886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004896:	4b85      	ldr	r3, [pc, #532]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a4:	4981      	ldr	r1, [pc, #516]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048b8:	4b7c      	ldr	r3, [pc, #496]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	4979      	ldr	r1, [pc, #484]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048da:	4b74      	ldr	r3, [pc, #464]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e8:	4970      	ldr	r1, [pc, #448]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048fc:	4b6b      	ldr	r3, [pc, #428]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004902:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490a:	4968      	ldr	r1, [pc, #416]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800491e:	4b63      	ldr	r3, [pc, #396]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004924:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492c:	495f      	ldr	r1, [pc, #380]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004940:	4b5a      	ldr	r3, [pc, #360]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004946:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494e:	4957      	ldr	r1, [pc, #348]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004962:	4b52      	ldr	r3, [pc, #328]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004968:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004970:	494e      	ldr	r1, [pc, #312]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d031      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004988:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800498c:	d00e      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x404>
 800498e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004992:	d814      	bhi.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004994:	2b00      	cmp	r3, #0
 8004996:	d015      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800499c:	d10f      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800499e:	4b43      	ldr	r3, [pc, #268]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	4a42      	ldr	r2, [pc, #264]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80049a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049a8:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80049aa:	e00c      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3304      	adds	r3, #4
 80049b0:	2100      	movs	r1, #0
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 f97c 	bl	8004cb0 <RCCEx_PLLSAI1_Config>
 80049b8:	4603      	mov	r3, r0
 80049ba:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80049bc:	e003      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	77fb      	strb	r3, [r7, #31]
        break;
 80049c2:	e000      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80049c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049c6:	7ffb      	ldrb	r3, [r7, #31]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10b      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80049cc:	4b37      	ldr	r3, [pc, #220]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049da:	4934      	ldr	r1, [pc, #208]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049e2:	e001      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e4:	7ffb      	ldrb	r3, [r7, #31]
 80049e6:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049f4:	4b2d      	ldr	r3, [pc, #180]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80049f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a02:	492a      	ldr	r1, [pc, #168]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a16:	4b25      	ldr	r3, [pc, #148]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a24:	4921      	ldr	r1, [pc, #132]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a38:	4b1c      	ldr	r3, [pc, #112]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a46:	4919      	ldr	r1, [pc, #100]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a5a:	4b14      	ldr	r3, [pc, #80]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a60:	f023 0203 	bic.w	r2, r3, #3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a68:	4910      	ldr	r1, [pc, #64]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d02b      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a8a:	4908      	ldr	r1, [pc, #32]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a9a:	d109      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a9c:	4b03      	ldr	r3, [pc, #12]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4a02      	ldr	r2, [pc, #8]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aa6:	60d3      	str	r3, [r2, #12]
 8004aa8:	e014      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004aaa:	bf00      	nop
 8004aac:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3304      	adds	r3, #4
 8004abe:	2101      	movs	r1, #1
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 f8f5 	bl	8004cb0 <RCCEx_PLLSAI1_Config>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8004aca:	7ffb      	ldrb	r3, [r7, #31]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8004ad0:	7ffb      	ldrb	r3, [r7, #31]
 8004ad2:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d04a      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ae8:	d108      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004aea:	4b70      	ldr	r3, [pc, #448]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004aec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004af0:	4a6e      	ldr	r2, [pc, #440]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004af6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004afa:	e012      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004afc:	4b6b      	ldr	r3, [pc, #428]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b0a:	4968      	ldr	r1, [pc, #416]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b12:	4b66      	ldr	r3, [pc, #408]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b18:	4a64      	ldr	r2, [pc, #400]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b1e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b2a:	d10d      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	2101      	movs	r1, #1
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 f8bc 	bl	8004cb0 <RCCEx_PLLSAI1_Config>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004b3c:	7ffb      	ldrb	r3, [r7, #31]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d019      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8004b42:	7ffb      	ldrb	r3, [r7, #31]
 8004b44:	77bb      	strb	r3, [r7, #30]
 8004b46:	e016      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b50:	d106      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b52:	4b56      	ldr	r3, [pc, #344]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	4a55      	ldr	r2, [pc, #340]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b5c:	60d3      	str	r3, [r2, #12]
 8004b5e:	e00a      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b68:	d105      	bne.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b6a:	4b50      	ldr	r3, [pc, #320]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	4a4f      	ldr	r2, [pc, #316]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b74:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d028      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b82:	4b4a      	ldr	r3, [pc, #296]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b90:	4946      	ldr	r1, [pc, #280]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ba0:	d106      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ba2:	4b42      	ldr	r3, [pc, #264]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	4a41      	ldr	r2, [pc, #260]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004ba8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bac:	60d3      	str	r3, [r2, #12]
 8004bae:	e011      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bb8:	d10c      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 f875 	bl	8004cb0 <RCCEx_PLLSAI1_Config>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004bca:	7ffb      	ldrb	r3, [r7, #31]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004bd0:	7ffb      	ldrb	r3, [r7, #31]
 8004bd2:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01e      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004be0:	4b32      	ldr	r3, [pc, #200]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bf0:	492e      	ldr	r1, [pc, #184]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c02:	d10c      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3304      	adds	r3, #4
 8004c08:	2102      	movs	r1, #2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 f850 	bl	8004cb0 <RCCEx_PLLSAI1_Config>
 8004c10:	4603      	mov	r3, r0
 8004c12:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004c14:	7ffb      	ldrb	r3, [r7, #31]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8004c1a:	7ffb      	ldrb	r3, [r7, #31]
 8004c1c:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00b      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c2a:	4b20      	ldr	r3, [pc, #128]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004c2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c30:	f023 0204 	bic.w	r2, r3, #4
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c3a:	491c      	ldr	r1, [pc, #112]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00b      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c4e:	4b17      	ldr	r3, [pc, #92]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004c50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c54:	f023 0218 	bic.w	r2, r3, #24
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5e:	4913      	ldr	r1, [pc, #76]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d017      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004c72:	4b0e      	ldr	r3, [pc, #56]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004c74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c82:	490a      	ldr	r1, [pc, #40]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c94:	d105      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c96:	4b05      	ldr	r3, [pc, #20]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	4a04      	ldr	r2, [pc, #16]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004c9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ca0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004ca2:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3720      	adds	r7, #32
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40021000 	.word	0x40021000

08004cb0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d018      	beq.n	8004cf8 <RCCEx_PLLSAI1_Config+0x48>
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d81f      	bhi.n	8004d0a <RCCEx_PLLSAI1_Config+0x5a>
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d002      	beq.n	8004cd4 <RCCEx_PLLSAI1_Config+0x24>
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d009      	beq.n	8004ce6 <RCCEx_PLLSAI1_Config+0x36>
 8004cd2:	e01a      	b.n	8004d0a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cd4:	4b65      	ldr	r3, [pc, #404]	; (8004e6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d117      	bne.n	8004d10 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ce4:	e014      	b.n	8004d10 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ce6:	4b61      	ldr	r3, [pc, #388]	; (8004e6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d110      	bne.n	8004d14 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cf6:	e00d      	b.n	8004d14 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004cf8:	4b5c      	ldr	r3, [pc, #368]	; (8004e6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d109      	bne.n	8004d18 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d08:	e006      	b.n	8004d18 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d0e:	e004      	b.n	8004d1a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004d10:	bf00      	nop
 8004d12:	e002      	b.n	8004d1a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004d14:	bf00      	nop
 8004d16:	e000      	b.n	8004d1a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004d18:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f040 809f 	bne.w	8004e60 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d22:	4b52      	ldr	r3, [pc, #328]	; (8004e6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a51      	ldr	r2, [pc, #324]	; (8004e6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d2e:	f7fc fe87 	bl	8001a40 <HAL_GetTick>
 8004d32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d34:	e00f      	b.n	8004d56 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d36:	f7fc fe83 	bl	8001a40 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d908      	bls.n	8004d56 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d44:	4b49      	ldr	r3, [pc, #292]	; (8004e6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d009      	beq.n	8004d64 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d54:	e006      	b.n	8004d64 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d56:	4b45      	ldr	r3, [pc, #276]	; (8004e6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e9      	bne.n	8004d36 <RCCEx_PLLSAI1_Config+0x86>
 8004d62:	e000      	b.n	8004d66 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004d64:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d179      	bne.n	8004e60 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d116      	bne.n	8004da0 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d72:	4b3e      	ldr	r3, [pc, #248]	; (8004e6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	4b3e      	ldr	r3, [pc, #248]	; (8004e70 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6892      	ldr	r2, [r2, #8]
 8004d7e:	0211      	lsls	r1, r2, #8
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	68d2      	ldr	r2, [r2, #12]
 8004d84:	06d2      	lsls	r2, r2, #27
 8004d86:	4311      	orrs	r1, r2
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6852      	ldr	r2, [r2, #4]
 8004d8c:	3a01      	subs	r2, #1
 8004d8e:	0112      	lsls	r2, r2, #4
 8004d90:	4311      	orrs	r1, r2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6812      	ldr	r2, [r2, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	4934      	ldr	r1, [pc, #208]	; (8004e6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	610b      	str	r3, [r1, #16]
 8004d9e:	e033      	b.n	8004e08 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d118      	bne.n	8004dd8 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004da6:	4b31      	ldr	r3, [pc, #196]	; (8004e6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	4b32      	ldr	r3, [pc, #200]	; (8004e74 <RCCEx_PLLSAI1_Config+0x1c4>)
 8004dac:	4013      	ands	r3, r2
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6892      	ldr	r2, [r2, #8]
 8004db2:	0211      	lsls	r1, r2, #8
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6912      	ldr	r2, [r2, #16]
 8004db8:	0852      	lsrs	r2, r2, #1
 8004dba:	3a01      	subs	r2, #1
 8004dbc:	0552      	lsls	r2, r2, #21
 8004dbe:	4311      	orrs	r1, r2
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6852      	ldr	r2, [r2, #4]
 8004dc4:	3a01      	subs	r2, #1
 8004dc6:	0112      	lsls	r2, r2, #4
 8004dc8:	4311      	orrs	r1, r2
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6812      	ldr	r2, [r2, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	4926      	ldr	r1, [pc, #152]	; (8004e6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	610b      	str	r3, [r1, #16]
 8004dd6:	e017      	b.n	8004e08 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dd8:	4b24      	ldr	r3, [pc, #144]	; (8004e6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	4b26      	ldr	r3, [pc, #152]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1c8>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6892      	ldr	r2, [r2, #8]
 8004de4:	0211      	lsls	r1, r2, #8
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6952      	ldr	r2, [r2, #20]
 8004dea:	0852      	lsrs	r2, r2, #1
 8004dec:	3a01      	subs	r2, #1
 8004dee:	0652      	lsls	r2, r2, #25
 8004df0:	4311      	orrs	r1, r2
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6852      	ldr	r2, [r2, #4]
 8004df6:	3a01      	subs	r2, #1
 8004df8:	0112      	lsls	r2, r2, #4
 8004dfa:	4311      	orrs	r1, r2
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6812      	ldr	r2, [r2, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	491a      	ldr	r1, [pc, #104]	; (8004e6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e08:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a17      	ldr	r2, [pc, #92]	; (8004e6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004e0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e14:	f7fc fe14 	bl	8001a40 <HAL_GetTick>
 8004e18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e1a:	e00f      	b.n	8004e3c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e1c:	f7fc fe10 	bl	8001a40 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d908      	bls.n	8004e3c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e2a:	4b10      	ldr	r3, [pc, #64]	; (8004e6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d109      	bne.n	8004e4a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004e3a:	e006      	b.n	8004e4a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0e9      	beq.n	8004e1c <RCCEx_PLLSAI1_Config+0x16c>
 8004e48:	e000      	b.n	8004e4c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004e4a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8004e52:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004e54:	691a      	ldr	r2, [r3, #16]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	4904      	ldr	r1, [pc, #16]	; (8004e6c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	07ff800c 	.word	0x07ff800c
 8004e74:	ff9f800c 	.word	0xff9f800c
 8004e78:	f9ff800c 	.word	0xf9ff800c

08004e7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b03      	cmp	r3, #3
 8004e90:	d018      	beq.n	8004ec4 <RCCEx_PLLSAI2_Config+0x48>
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d81f      	bhi.n	8004ed6 <RCCEx_PLLSAI2_Config+0x5a>
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d002      	beq.n	8004ea0 <RCCEx_PLLSAI2_Config+0x24>
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d009      	beq.n	8004eb2 <RCCEx_PLLSAI2_Config+0x36>
 8004e9e:	e01a      	b.n	8004ed6 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ea0:	4b4a      	ldr	r3, [pc, #296]	; (8004fcc <RCCEx_PLLSAI2_Config+0x150>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d117      	bne.n	8004edc <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eb0:	e014      	b.n	8004edc <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004eb2:	4b46      	ldr	r3, [pc, #280]	; (8004fcc <RCCEx_PLLSAI2_Config+0x150>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d110      	bne.n	8004ee0 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ec2:	e00d      	b.n	8004ee0 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004ec4:	4b41      	ldr	r3, [pc, #260]	; (8004fcc <RCCEx_PLLSAI2_Config+0x150>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d109      	bne.n	8004ee4 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ed4:	e006      	b.n	8004ee4 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	73fb      	strb	r3, [r7, #15]
      break;
 8004eda:	e004      	b.n	8004ee6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004edc:	bf00      	nop
 8004ede:	e002      	b.n	8004ee6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004ee0:	bf00      	nop
 8004ee2:	e000      	b.n	8004ee6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004ee4:	bf00      	nop
  }

  if (status == HAL_OK)
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d169      	bne.n	8004fc0 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004eec:	4b37      	ldr	r3, [pc, #220]	; (8004fcc <RCCEx_PLLSAI2_Config+0x150>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a36      	ldr	r2, [pc, #216]	; (8004fcc <RCCEx_PLLSAI2_Config+0x150>)
 8004ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ef6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef8:	f7fc fda2 	bl	8001a40 <HAL_GetTick>
 8004efc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004efe:	e00f      	b.n	8004f20 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f00:	f7fc fd9e 	bl	8001a40 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d908      	bls.n	8004f20 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f0e:	4b2f      	ldr	r3, [pc, #188]	; (8004fcc <RCCEx_PLLSAI2_Config+0x150>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d009      	beq.n	8004f2e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f1e:	e006      	b.n	8004f2e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f20:	4b2a      	ldr	r3, [pc, #168]	; (8004fcc <RCCEx_PLLSAI2_Config+0x150>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1e9      	bne.n	8004f00 <RCCEx_PLLSAI2_Config+0x84>
 8004f2c:	e000      	b.n	8004f30 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8004f2e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d144      	bne.n	8004fc0 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d115      	bne.n	8004f68 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f3c:	4b23      	ldr	r3, [pc, #140]	; (8004fcc <RCCEx_PLLSAI2_Config+0x150>)
 8004f3e:	695a      	ldr	r2, [r3, #20]
 8004f40:	4b23      	ldr	r3, [pc, #140]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x154>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6892      	ldr	r2, [r2, #8]
 8004f48:	0211      	lsls	r1, r2, #8
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	68d2      	ldr	r2, [r2, #12]
 8004f4e:	06d2      	lsls	r2, r2, #27
 8004f50:	4311      	orrs	r1, r2
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6852      	ldr	r2, [r2, #4]
 8004f56:	3a01      	subs	r2, #1
 8004f58:	0112      	lsls	r2, r2, #4
 8004f5a:	4311      	orrs	r1, r2
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6812      	ldr	r2, [r2, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	491a      	ldr	r1, [pc, #104]	; (8004fcc <RCCEx_PLLSAI2_Config+0x150>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f68:	4b18      	ldr	r3, [pc, #96]	; (8004fcc <RCCEx_PLLSAI2_Config+0x150>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a17      	ldr	r2, [pc, #92]	; (8004fcc <RCCEx_PLLSAI2_Config+0x150>)
 8004f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f74:	f7fc fd64 	bl	8001a40 <HAL_GetTick>
 8004f78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f7a:	e00f      	b.n	8004f9c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f7c:	f7fc fd60 	bl	8001a40 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d908      	bls.n	8004f9c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f8a:	4b10      	ldr	r3, [pc, #64]	; (8004fcc <RCCEx_PLLSAI2_Config+0x150>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d109      	bne.n	8004faa <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004f9a:	e006      	b.n	8004faa <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <RCCEx_PLLSAI2_Config+0x150>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0e9      	beq.n	8004f7c <RCCEx_PLLSAI2_Config+0x100>
 8004fa8:	e000      	b.n	8004fac <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004faa:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d106      	bne.n	8004fc0 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004fb2:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <RCCEx_PLLSAI2_Config+0x150>)
 8004fb4:	695a      	ldr	r2, [r3, #20]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	4904      	ldr	r1, [pc, #16]	; (8004fcc <RCCEx_PLLSAI2_Config+0x150>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	07ff800c 	.word	0x07ff800c

08004fd4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d05c      	beq.n	80050a0 <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fc faf4 	bl	80015e8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005008:	4b28      	ldr	r3, [pc, #160]	; (80050ac <HAL_RTC_Init+0xd8>)
 800500a:	22ca      	movs	r2, #202	; 0xca
 800500c:	625a      	str	r2, [r3, #36]	; 0x24
 800500e:	4b27      	ldr	r3, [pc, #156]	; (80050ac <HAL_RTC_Init+0xd8>)
 8005010:	2253      	movs	r2, #83	; 0x53
 8005012:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f871 	bl	80050fc <RTC_EnterInitMode>
 800501a:	4603      	mov	r3, r0
 800501c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d133      	bne.n	800508c <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005024:	4b21      	ldr	r3, [pc, #132]	; (80050ac <HAL_RTC_Init+0xd8>)
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	4a20      	ldr	r2, [pc, #128]	; (80050ac <HAL_RTC_Init+0xd8>)
 800502a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800502e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005032:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005034:	4b1d      	ldr	r3, [pc, #116]	; (80050ac <HAL_RTC_Init+0xd8>)
 8005036:	699a      	ldr	r2, [r3, #24]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6859      	ldr	r1, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	4319      	orrs	r1, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	430b      	orrs	r3, r1
 8005048:	4918      	ldr	r1, [pc, #96]	; (80050ac <HAL_RTC_Init+0xd8>)
 800504a:	4313      	orrs	r3, r2
 800504c:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	041b      	lsls	r3, r3, #16
 8005058:	4914      	ldr	r1, [pc, #80]	; (80050ac <HAL_RTC_Init+0xd8>)
 800505a:	4313      	orrs	r3, r2
 800505c:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f880 	bl	8005164 <RTC_ExitInitMode>
 8005064:	4603      	mov	r3, r0
 8005066:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10e      	bne.n	800508c <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 800506e:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <HAL_RTC_Init+0xd8>)
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a19      	ldr	r1, [r3, #32]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	4319      	orrs	r1, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	430b      	orrs	r3, r1
 8005086:	4909      	ldr	r1, [pc, #36]	; (80050ac <HAL_RTC_Init+0xd8>)
 8005088:	4313      	orrs	r3, r2
 800508a:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800508c:	4b07      	ldr	r3, [pc, #28]	; (80050ac <HAL_RTC_Init+0xd8>)
 800508e:	22ff      	movs	r2, #255	; 0xff
 8005090:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8005092:	7bfb      	ldrb	r3, [r7, #15]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d103      	bne.n	80050a0 <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	40002800 	.word	0x40002800

080050b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80050b8:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <HAL_RTC_WaitForSynchro+0x48>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	4a0e      	ldr	r2, [pc, #56]	; (80050f8 <HAL_RTC_WaitForSynchro+0x48>)
 80050be:	f023 0320 	bic.w	r3, r3, #32
 80050c2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80050c4:	f7fc fcbc 	bl	8001a40 <HAL_GetTick>
 80050c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80050ca:	e009      	b.n	80050e0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80050cc:	f7fc fcb8 	bl	8001a40 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050da:	d901      	bls.n	80050e0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e006      	b.n	80050ee <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80050e0:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <HAL_RTC_WaitForSynchro+0x48>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f003 0320 	and.w	r3, r3, #32
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0ef      	beq.n	80050cc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40002800 	.word	0x40002800

080050fc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005108:	4b15      	ldr	r3, [pc, #84]	; (8005160 <RTC_EnterInitMode+0x64>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005110:	2b00      	cmp	r3, #0
 8005112:	d120      	bne.n	8005156 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005114:	4b12      	ldr	r3, [pc, #72]	; (8005160 <RTC_EnterInitMode+0x64>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	4a11      	ldr	r2, [pc, #68]	; (8005160 <RTC_EnterInitMode+0x64>)
 800511a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800511e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005120:	f7fc fc8e 	bl	8001a40 <HAL_GetTick>
 8005124:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005126:	e00d      	b.n	8005144 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005128:	f7fc fc8a 	bl	8001a40 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005136:	d905      	bls.n	8005144 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2203      	movs	r2, #3
 8005140:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005144:	4b06      	ldr	r3, [pc, #24]	; (8005160 <RTC_EnterInitMode+0x64>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d102      	bne.n	8005156 <RTC_EnterInitMode+0x5a>
 8005150:	7bfb      	ldrb	r3, [r7, #15]
 8005152:	2b03      	cmp	r3, #3
 8005154:	d1e8      	bne.n	8005128 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005156:	7bfb      	ldrb	r3, [r7, #15]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40002800 	.word	0x40002800

08005164 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005170:	4b1a      	ldr	r3, [pc, #104]	; (80051dc <RTC_ExitInitMode+0x78>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	4a19      	ldr	r2, [pc, #100]	; (80051dc <RTC_ExitInitMode+0x78>)
 8005176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800517a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800517c:	4b17      	ldr	r3, [pc, #92]	; (80051dc <RTC_ExitInitMode+0x78>)
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	f003 0320 	and.w	r3, r3, #32
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10c      	bne.n	80051a2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7ff ff91 	bl	80050b0 <HAL_RTC_WaitForSynchro>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01e      	beq.n	80051d2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2203      	movs	r2, #3
 8005198:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	73fb      	strb	r3, [r7, #15]
 80051a0:	e017      	b.n	80051d2 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80051a2:	4b0e      	ldr	r3, [pc, #56]	; (80051dc <RTC_ExitInitMode+0x78>)
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	4a0d      	ldr	r2, [pc, #52]	; (80051dc <RTC_ExitInitMode+0x78>)
 80051a8:	f023 0320 	bic.w	r3, r3, #32
 80051ac:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff ff7e 	bl	80050b0 <HAL_RTC_WaitForSynchro>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2203      	movs	r2, #3
 80051be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80051c6:	4b05      	ldr	r3, [pc, #20]	; (80051dc <RTC_ExitInitMode+0x78>)
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	4a04      	ldr	r2, [pc, #16]	; (80051dc <RTC_ExitInitMode+0x78>)
 80051cc:	f043 0320 	orr.w	r3, r3, #32
 80051d0:	6193      	str	r3, [r2, #24]
  }

  return status;
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40002800 	.word	0x40002800

080051e0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	490f      	ldr	r1, [pc, #60]	; (8005230 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	490c      	ldr	r1, [pc, #48]	; (8005234 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005202:	4313      	orrs	r3, r2
 8005204:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8005206:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6919      	ldr	r1, [r3, #16]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	041b      	lsls	r3, r3, #16
 8005218:	430b      	orrs	r3, r1
 800521a:	4906      	ldr	r1, [pc, #24]	; (8005234 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800521c:	4313      	orrs	r3, r2
 800521e:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40002800 	.word	0x40002800
 8005234:	40003400 	.word	0x40003400

08005238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e049      	b.n	80052de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d106      	bne.n	8005264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f841 	bl	80052e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3304      	adds	r3, #4
 8005274:	4619      	mov	r1, r3
 8005276:	4610      	mov	r0, r2
 8005278:	f000 f9f8 	bl	800566c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
	...

080052fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b01      	cmp	r3, #1
 800530e:	d001      	beq.n	8005314 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e04f      	b.n	80053b4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0201 	orr.w	r2, r2, #1
 800532a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a23      	ldr	r2, [pc, #140]	; (80053c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d01d      	beq.n	8005372 <HAL_TIM_Base_Start_IT+0x76>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800533e:	d018      	beq.n	8005372 <HAL_TIM_Base_Start_IT+0x76>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a1f      	ldr	r2, [pc, #124]	; (80053c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d013      	beq.n	8005372 <HAL_TIM_Base_Start_IT+0x76>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a1e      	ldr	r2, [pc, #120]	; (80053c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d00e      	beq.n	8005372 <HAL_TIM_Base_Start_IT+0x76>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a1c      	ldr	r2, [pc, #112]	; (80053cc <HAL_TIM_Base_Start_IT+0xd0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d009      	beq.n	8005372 <HAL_TIM_Base_Start_IT+0x76>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a1b      	ldr	r2, [pc, #108]	; (80053d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d004      	beq.n	8005372 <HAL_TIM_Base_Start_IT+0x76>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a19      	ldr	r2, [pc, #100]	; (80053d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d115      	bne.n	800539e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	4b17      	ldr	r3, [pc, #92]	; (80053d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800537a:	4013      	ands	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b06      	cmp	r3, #6
 8005382:	d015      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0xb4>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800538a:	d011      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0201 	orr.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539c:	e008      	b.n	80053b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f042 0201 	orr.w	r2, r2, #1
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	e000      	b.n	80053b2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	40012c00 	.word	0x40012c00
 80053c4:	40000400 	.word	0x40000400
 80053c8:	40000800 	.word	0x40000800
 80053cc:	40000c00 	.word	0x40000c00
 80053d0:	40013400 	.word	0x40013400
 80053d4:	40014000 	.word	0x40014000
 80053d8:	00010007 	.word	0x00010007

080053dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d122      	bne.n	8005438 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d11b      	bne.n	8005438 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0202 	mvn.w	r2, #2
 8005408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f905 	bl	800562e <HAL_TIM_IC_CaptureCallback>
 8005424:	e005      	b.n	8005432 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f8f7 	bl	800561a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f908 	bl	8005642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b04      	cmp	r3, #4
 8005444:	d122      	bne.n	800548c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b04      	cmp	r3, #4
 8005452:	d11b      	bne.n	800548c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0204 	mvn.w	r2, #4
 800545c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2202      	movs	r2, #2
 8005462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f8db 	bl	800562e <HAL_TIM_IC_CaptureCallback>
 8005478:	e005      	b.n	8005486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f8cd 	bl	800561a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f8de 	bl	8005642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b08      	cmp	r3, #8
 8005498:	d122      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d11b      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0208 	mvn.w	r2, #8
 80054b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2204      	movs	r2, #4
 80054b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f8b1 	bl	800562e <HAL_TIM_IC_CaptureCallback>
 80054cc:	e005      	b.n	80054da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f8a3 	bl	800561a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f8b4 	bl	8005642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0310 	and.w	r3, r3, #16
 80054ea:	2b10      	cmp	r3, #16
 80054ec:	d122      	bne.n	8005534 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f003 0310 	and.w	r3, r3, #16
 80054f8:	2b10      	cmp	r3, #16
 80054fa:	d11b      	bne.n	8005534 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f06f 0210 	mvn.w	r2, #16
 8005504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2208      	movs	r2, #8
 800550a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f887 	bl	800562e <HAL_TIM_IC_CaptureCallback>
 8005520:	e005      	b.n	800552e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f879 	bl	800561a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f88a 	bl	8005642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b01      	cmp	r3, #1
 8005540:	d10e      	bne.n	8005560 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b01      	cmp	r3, #1
 800554e:	d107      	bne.n	8005560 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f06f 0201 	mvn.w	r2, #1
 8005558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7fb fe6c 	bl	8001238 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556a:	2b80      	cmp	r3, #128	; 0x80
 800556c:	d10e      	bne.n	800558c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005578:	2b80      	cmp	r3, #128	; 0x80
 800557a:	d107      	bne.n	800558c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f914 	bl	80057b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800559a:	d10e      	bne.n	80055ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a6:	2b80      	cmp	r3, #128	; 0x80
 80055a8:	d107      	bne.n	80055ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80055b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f907 	bl	80057c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c4:	2b40      	cmp	r3, #64	; 0x40
 80055c6:	d10e      	bne.n	80055e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d2:	2b40      	cmp	r3, #64	; 0x40
 80055d4:	d107      	bne.n	80055e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f838 	bl	8005656 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	d10e      	bne.n	8005612 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f003 0320 	and.w	r3, r3, #32
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d107      	bne.n	8005612 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f06f 0220 	mvn.w	r2, #32
 800560a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f8c7 	bl	80057a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005612:	bf00      	nop
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
	...

0800566c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a40      	ldr	r2, [pc, #256]	; (8005780 <TIM_Base_SetConfig+0x114>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d013      	beq.n	80056ac <TIM_Base_SetConfig+0x40>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800568a:	d00f      	beq.n	80056ac <TIM_Base_SetConfig+0x40>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a3d      	ldr	r2, [pc, #244]	; (8005784 <TIM_Base_SetConfig+0x118>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00b      	beq.n	80056ac <TIM_Base_SetConfig+0x40>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a3c      	ldr	r2, [pc, #240]	; (8005788 <TIM_Base_SetConfig+0x11c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d007      	beq.n	80056ac <TIM_Base_SetConfig+0x40>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a3b      	ldr	r2, [pc, #236]	; (800578c <TIM_Base_SetConfig+0x120>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d003      	beq.n	80056ac <TIM_Base_SetConfig+0x40>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a3a      	ldr	r2, [pc, #232]	; (8005790 <TIM_Base_SetConfig+0x124>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d108      	bne.n	80056be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a2f      	ldr	r2, [pc, #188]	; (8005780 <TIM_Base_SetConfig+0x114>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d01f      	beq.n	8005706 <TIM_Base_SetConfig+0x9a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056cc:	d01b      	beq.n	8005706 <TIM_Base_SetConfig+0x9a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a2c      	ldr	r2, [pc, #176]	; (8005784 <TIM_Base_SetConfig+0x118>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d017      	beq.n	8005706 <TIM_Base_SetConfig+0x9a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a2b      	ldr	r2, [pc, #172]	; (8005788 <TIM_Base_SetConfig+0x11c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d013      	beq.n	8005706 <TIM_Base_SetConfig+0x9a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a2a      	ldr	r2, [pc, #168]	; (800578c <TIM_Base_SetConfig+0x120>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00f      	beq.n	8005706 <TIM_Base_SetConfig+0x9a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a29      	ldr	r2, [pc, #164]	; (8005790 <TIM_Base_SetConfig+0x124>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00b      	beq.n	8005706 <TIM_Base_SetConfig+0x9a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a28      	ldr	r2, [pc, #160]	; (8005794 <TIM_Base_SetConfig+0x128>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d007      	beq.n	8005706 <TIM_Base_SetConfig+0x9a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a27      	ldr	r2, [pc, #156]	; (8005798 <TIM_Base_SetConfig+0x12c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d003      	beq.n	8005706 <TIM_Base_SetConfig+0x9a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a26      	ldr	r2, [pc, #152]	; (800579c <TIM_Base_SetConfig+0x130>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d108      	bne.n	8005718 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4313      	orrs	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a10      	ldr	r2, [pc, #64]	; (8005780 <TIM_Base_SetConfig+0x114>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00f      	beq.n	8005764 <TIM_Base_SetConfig+0xf8>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a12      	ldr	r2, [pc, #72]	; (8005790 <TIM_Base_SetConfig+0x124>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d00b      	beq.n	8005764 <TIM_Base_SetConfig+0xf8>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a11      	ldr	r2, [pc, #68]	; (8005794 <TIM_Base_SetConfig+0x128>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d007      	beq.n	8005764 <TIM_Base_SetConfig+0xf8>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a10      	ldr	r2, [pc, #64]	; (8005798 <TIM_Base_SetConfig+0x12c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d003      	beq.n	8005764 <TIM_Base_SetConfig+0xf8>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a0f      	ldr	r2, [pc, #60]	; (800579c <TIM_Base_SetConfig+0x130>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d103      	bne.n	800576c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	615a      	str	r2, [r3, #20]
}
 8005772:	bf00      	nop
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40012c00 	.word	0x40012c00
 8005784:	40000400 	.word	0x40000400
 8005788:	40000800 	.word	0x40000800
 800578c:	40000c00 	.word	0x40000c00
 8005790:	40013400 	.word	0x40013400
 8005794:	40014000 	.word	0x40014000
 8005798:	40014400 	.word	0x40014400
 800579c:	40014800 	.word	0x40014800

080057a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e042      	b.n	8005874 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d106      	bne.n	8005806 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7fb fe4b 	bl	800149c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2224      	movs	r2, #36	; 0x24
 800580a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0201 	bic.w	r2, r2, #1
 800581c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f996 	bl	8005b50 <UART_SetConfig>
 8005824:	4603      	mov	r3, r0
 8005826:	2b01      	cmp	r3, #1
 8005828:	d101      	bne.n	800582e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e022      	b.n	8005874 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005832:	2b00      	cmp	r3, #0
 8005834:	d002      	beq.n	800583c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fc8a 	bl	8006150 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800584a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689a      	ldr	r2, [r3, #8]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800585a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0201 	orr.w	r2, r2, #1
 800586a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fd11 	bl	8006294 <UART_CheckIdleState>
 8005872:	4603      	mov	r3, r0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	; 0x28
 8005880:	af02      	add	r7, sp, #8
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	4613      	mov	r3, r2
 800588a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005892:	2b20      	cmp	r3, #32
 8005894:	f040 8083 	bne.w	800599e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <HAL_UART_Transmit+0x28>
 800589e:	88fb      	ldrh	r3, [r7, #6]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e07b      	b.n	80059a0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d101      	bne.n	80058b6 <HAL_UART_Transmit+0x3a>
 80058b2:	2302      	movs	r3, #2
 80058b4:	e074      	b.n	80059a0 <HAL_UART_Transmit+0x124>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2221      	movs	r2, #33	; 0x21
 80058ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058ce:	f7fc f8b7 	bl	8001a40 <HAL_GetTick>
 80058d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	88fa      	ldrh	r2, [r7, #6]
 80058d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	88fa      	ldrh	r2, [r7, #6]
 80058e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ec:	d108      	bne.n	8005900 <HAL_UART_Transmit+0x84>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d104      	bne.n	8005900 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	e003      	b.n	8005908 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005904:	2300      	movs	r3, #0
 8005906:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005910:	e02c      	b.n	800596c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2200      	movs	r2, #0
 800591a:	2180      	movs	r1, #128	; 0x80
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 fd04 	bl	800632a <UART_WaitOnFlagUntilTimeout>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e039      	b.n	80059a0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10b      	bne.n	800594a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005940:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	3302      	adds	r3, #2
 8005946:	61bb      	str	r3, [r7, #24]
 8005948:	e007      	b.n	800595a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	781a      	ldrb	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	3301      	adds	r3, #1
 8005958:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005960:	b29b      	uxth	r3, r3
 8005962:	3b01      	subs	r3, #1
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005972:	b29b      	uxth	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1cc      	bne.n	8005912 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2200      	movs	r2, #0
 8005980:	2140      	movs	r1, #64	; 0x40
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 fcd1 	bl	800632a <UART_WaitOnFlagUntilTimeout>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e006      	b.n	80059a0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2220      	movs	r2, #32
 8005996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	e000      	b.n	80059a0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800599e:	2302      	movs	r3, #2
  }
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3720      	adds	r7, #32
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08a      	sub	sp, #40	; 0x28
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	603b      	str	r3, [r7, #0]
 80059b4:	4613      	mov	r3, r2
 80059b6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059be:	2b20      	cmp	r3, #32
 80059c0:	f040 80c0 	bne.w	8005b44 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <HAL_UART_Receive+0x28>
 80059ca:	88fb      	ldrh	r3, [r7, #6]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e0b8      	b.n	8005b46 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_UART_Receive+0x3a>
 80059de:	2302      	movs	r3, #2
 80059e0:	e0b1      	b.n	8005b46 <HAL_UART_Receive+0x19e>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2222      	movs	r2, #34	; 0x22
 80059f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a00:	f7fc f81e 	bl	8001a40 <HAL_GetTick>
 8005a04:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	88fa      	ldrh	r2, [r7, #6]
 8005a0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	88fa      	ldrh	r2, [r7, #6]
 8005a12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a1e:	d10e      	bne.n	8005a3e <HAL_UART_Receive+0x96>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d105      	bne.n	8005a34 <HAL_UART_Receive+0x8c>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a32:	e02d      	b.n	8005a90 <HAL_UART_Receive+0xe8>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	22ff      	movs	r2, #255	; 0xff
 8005a38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a3c:	e028      	b.n	8005a90 <HAL_UART_Receive+0xe8>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10d      	bne.n	8005a62 <HAL_UART_Receive+0xba>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d104      	bne.n	8005a58 <HAL_UART_Receive+0xb0>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	22ff      	movs	r2, #255	; 0xff
 8005a52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a56:	e01b      	b.n	8005a90 <HAL_UART_Receive+0xe8>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	227f      	movs	r2, #127	; 0x7f
 8005a5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a60:	e016      	b.n	8005a90 <HAL_UART_Receive+0xe8>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a6a:	d10d      	bne.n	8005a88 <HAL_UART_Receive+0xe0>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d104      	bne.n	8005a7e <HAL_UART_Receive+0xd6>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	227f      	movs	r2, #127	; 0x7f
 8005a78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a7c:	e008      	b.n	8005a90 <HAL_UART_Receive+0xe8>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	223f      	movs	r2, #63	; 0x3f
 8005a82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a86:	e003      	b.n	8005a90 <HAL_UART_Receive+0xe8>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a96:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa0:	d108      	bne.n	8005ab4 <HAL_UART_Receive+0x10c>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d104      	bne.n	8005ab4 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	61bb      	str	r3, [r7, #24]
 8005ab2:	e003      	b.n	8005abc <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005ac4:	e032      	b.n	8005b2c <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2200      	movs	r2, #0
 8005ace:	2120      	movs	r1, #32
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 fc2a 	bl	800632a <UART_WaitOnFlagUntilTimeout>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e032      	b.n	8005b46 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10c      	bne.n	8005b00 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	8a7b      	ldrh	r3, [r7, #18]
 8005af0:	4013      	ands	r3, r2
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	3302      	adds	r3, #2
 8005afc:	61bb      	str	r3, [r7, #24]
 8005afe:	e00c      	b.n	8005b1a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	8a7b      	ldrh	r3, [r7, #18]
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	3301      	adds	r3, #1
 8005b18:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	3b01      	subs	r3, #1
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1c6      	bne.n	8005ac6 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	e000      	b.n	8005b46 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8005b44:	2302      	movs	r3, #2
  }
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3720      	adds	r7, #32
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
	...

08005b50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b54:	b08c      	sub	sp, #48	; 0x30
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	4baa      	ldr	r3, [pc, #680]	; (8005e28 <UART_SetConfig+0x2d8>)
 8005b80:	4013      	ands	r3, r2
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	6812      	ldr	r2, [r2, #0]
 8005b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b88:	430b      	orrs	r3, r1
 8005b8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a9f      	ldr	r2, [pc, #636]	; (8005e2c <UART_SetConfig+0x2dc>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d004      	beq.n	8005bbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005bc6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	6812      	ldr	r2, [r2, #0]
 8005bce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bda:	f023 010f 	bic.w	r1, r3, #15
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a90      	ldr	r2, [pc, #576]	; (8005e30 <UART_SetConfig+0x2e0>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d125      	bne.n	8005c40 <UART_SetConfig+0xf0>
 8005bf4:	4b8f      	ldr	r3, [pc, #572]	; (8005e34 <UART_SetConfig+0x2e4>)
 8005bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	d81a      	bhi.n	8005c38 <UART_SetConfig+0xe8>
 8005c02:	a201      	add	r2, pc, #4	; (adr r2, 8005c08 <UART_SetConfig+0xb8>)
 8005c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c08:	08005c19 	.word	0x08005c19
 8005c0c:	08005c29 	.word	0x08005c29
 8005c10:	08005c21 	.word	0x08005c21
 8005c14:	08005c31 	.word	0x08005c31
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c1e:	e116      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005c20:	2302      	movs	r3, #2
 8005c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c26:	e112      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005c28:	2304      	movs	r3, #4
 8005c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c2e:	e10e      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005c30:	2308      	movs	r3, #8
 8005c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c36:	e10a      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005c38:	2310      	movs	r3, #16
 8005c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c3e:	e106      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a7c      	ldr	r2, [pc, #496]	; (8005e38 <UART_SetConfig+0x2e8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d138      	bne.n	8005cbc <UART_SetConfig+0x16c>
 8005c4a:	4b7a      	ldr	r3, [pc, #488]	; (8005e34 <UART_SetConfig+0x2e4>)
 8005c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c50:	f003 030c 	and.w	r3, r3, #12
 8005c54:	2b0c      	cmp	r3, #12
 8005c56:	d82d      	bhi.n	8005cb4 <UART_SetConfig+0x164>
 8005c58:	a201      	add	r2, pc, #4	; (adr r2, 8005c60 <UART_SetConfig+0x110>)
 8005c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5e:	bf00      	nop
 8005c60:	08005c95 	.word	0x08005c95
 8005c64:	08005cb5 	.word	0x08005cb5
 8005c68:	08005cb5 	.word	0x08005cb5
 8005c6c:	08005cb5 	.word	0x08005cb5
 8005c70:	08005ca5 	.word	0x08005ca5
 8005c74:	08005cb5 	.word	0x08005cb5
 8005c78:	08005cb5 	.word	0x08005cb5
 8005c7c:	08005cb5 	.word	0x08005cb5
 8005c80:	08005c9d 	.word	0x08005c9d
 8005c84:	08005cb5 	.word	0x08005cb5
 8005c88:	08005cb5 	.word	0x08005cb5
 8005c8c:	08005cb5 	.word	0x08005cb5
 8005c90:	08005cad 	.word	0x08005cad
 8005c94:	2300      	movs	r3, #0
 8005c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c9a:	e0d8      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ca2:	e0d4      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005ca4:	2304      	movs	r3, #4
 8005ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005caa:	e0d0      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005cac:	2308      	movs	r3, #8
 8005cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cb2:	e0cc      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005cb4:	2310      	movs	r3, #16
 8005cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cba:	e0c8      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a5e      	ldr	r2, [pc, #376]	; (8005e3c <UART_SetConfig+0x2ec>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d125      	bne.n	8005d12 <UART_SetConfig+0x1c2>
 8005cc6:	4b5b      	ldr	r3, [pc, #364]	; (8005e34 <UART_SetConfig+0x2e4>)
 8005cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ccc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005cd0:	2b30      	cmp	r3, #48	; 0x30
 8005cd2:	d016      	beq.n	8005d02 <UART_SetConfig+0x1b2>
 8005cd4:	2b30      	cmp	r3, #48	; 0x30
 8005cd6:	d818      	bhi.n	8005d0a <UART_SetConfig+0x1ba>
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	d00a      	beq.n	8005cf2 <UART_SetConfig+0x1a2>
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d814      	bhi.n	8005d0a <UART_SetConfig+0x1ba>
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <UART_SetConfig+0x19a>
 8005ce4:	2b10      	cmp	r3, #16
 8005ce6:	d008      	beq.n	8005cfa <UART_SetConfig+0x1aa>
 8005ce8:	e00f      	b.n	8005d0a <UART_SetConfig+0x1ba>
 8005cea:	2300      	movs	r3, #0
 8005cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cf0:	e0ad      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cf8:	e0a9      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005cfa:	2304      	movs	r3, #4
 8005cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d00:	e0a5      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005d02:	2308      	movs	r3, #8
 8005d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d08:	e0a1      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005d0a:	2310      	movs	r3, #16
 8005d0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d10:	e09d      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a4a      	ldr	r2, [pc, #296]	; (8005e40 <UART_SetConfig+0x2f0>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d125      	bne.n	8005d68 <UART_SetConfig+0x218>
 8005d1c:	4b45      	ldr	r3, [pc, #276]	; (8005e34 <UART_SetConfig+0x2e4>)
 8005d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d26:	2bc0      	cmp	r3, #192	; 0xc0
 8005d28:	d016      	beq.n	8005d58 <UART_SetConfig+0x208>
 8005d2a:	2bc0      	cmp	r3, #192	; 0xc0
 8005d2c:	d818      	bhi.n	8005d60 <UART_SetConfig+0x210>
 8005d2e:	2b80      	cmp	r3, #128	; 0x80
 8005d30:	d00a      	beq.n	8005d48 <UART_SetConfig+0x1f8>
 8005d32:	2b80      	cmp	r3, #128	; 0x80
 8005d34:	d814      	bhi.n	8005d60 <UART_SetConfig+0x210>
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <UART_SetConfig+0x1f0>
 8005d3a:	2b40      	cmp	r3, #64	; 0x40
 8005d3c:	d008      	beq.n	8005d50 <UART_SetConfig+0x200>
 8005d3e:	e00f      	b.n	8005d60 <UART_SetConfig+0x210>
 8005d40:	2300      	movs	r3, #0
 8005d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d46:	e082      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d4e:	e07e      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005d50:	2304      	movs	r3, #4
 8005d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d56:	e07a      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005d58:	2308      	movs	r3, #8
 8005d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d5e:	e076      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005d60:	2310      	movs	r3, #16
 8005d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d66:	e072      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a35      	ldr	r2, [pc, #212]	; (8005e44 <UART_SetConfig+0x2f4>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d12a      	bne.n	8005dc8 <UART_SetConfig+0x278>
 8005d72:	4b30      	ldr	r3, [pc, #192]	; (8005e34 <UART_SetConfig+0x2e4>)
 8005d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d80:	d01a      	beq.n	8005db8 <UART_SetConfig+0x268>
 8005d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d86:	d81b      	bhi.n	8005dc0 <UART_SetConfig+0x270>
 8005d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d8c:	d00c      	beq.n	8005da8 <UART_SetConfig+0x258>
 8005d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d92:	d815      	bhi.n	8005dc0 <UART_SetConfig+0x270>
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <UART_SetConfig+0x250>
 8005d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d9c:	d008      	beq.n	8005db0 <UART_SetConfig+0x260>
 8005d9e:	e00f      	b.n	8005dc0 <UART_SetConfig+0x270>
 8005da0:	2300      	movs	r3, #0
 8005da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005da6:	e052      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005da8:	2302      	movs	r3, #2
 8005daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dae:	e04e      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005db0:	2304      	movs	r3, #4
 8005db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005db6:	e04a      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005db8:	2308      	movs	r3, #8
 8005dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dbe:	e046      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005dc0:	2310      	movs	r3, #16
 8005dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dc6:	e042      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a17      	ldr	r2, [pc, #92]	; (8005e2c <UART_SetConfig+0x2dc>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d13a      	bne.n	8005e48 <UART_SetConfig+0x2f8>
 8005dd2:	4b18      	ldr	r3, [pc, #96]	; (8005e34 <UART_SetConfig+0x2e4>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ddc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005de0:	d01a      	beq.n	8005e18 <UART_SetConfig+0x2c8>
 8005de2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005de6:	d81b      	bhi.n	8005e20 <UART_SetConfig+0x2d0>
 8005de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dec:	d00c      	beq.n	8005e08 <UART_SetConfig+0x2b8>
 8005dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005df2:	d815      	bhi.n	8005e20 <UART_SetConfig+0x2d0>
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d003      	beq.n	8005e00 <UART_SetConfig+0x2b0>
 8005df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dfc:	d008      	beq.n	8005e10 <UART_SetConfig+0x2c0>
 8005dfe:	e00f      	b.n	8005e20 <UART_SetConfig+0x2d0>
 8005e00:	2300      	movs	r3, #0
 8005e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e06:	e022      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e0e:	e01e      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005e10:	2304      	movs	r3, #4
 8005e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e16:	e01a      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005e18:	2308      	movs	r3, #8
 8005e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e1e:	e016      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005e20:	2310      	movs	r3, #16
 8005e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e26:	e012      	b.n	8005e4e <UART_SetConfig+0x2fe>
 8005e28:	cfff69f3 	.word	0xcfff69f3
 8005e2c:	40008000 	.word	0x40008000
 8005e30:	40013800 	.word	0x40013800
 8005e34:	40021000 	.word	0x40021000
 8005e38:	40004400 	.word	0x40004400
 8005e3c:	40004800 	.word	0x40004800
 8005e40:	40004c00 	.word	0x40004c00
 8005e44:	40005000 	.word	0x40005000
 8005e48:	2310      	movs	r3, #16
 8005e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4ab0      	ldr	r2, [pc, #704]	; (8006114 <UART_SetConfig+0x5c4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	f040 809b 	bne.w	8005f90 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e5e:	2b08      	cmp	r3, #8
 8005e60:	d827      	bhi.n	8005eb2 <UART_SetConfig+0x362>
 8005e62:	a201      	add	r2, pc, #4	; (adr r2, 8005e68 <UART_SetConfig+0x318>)
 8005e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e68:	08005e8d 	.word	0x08005e8d
 8005e6c:	08005e95 	.word	0x08005e95
 8005e70:	08005e9d 	.word	0x08005e9d
 8005e74:	08005eb3 	.word	0x08005eb3
 8005e78:	08005ea3 	.word	0x08005ea3
 8005e7c:	08005eb3 	.word	0x08005eb3
 8005e80:	08005eb3 	.word	0x08005eb3
 8005e84:	08005eb3 	.word	0x08005eb3
 8005e88:	08005eab 	.word	0x08005eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e8c:	f7fe fa54 	bl	8004338 <HAL_RCC_GetPCLK1Freq>
 8005e90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e92:	e014      	b.n	8005ebe <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e94:	f7fe fa64 	bl	8004360 <HAL_RCC_GetPCLK2Freq>
 8005e98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e9a:	e010      	b.n	8005ebe <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e9c:	4b9e      	ldr	r3, [pc, #632]	; (8006118 <UART_SetConfig+0x5c8>)
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ea0:	e00d      	b.n	8005ebe <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ea2:	f7fe f997 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 8005ea6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ea8:	e009      	b.n	8005ebe <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005eb0:	e005      	b.n	8005ebe <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ebc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 8130 	beq.w	8006126 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	4a94      	ldr	r2, [pc, #592]	; (800611c <UART_SetConfig+0x5cc>)
 8005ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	4413      	add	r3, r2
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d305      	bcc.n	8005ef6 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d903      	bls.n	8005efe <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005efc:	e113      	b.n	8006126 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	2200      	movs	r2, #0
 8005f02:	60bb      	str	r3, [r7, #8]
 8005f04:	60fa      	str	r2, [r7, #12]
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	4a84      	ldr	r2, [pc, #528]	; (800611c <UART_SetConfig+0x5cc>)
 8005f0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	2200      	movs	r2, #0
 8005f14:	603b      	str	r3, [r7, #0]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f20:	f7fa faae 	bl	8000480 <__aeabi_uldivmod>
 8005f24:	4602      	mov	r2, r0
 8005f26:	460b      	mov	r3, r1
 8005f28:	4610      	mov	r0, r2
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	f04f 0300 	mov.w	r3, #0
 8005f34:	020b      	lsls	r3, r1, #8
 8005f36:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f3a:	0202      	lsls	r2, r0, #8
 8005f3c:	6979      	ldr	r1, [r7, #20]
 8005f3e:	6849      	ldr	r1, [r1, #4]
 8005f40:	0849      	lsrs	r1, r1, #1
 8005f42:	2000      	movs	r0, #0
 8005f44:	460c      	mov	r4, r1
 8005f46:	4605      	mov	r5, r0
 8005f48:	eb12 0804 	adds.w	r8, r2, r4
 8005f4c:	eb43 0905 	adc.w	r9, r3, r5
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	469a      	mov	sl, r3
 8005f58:	4693      	mov	fp, r2
 8005f5a:	4652      	mov	r2, sl
 8005f5c:	465b      	mov	r3, fp
 8005f5e:	4640      	mov	r0, r8
 8005f60:	4649      	mov	r1, r9
 8005f62:	f7fa fa8d 	bl	8000480 <__aeabi_uldivmod>
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f74:	d308      	bcc.n	8005f88 <UART_SetConfig+0x438>
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f7c:	d204      	bcs.n	8005f88 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6a3a      	ldr	r2, [r7, #32]
 8005f84:	60da      	str	r2, [r3, #12]
 8005f86:	e0ce      	b.n	8006126 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f8e:	e0ca      	b.n	8006126 <UART_SetConfig+0x5d6>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f98:	d167      	bne.n	800606a <UART_SetConfig+0x51a>
  {
    switch (clocksource)
 8005f9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f9e:	2b08      	cmp	r3, #8
 8005fa0:	d827      	bhi.n	8005ff2 <UART_SetConfig+0x4a2>
 8005fa2:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <UART_SetConfig+0x458>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005fd5 	.word	0x08005fd5
 8005fb0:	08005fdd 	.word	0x08005fdd
 8005fb4:	08005ff3 	.word	0x08005ff3
 8005fb8:	08005fe3 	.word	0x08005fe3
 8005fbc:	08005ff3 	.word	0x08005ff3
 8005fc0:	08005ff3 	.word	0x08005ff3
 8005fc4:	08005ff3 	.word	0x08005ff3
 8005fc8:	08005feb 	.word	0x08005feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fcc:	f7fe f9b4 	bl	8004338 <HAL_RCC_GetPCLK1Freq>
 8005fd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fd2:	e014      	b.n	8005ffe <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fd4:	f7fe f9c4 	bl	8004360 <HAL_RCC_GetPCLK2Freq>
 8005fd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fda:	e010      	b.n	8005ffe <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fdc:	4b4e      	ldr	r3, [pc, #312]	; (8006118 <UART_SetConfig+0x5c8>)
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fe0:	e00d      	b.n	8005ffe <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fe2:	f7fe f8f7 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 8005fe6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fe8:	e009      	b.n	8005ffe <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ff0:	e005      	b.n	8005ffe <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ffc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 8090 	beq.w	8006126 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	4a44      	ldr	r2, [pc, #272]	; (800611c <UART_SetConfig+0x5cc>)
 800600c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006010:	461a      	mov	r2, r3
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	fbb3 f3f2 	udiv	r3, r3, r2
 8006018:	005a      	lsls	r2, r3, #1
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	085b      	lsrs	r3, r3, #1
 8006020:	441a      	add	r2, r3
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	fbb2 f3f3 	udiv	r3, r2, r3
 800602a:	b29b      	uxth	r3, r3
 800602c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	2b0f      	cmp	r3, #15
 8006032:	d916      	bls.n	8006062 <UART_SetConfig+0x512>
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800603a:	d212      	bcs.n	8006062 <UART_SetConfig+0x512>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f023 030f 	bic.w	r3, r3, #15
 8006044:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	085b      	lsrs	r3, r3, #1
 800604a:	b29b      	uxth	r3, r3
 800604c:	f003 0307 	and.w	r3, r3, #7
 8006050:	b29a      	uxth	r2, r3
 8006052:	8bfb      	ldrh	r3, [r7, #30]
 8006054:	4313      	orrs	r3, r2
 8006056:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	8bfa      	ldrh	r2, [r7, #30]
 800605e:	60da      	str	r2, [r3, #12]
 8006060:	e061      	b.n	8006126 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006068:	e05d      	b.n	8006126 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800606a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800606e:	2b08      	cmp	r3, #8
 8006070:	d827      	bhi.n	80060c2 <UART_SetConfig+0x572>
 8006072:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <UART_SetConfig+0x528>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	0800609d 	.word	0x0800609d
 800607c:	080060a5 	.word	0x080060a5
 8006080:	080060ad 	.word	0x080060ad
 8006084:	080060c3 	.word	0x080060c3
 8006088:	080060b3 	.word	0x080060b3
 800608c:	080060c3 	.word	0x080060c3
 8006090:	080060c3 	.word	0x080060c3
 8006094:	080060c3 	.word	0x080060c3
 8006098:	080060bb 	.word	0x080060bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800609c:	f7fe f94c 	bl	8004338 <HAL_RCC_GetPCLK1Freq>
 80060a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060a2:	e014      	b.n	80060ce <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060a4:	f7fe f95c 	bl	8004360 <HAL_RCC_GetPCLK2Freq>
 80060a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060aa:	e010      	b.n	80060ce <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060ac:	4b1a      	ldr	r3, [pc, #104]	; (8006118 <UART_SetConfig+0x5c8>)
 80060ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060b0:	e00d      	b.n	80060ce <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060b2:	f7fe f88f 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 80060b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060b8:	e009      	b.n	80060ce <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060c0:	e005      	b.n	80060ce <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80060cc:	bf00      	nop
    }

    if (pclk != 0U)
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d028      	beq.n	8006126 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	4a10      	ldr	r2, [pc, #64]	; (800611c <UART_SetConfig+0x5cc>)
 80060da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060de:	461a      	mov	r2, r3
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	085b      	lsrs	r3, r3, #1
 80060ec:	441a      	add	r2, r3
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	2b0f      	cmp	r3, #15
 80060fe:	d90f      	bls.n	8006120 <UART_SetConfig+0x5d0>
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006106:	d20b      	bcs.n	8006120 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = usartdiv;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6a3a      	ldr	r2, [r7, #32]
 800610e:	60da      	str	r2, [r3, #12]
 8006110:	e009      	b.n	8006126 <UART_SetConfig+0x5d6>
 8006112:	bf00      	nop
 8006114:	40008000 	.word	0x40008000
 8006118:	00f42400 	.word	0x00f42400
 800611c:	080087c0 	.word	0x080087c0
      }
      else
      {
        ret = HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2201      	movs	r2, #1
 800612a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2201      	movs	r2, #1
 8006132:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2200      	movs	r2, #0
 800613a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	2200      	movs	r2, #0
 8006140:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006142:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006146:	4618      	mov	r0, r3
 8006148:	3730      	adds	r7, #48	; 0x30
 800614a:	46bd      	mov	sp, r7
 800614c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006150 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00a      	beq.n	800617a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00a      	beq.n	80061be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c2:	f003 0308 	and.w	r3, r3, #8
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e4:	f003 0310 	and.w	r3, r3, #16
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00a      	beq.n	8006202 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006206:	f003 0320 	and.w	r3, r3, #32
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01a      	beq.n	8006266 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800624e:	d10a      	bne.n	8006266 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	605a      	str	r2, [r3, #4]
  }
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af02      	add	r7, sp, #8
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062a4:	f7fb fbcc 	bl	8001a40 <HAL_GetTick>
 80062a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d10e      	bne.n	80062d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f82f 	bl	800632a <UART_WaitOnFlagUntilTimeout>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e025      	b.n	8006322 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	d10e      	bne.n	8006302 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f819 	bl	800632a <UART_WaitOnFlagUntilTimeout>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e00f      	b.n	8006322 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2220      	movs	r2, #32
 8006306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2220      	movs	r2, #32
 800630e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	603b      	str	r3, [r7, #0]
 8006336:	4613      	mov	r3, r2
 8006338:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800633a:	e062      	b.n	8006402 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006342:	d05e      	beq.n	8006402 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006344:	f7fb fb7c 	bl	8001a40 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	429a      	cmp	r2, r3
 8006352:	d302      	bcc.n	800635a <UART_WaitOnFlagUntilTimeout+0x30>
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d11d      	bne.n	8006396 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006368:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0201 	bic.w	r2, r2, #1
 8006378:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2220      	movs	r2, #32
 800637e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2220      	movs	r2, #32
 8006386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e045      	b.n	8006422 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d02e      	beq.n	8006402 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063b2:	d126      	bne.n	8006402 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063cc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0201 	bic.w	r2, r2, #1
 80063dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2220      	movs	r2, #32
 80063e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2220      	movs	r2, #32
 80063ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e00f      	b.n	8006422 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	69da      	ldr	r2, [r3, #28]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	4013      	ands	r3, r2
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	429a      	cmp	r2, r3
 8006410:	bf0c      	ite	eq
 8006412:	2301      	moveq	r3, #1
 8006414:	2300      	movne	r3, #0
 8006416:	b2db      	uxtb	r3, r3
 8006418:	461a      	mov	r2, r3
 800641a:	79fb      	ldrb	r3, [r7, #7]
 800641c:	429a      	cmp	r2, r3
 800641e:	d08d      	beq.n	800633c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800642a:	b480      	push	{r7}
 800642c:	b085      	sub	sp, #20
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006438:	2b01      	cmp	r3, #1
 800643a:	d101      	bne.n	8006440 <HAL_UARTEx_DisableFifoMode+0x16>
 800643c:	2302      	movs	r3, #2
 800643e:	e027      	b.n	8006490 <HAL_UARTEx_DisableFifoMode+0x66>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2224      	movs	r2, #36	; 0x24
 800644c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0201 	bic.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800646e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2220      	movs	r2, #32
 8006482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064b0:	2302      	movs	r3, #2
 80064b2:	e02d      	b.n	8006510 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2224      	movs	r2, #36	; 0x24
 80064c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0201 	bic.w	r2, r2, #1
 80064da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f84f 	bl	8006594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800652c:	2302      	movs	r3, #2
 800652e:	e02d      	b.n	800658c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2224      	movs	r2, #36	; 0x24
 800653c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0201 	bic.w	r2, r2, #1
 8006556:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f811 	bl	8006594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2220      	movs	r2, #32
 800657e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d108      	bne.n	80065b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065b4:	e031      	b.n	800661a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065b6:	2308      	movs	r3, #8
 80065b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065ba:	2308      	movs	r3, #8
 80065bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	0e5b      	lsrs	r3, r3, #25
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	f003 0307 	and.w	r3, r3, #7
 80065cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	0f5b      	lsrs	r3, r3, #29
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	f003 0307 	and.w	r3, r3, #7
 80065dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80065de:	7bbb      	ldrb	r3, [r7, #14]
 80065e0:	7b3a      	ldrb	r2, [r7, #12]
 80065e2:	4911      	ldr	r1, [pc, #68]	; (8006628 <UARTEx_SetNbDataToProcess+0x94>)
 80065e4:	5c8a      	ldrb	r2, [r1, r2]
 80065e6:	fb02 f303 	mul.w	r3, r2, r3
 80065ea:	7b3a      	ldrb	r2, [r7, #12]
 80065ec:	490f      	ldr	r1, [pc, #60]	; (800662c <UARTEx_SetNbDataToProcess+0x98>)
 80065ee:	5c8a      	ldrb	r2, [r1, r2]
 80065f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80065fc:	7bfb      	ldrb	r3, [r7, #15]
 80065fe:	7b7a      	ldrb	r2, [r7, #13]
 8006600:	4909      	ldr	r1, [pc, #36]	; (8006628 <UARTEx_SetNbDataToProcess+0x94>)
 8006602:	5c8a      	ldrb	r2, [r1, r2]
 8006604:	fb02 f303 	mul.w	r3, r2, r3
 8006608:	7b7a      	ldrb	r2, [r7, #13]
 800660a:	4908      	ldr	r1, [pc, #32]	; (800662c <UARTEx_SetNbDataToProcess+0x98>)
 800660c:	5c8a      	ldrb	r2, [r1, r2]
 800660e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006612:	b29a      	uxth	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800661a:	bf00      	nop
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	080087d8 	.word	0x080087d8
 800662c:	080087e0 	.word	0x080087e0

08006630 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006630:	b480      	push	{r7}
 8006632:	b08b      	sub	sp, #44	; 0x2c
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	fa93 f3a3 	rbit	r3, r3
 800664a:	613b      	str	r3, [r7, #16]
  return result;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006656:	2320      	movs	r3, #32
 8006658:	e003      	b.n	8006662 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	fab3 f383 	clz	r3, r3
 8006660:	b2db      	uxtb	r3, r3
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	2103      	movs	r1, #3
 8006666:	fa01 f303 	lsl.w	r3, r1, r3
 800666a:	43db      	mvns	r3, r3
 800666c:	401a      	ands	r2, r3
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	fa93 f3a3 	rbit	r3, r3
 8006678:	61fb      	str	r3, [r7, #28]
  return result;
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006684:	2320      	movs	r3, #32
 8006686:	e003      	b.n	8006690 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	fab3 f383 	clz	r3, r3
 800668e:	b2db      	uxtb	r3, r3
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	6879      	ldr	r1, [r7, #4]
 8006694:	fa01 f303 	lsl.w	r3, r1, r3
 8006698:	431a      	orrs	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	601a      	str	r2, [r3, #0]
}
 800669e:	bf00      	nop
 80066a0:	372c      	adds	r7, #44	; 0x2c
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b085      	sub	sp, #20
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	60b9      	str	r1, [r7, #8]
 80066b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	43db      	mvns	r3, r3
 80066be:	401a      	ands	r2, r3
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	6879      	ldr	r1, [r7, #4]
 80066c4:	fb01 f303 	mul.w	r3, r1, r3
 80066c8:	431a      	orrs	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	605a      	str	r2, [r3, #4]
}
 80066ce:	bf00      	nop
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80066da:	b480      	push	{r7}
 80066dc:	b08b      	sub	sp, #44	; 0x2c
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	689a      	ldr	r2, [r3, #8]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	fa93 f3a3 	rbit	r3, r3
 80066f4:	613b      	str	r3, [r7, #16]
  return result;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006700:	2320      	movs	r3, #32
 8006702:	e003      	b.n	800670c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	fab3 f383 	clz	r3, r3
 800670a:	b2db      	uxtb	r3, r3
 800670c:	005b      	lsls	r3, r3, #1
 800670e:	2103      	movs	r1, #3
 8006710:	fa01 f303 	lsl.w	r3, r1, r3
 8006714:	43db      	mvns	r3, r3
 8006716:	401a      	ands	r2, r3
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	fa93 f3a3 	rbit	r3, r3
 8006722:	61fb      	str	r3, [r7, #28]
  return result;
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800672e:	2320      	movs	r3, #32
 8006730:	e003      	b.n	800673a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	fab3 f383 	clz	r3, r3
 8006738:	b2db      	uxtb	r3, r3
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	fa01 f303 	lsl.w	r3, r1, r3
 8006742:	431a      	orrs	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006748:	bf00      	nop
 800674a:	372c      	adds	r7, #44	; 0x2c
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006754:	b480      	push	{r7}
 8006756:	b08b      	sub	sp, #44	; 0x2c
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	fa93 f3a3 	rbit	r3, r3
 800676e:	613b      	str	r3, [r7, #16]
  return result;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d101      	bne.n	800677e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800677a:	2320      	movs	r3, #32
 800677c:	e003      	b.n	8006786 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	fab3 f383 	clz	r3, r3
 8006784:	b2db      	uxtb	r3, r3
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	2103      	movs	r1, #3
 800678a:	fa01 f303 	lsl.w	r3, r1, r3
 800678e:	43db      	mvns	r3, r3
 8006790:	401a      	ands	r2, r3
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	fa93 f3a3 	rbit	r3, r3
 800679c:	61fb      	str	r3, [r7, #28]
  return result;
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80067a8:	2320      	movs	r3, #32
 80067aa:	e003      	b.n	80067b4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	fab3 f383 	clz	r3, r3
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	6879      	ldr	r1, [r7, #4]
 80067b8:	fa01 f303 	lsl.w	r3, r1, r3
 80067bc:	431a      	orrs	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	60da      	str	r2, [r3, #12]
}
 80067c2:	bf00      	nop
 80067c4:	372c      	adds	r7, #44	; 0x2c
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b08b      	sub	sp, #44	; 0x2c
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	60f8      	str	r0, [r7, #12]
 80067d6:	60b9      	str	r1, [r7, #8]
 80067d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a1a      	ldr	r2, [r3, #32]
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	fa93 f3a3 	rbit	r3, r3
 80067e8:	613b      	str	r3, [r7, #16]
  return result;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80067f4:	2320      	movs	r3, #32
 80067f6:	e003      	b.n	8006800 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	fab3 f383 	clz	r3, r3
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	210f      	movs	r1, #15
 8006804:	fa01 f303 	lsl.w	r3, r1, r3
 8006808:	43db      	mvns	r3, r3
 800680a:	401a      	ands	r2, r3
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	fa93 f3a3 	rbit	r3, r3
 8006816:	61fb      	str	r3, [r7, #28]
  return result;
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006822:	2320      	movs	r3, #32
 8006824:	e003      	b.n	800682e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	fab3 f383 	clz	r3, r3
 800682c:	b2db      	uxtb	r3, r3
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	6879      	ldr	r1, [r7, #4]
 8006832:	fa01 f303 	lsl.w	r3, r1, r3
 8006836:	431a      	orrs	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800683c:	bf00      	nop
 800683e:	372c      	adds	r7, #44	; 0x2c
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006848:	b480      	push	{r7}
 800684a:	b08b      	sub	sp, #44	; 0x2c
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	0a1b      	lsrs	r3, r3, #8
 800685c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	fa93 f3a3 	rbit	r3, r3
 8006864:	613b      	str	r3, [r7, #16]
  return result;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006870:	2320      	movs	r3, #32
 8006872:	e003      	b.n	800687c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	fab3 f383 	clz	r3, r3
 800687a:	b2db      	uxtb	r3, r3
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	210f      	movs	r1, #15
 8006880:	fa01 f303 	lsl.w	r3, r1, r3
 8006884:	43db      	mvns	r3, r3
 8006886:	401a      	ands	r2, r3
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	0a1b      	lsrs	r3, r3, #8
 800688c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	fa93 f3a3 	rbit	r3, r3
 8006894:	61fb      	str	r3, [r7, #28]
  return result;
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80068a0:	2320      	movs	r3, #32
 80068a2:	e003      	b.n	80068ac <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	fab3 f383 	clz	r3, r3
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	fa01 f303 	lsl.w	r3, r1, r3
 80068b4:	431a      	orrs	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80068ba:	bf00      	nop
 80068bc:	372c      	adds	r7, #44	; 0x2c
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b088      	sub	sp, #32
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	fa93 f3a3 	rbit	r3, r3
 80068dc:	60fb      	str	r3, [r7, #12]
  return result;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <LL_GPIO_Init+0x26>
    return 32U;
 80068e8:	2320      	movs	r3, #32
 80068ea:	e003      	b.n	80068f4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	fab3 f383 	clz	r3, r3
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80068f6:	e047      	b.n	8006988 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	2101      	movs	r1, #1
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	fa01 f303 	lsl.w	r3, r1, r3
 8006904:	4013      	ands	r3, r2
 8006906:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d039      	beq.n	8006982 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d003      	beq.n	800691e <LL_GPIO_Init+0x58>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	2b02      	cmp	r3, #2
 800691c:	d10d      	bne.n	800693a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	461a      	mov	r2, r3
 8006924:	69b9      	ldr	r1, [r7, #24]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7ff fed7 	bl	80066da <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	461a      	mov	r2, r3
 8006932:	69b9      	ldr	r1, [r7, #24]
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff feb8 	bl	80066aa <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	461a      	mov	r2, r3
 8006940:	69b9      	ldr	r1, [r7, #24]
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7ff ff06 	bl	8006754 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	2b02      	cmp	r3, #2
 800694e:	d111      	bne.n	8006974 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	2bff      	cmp	r3, #255	; 0xff
 8006954:	d807      	bhi.n	8006966 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	461a      	mov	r2, r3
 800695c:	69b9      	ldr	r1, [r7, #24]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7ff ff35 	bl	80067ce <LL_GPIO_SetAFPin_0_7>
 8006964:	e006      	b.n	8006974 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	461a      	mov	r2, r3
 800696c:	69b9      	ldr	r1, [r7, #24]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7ff ff6a 	bl	8006848 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	461a      	mov	r2, r3
 800697a:	69b9      	ldr	r1, [r7, #24]
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff fe57 	bl	8006630 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	3301      	adds	r3, #1
 8006986:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	fa22 f303 	lsr.w	r3, r2, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1b0      	bne.n	80068f8 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3720      	adds	r7, #32
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80069a8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80069ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	43db      	mvns	r3, r3
 80069bc:	b29b      	uxth	r3, r3
 80069be:	4013      	ands	r3, r2
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80069d6:	b084      	sub	sp, #16
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	f107 0014 	add.w	r0, r7, #20
 80069e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	b004      	add	sp, #16
 8006a16:	4770      	bx	lr

08006a18 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b094      	sub	sp, #80	; 0x50
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	3303      	adds	r3, #3
 8006a2a:	f023 0303 	bic.w	r3, r3, #3
 8006a2e:	607b      	str	r3, [r7, #4]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006a30:	f3ef 8310 	mrs	r3, PRIMASK
 8006a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006a36:	b672      	cpsid	i
    return(primask_value);
 8006a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts.  */
    TX_DISABLE
 8006a3a:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8006a3c:	4b54      	ldr	r3, [pc, #336]	; (8006b90 <_tx_byte_allocate+0x178>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	643b      	str	r3, [r7, #64]	; 0x40
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8006a42:	2300      	movs	r3, #0
 8006a44:	647b      	str	r3, [r7, #68]	; 0x44
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a4a:	621a      	str	r2, [r3, #32]
 8006a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	f383 8810 	msr	PRIMASK, r3
}
 8006a56:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8006a58:	6879      	ldr	r1, [r7, #4]
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 f9aa 	bl	8006db4 <_tx_byte_pool_search>
 8006a60:	63f8      	str	r0, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006a62:	f3ef 8310 	mrs	r3, PRIMASK
 8006a66:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006a68:	b672      	cpsid	i
    return(primask_value);
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8006a6c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8006a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <_tx_byte_allocate+0x62>
        {
        
            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8006a74:	2301      	movs	r3, #1
 8006a76:	647b      	str	r3, [r7, #68]	; 0x44
 8006a78:	e006      	b.n	8006a88 <_tx_byte_allocate+0x70>
        }
        else
        {
        
            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d101      	bne.n	8006a88 <_tx_byte_allocate+0x70>
            {
            
                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8006a84:	2301      	movs	r3, #1
 8006a86:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }

    } while (finished == TX_FALSE);
 8006a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d0db      	beq.n	8006a46 <_tx_byte_allocate+0x2e>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a92:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8006a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d008      	beq.n	8006aac <_tx_byte_allocate+0x94>
 8006a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9c:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	f383 8810 	msr	PRIMASK, r3
}
 8006aa4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006aaa:	e06c      	b.n	8006b86 <_tx_byte_allocate+0x16e>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d061      	beq.n	8006b76 <_tx_byte_allocate+0x15e>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8006ab2:	4b38      	ldr	r3, [pc, #224]	; (8006b94 <_tx_byte_allocate+0x17c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d007      	beq.n	8006aca <_tx_byte_allocate+0xb2>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8006aba:	2310      	movs	r3, #16
 8006abc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	f383 8810 	msr	PRIMASK, r3
}
 8006ac8:	e05d      	b.n	8006b86 <_tx_byte_allocate+0x16e>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8006aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006acc:	4a32      	ldr	r2, [pc, #200]	; (8006b98 <_tx_byte_allocate+0x180>)
 8006ace:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8006ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8006ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8006adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8006ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ae4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ae8:	1c5a      	adds	r2, r3, #1
 8006aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af4:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	629a      	str	r2, [r3, #40]	; 0x28
            
                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8006b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d109      	bne.n	8006b1a <_tx_byte_allocate+0x102>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b0a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8006b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b10:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8006b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b16:	675a      	str	r2, [r3, #116]	; 0x74
 8006b18:	e011      	b.n	8006b3e <_tx_byte_allocate+0x126>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1e:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8006b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b24:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8006b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b2a:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8006b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b30:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b36:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8006b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b3c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8006b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b40:	2209      	movs	r2, #9
 8006b42:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b46:	2201      	movs	r2, #1
 8006b48:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8006b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8006b50:	4b10      	ldr	r3, [pc, #64]	; (8006b94 <_tx_byte_allocate+0x17c>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3301      	adds	r3, #1
 8006b56:	4a0f      	ldr	r2, [pc, #60]	; (8006b94 <_tx_byte_allocate+0x17c>)
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b5c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	f383 8810 	msr	PRIMASK, r3
}
 8006b64:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8006b66:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006b68:	f000 fe06 	bl	8007778 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8006b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b72:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b74:	e007      	b.n	8006b86 <_tx_byte_allocate+0x16e>
 8006b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b78:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f383 8810 	msr	PRIMASK, r3
}
 8006b80:	bf00      	nop
    
            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8006b82:	2310      	movs	r3, #16
 8006b84:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }

    /* Return completion status.  */
    return(status);
 8006b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3750      	adds	r7, #80	; 0x50
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	20003078 	.word	0x20003078
 8006b94:	20003110 	.word	0x20003110
 8006b98:	08006b9d 	.word	0x08006b9d

08006b9c <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b08c      	sub	sp, #48	; 0x30
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8006baa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006bac:	b672      	cpsid	i
    return(primask_value);
 8006bae:	69bb      	ldr	r3, [r7, #24]

    
#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8006bb0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bb6:	4a32      	ldr	r2, [pc, #200]	; (8006c80 <_tx_byte_pool_cleanup+0xe4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d156      	bne.n	8006c6a <_tx_byte_pool_cleanup+0xce>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d150      	bne.n	8006c6a <_tx_byte_pool_cleanup+0xce>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bcc:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d04a      	beq.n	8006c6a <_tx_byte_pool_cleanup+0xce>
            {
            
                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8006bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a2a      	ldr	r2, [pc, #168]	; (8006c84 <_tx_byte_pool_cleanup+0xe8>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d145      	bne.n	8006c6a <_tx_byte_pool_cleanup+0xce>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8006bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d041      	beq.n	8006c6a <_tx_byte_pool_cleanup+0xce>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8006bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf0:	1e5a      	subs	r2, r3, #1
 8006bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf4:	629a      	str	r2, [r3, #40]	; 0x28
            
                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8006bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfa:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */
    
                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d103      	bne.n	8006c0a <_tx_byte_pool_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */
    
                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	2200      	movs	r2, #0
 8006c06:	625a      	str	r2, [r3, #36]	; 0x24
 8006c08:	e013      	b.n	8006c32 <_tx_byte_pool_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0e:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c14:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	69fa      	ldr	r2, [r7, #28]
 8006c1a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	6a3a      	ldr	r2, [r7, #32]
 8006c20:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d102      	bne.n	8006c32 <_tx_byte_pool_cleanup+0x96>
                            {
            
                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8006c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2e:	6a3a      	ldr	r2, [r7, #32]
 8006c30:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c36:	2b09      	cmp	r3, #9
 8006c38:	d117      	bne.n	8006c6a <_tx_byte_pool_cleanup+0xce>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2210      	movs	r2, #16
 8006c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8006c42:	4b11      	ldr	r3, [pc, #68]	; (8006c88 <_tx_byte_pool_cleanup+0xec>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3301      	adds	r3, #1
 8006c48:	4a0f      	ldr	r2, [pc, #60]	; (8006c88 <_tx_byte_pool_cleanup+0xec>)
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f383 8810 	msr	PRIMASK, r3
}
 8006c56:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fc83 	bl	8007564 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c62:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006c64:	b672      	cpsid	i
    return(primask_value);
 8006c66:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8006c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f383 8810 	msr	PRIMASK, r3
}
 8006c74:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8006c76:	bf00      	nop
 8006c78:	3730      	adds	r7, #48	; 0x30
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	08006b9d 	.word	0x08006b9d
 8006c84:	42595445 	.word	0x42595445
 8006c88:	20003110 	.word	0x20003110

08006c8c <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08e      	sub	sp, #56	; 0x38
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8006c9a:	2234      	movs	r2, #52	; 0x34
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f001 fd12 	bl	80086c8 <memset>

    /* Round the pool size down to something that is evenly divisible by 
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	f023 0303 	bic.w	r3, r3, #3
 8006caa:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the 
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	f1a3 0208 	sub.w	r2, r3, #8
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */
    
    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8006cde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8006ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce8:	3b04      	subs	r3, #4
 8006cea:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8006cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cf8:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8006cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfc:	3b04      	subs	r3, #4
 8006cfe:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8006d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d16:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8006d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d1e:	3304      	adds	r3, #4
 8006d20:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8006d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d24:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	4a1e      	ldr	r2, [pc, #120]	; (8006da4 <_tx_byte_pool_create+0x118>)
 8006d2a:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	621a      	str	r2, [r3, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006d32:	f3ef 8310 	mrs	r3, PRIMASK
 8006d36:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006d38:	b672      	cpsid	i
    return(primask_value);
 8006d3a:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4a19      	ldr	r2, [pc, #100]	; (8006da8 <_tx_byte_pool_create+0x11c>)
 8006d42:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8006d44:	4b19      	ldr	r3, [pc, #100]	; (8006dac <_tx_byte_pool_create+0x120>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d109      	bne.n	8006d60 <_tx_byte_pool_create+0xd4>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8006d4c:	4a18      	ldr	r2, [pc, #96]	; (8006db0 <_tx_byte_pool_create+0x124>)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	631a      	str	r2, [r3, #48]	; 0x30
 8006d5e:	e011      	b.n	8006d84 <_tx_byte_pool_create+0xf8>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8006d60:	4b13      	ldr	r3, [pc, #76]	; (8006db0 <_tx_byte_pool_create+0x124>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6a:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	69fa      	ldr	r2, [r7, #28]
 8006d7c:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6a3a      	ldr	r2, [r7, #32]
 8006d82:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8006d84:	4b09      	ldr	r3, [pc, #36]	; (8006dac <_tx_byte_pool_create+0x120>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	4a08      	ldr	r2, [pc, #32]	; (8006dac <_tx_byte_pool_create+0x120>)
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f383 8810 	msr	PRIMASK, r3
}
 8006d98:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3738      	adds	r7, #56	; 0x38
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	ffffeeee 	.word	0xffffeeee
 8006da8:	42595445 	.word	0x42595445
 8006dac:	2000306c 	.word	0x2000306c
 8006db0:	20003068 	.word	0x20003068

08006db4 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b095      	sub	sp, #84	; 0x54
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8006dc6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006dc8:	b672      	cpsid	i
    return(primask_value);
 8006dca:	69fb      	ldr	r3, [r7, #28]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8006dcc:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	689a      	ldr	r2, [r3, #8]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	3b02      	subs	r3, #2
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	4413      	add	r3, r2
 8006ddc:	63bb      	str	r3, [r7, #56]	; 0x38
    if (memory_size >= total_theoretical_available)
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d308      	bcc.n	8006df8 <_tx_byte_pool_search+0x44>
 8006de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006de8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	f383 8810 	msr	PRIMASK, r3
}
 8006df0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006df6:	e0db      	b.n	8006fb0 <_tx_byte_pool_search+0x1fc>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8006df8:	4b71      	ldr	r3, [pc, #452]	; (8006fc0 <_tx_byte_pool_search+0x20c>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e02:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	64bb      	str	r3, [r7, #72]	; 0x48
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	643b      	str	r3, [r7, #64]	; 0x40
        available_bytes =  ((ULONG) 0);
 8006e12:	2300      	movs	r3, #0
 8006e14:	647b      	str	r3, [r7, #68]	; 0x44
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8006e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e18:	3304      	adds	r3, #4
 8006e1a:	633b      	str	r3, [r7, #48]	; 0x30
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8006e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a67      	ldr	r2, [pc, #412]	; (8006fc4 <_tx_byte_pool_search+0x210>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d143      	bne.n	8006eb2 <_tx_byte_pool_search+0xfe>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8006e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d104      	bne.n	8006e3a <_tx_byte_pool_search+0x86>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e34:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8006e36:	2301      	movs	r3, #1
 8006e38:	63fb      	str	r3, [r7, #60]	; 0x3c
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8006e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e3c:	62bb      	str	r3, [r7, #40]	; 0x28
                next_ptr =             *this_block_link_ptr;
 8006e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8006e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	647b      	str	r3, [r7, #68]	; 0x44
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8006e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e4e:	3b08      	subs	r3, #8
 8006e50:	647b      	str	r3, [r7, #68]	; 0x44

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8006e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d255      	bcs.n	8006f06 <_tx_byte_pool_search+0x152>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	3304      	adds	r3, #4
 8006e62:	633b      	str	r3, [r7, #48]	; 0x30
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8006e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e66:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8006e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a55      	ldr	r2, [pc, #340]	; (8006fc4 <_tx_byte_pool_search+0x210>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d113      	bne.n	8006e9a <_tx_byte_pool_search+0xe6>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	623b      	str	r3, [r7, #32]
                        *this_block_link_ptr =  *next_block_link_ptr;
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	1e5a      	subs	r2, r3, #1
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d114      	bne.n	8006ebc <_tx_byte_pool_search+0x108>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e96:	615a      	str	r2, [r3, #20]
 8006e98:	e010      	b.n	8006ebc <_tx_byte_pool_search+0x108>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	623b      	str	r3, [r7, #32]
                        current_ptr =  *next_block_link_ptr;
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8006ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d008      	beq.n	8006ebc <_tx_byte_pool_search+0x108>
                        {
                            examine_blocks--;
 8006eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eac:	3b01      	subs	r3, #1
 8006eae:	643b      	str	r3, [r7, #64]	; 0x40
 8006eb0:	e004      	b.n	8006ebc <_tx_byte_pool_search+0x108>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8006eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eb4:	62bb      	str	r3, [r7, #40]	; 0x28
                current_ptr =  *this_block_link_ptr;
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8006ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <_tx_byte_pool_search+0x114>
            {

                examine_blocks--;
 8006ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eca:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	f383 8810 	msr	PRIMASK, r3
}
 8006ed2:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ed8:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006eda:	b672      	cpsid	i
    return(primask_value);
 8006edc:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8006ede:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d009      	beq.n	8006efe <_tx_byte_pool_search+0x14a>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	64bb      	str	r3, [r7, #72]	; 0x48
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	643b      	str	r3, [r7, #64]	; 0x40

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006efc:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8006efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d188      	bne.n	8006e16 <_tx_byte_pool_search+0x62>
 8006f04:	e000      	b.n	8006f08 <_tx_byte_pool_search+0x154>
                    break;
 8006f06:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8006f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d048      	beq.n	8006fa0 <_tx_byte_pool_search+0x1ec>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8006f0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	2b13      	cmp	r3, #19
 8006f16:	d91e      	bls.n	8006f56 <_tx_byte_pool_search+0x1a2>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	3308      	adds	r3, #8
 8006f1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f1e:	4413      	add	r3, r2
 8006f20:	627b      	str	r3, [r7, #36]	; 0x24

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	623b      	str	r3, [r7, #32]
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8006f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f28:	62bb      	str	r3, [r7, #40]	; 0x28
                *next_block_link_ptr =  *this_block_link_ptr;
 8006f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	6a3b      	ldr	r3, [r7, #32]
 8006f30:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	3304      	adds	r3, #4
 8006f36:	633b      	str	r3, [r7, #48]	; 0x30
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8006f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8006f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3e:	4a21      	ldr	r2, [pc, #132]	; (8006fc4 <_tx_byte_pool_search+0x210>)
 8006f40:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8006f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f50:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	647b      	str	r3, [r7, #68]	; 0x44
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8006f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f58:	3304      	adds	r3, #4
 8006f5a:	633b      	str	r3, [r7, #48]	; 0x30
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5e:	62bb      	str	r3, [r7, #40]	; 0x28
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	f1a3 0208 	sub.w	r2, r3, #8
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d105      	bne.n	8006f8c <_tx_byte_pool_search+0x1d8>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8006f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f82:	62bb      	str	r3, [r7, #40]	; 0x28
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8006f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	615a      	str	r2, [r3, #20]
 8006f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f8e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f383 8810 	msr	PRIMASK, r3
}
 8006f96:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8006f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f9a:	3308      	adds	r3, #8
 8006f9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f9e:	e007      	b.n	8006fb0 <_tx_byte_pool_search+0x1fc>
 8006fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fa2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f383 8810 	msr	PRIMASK, r3
}
 8006faa:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8006fac:	2300      	movs	r3, #0
 8006fae:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8006fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3754      	adds	r7, #84	; 0x54
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	20003078 	.word	0x20003078
 8006fc4:	ffffeeee 	.word	0xffffeeee

08006fc8 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8006fcc:	f000 f9dc 	bl	8007388 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8006fd0:	f000 fd8e 	bl	8007af0 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8006fd4:	4b12      	ldr	r3, [pc, #72]	; (8007020 <_tx_initialize_high_level+0x58>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	4b12      	ldr	r3, [pc, #72]	; (8007024 <_tx_initialize_high_level+0x5c>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8006fe0:	4b11      	ldr	r3, [pc, #68]	; (8007028 <_tx_initialize_high_level+0x60>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	4b11      	ldr	r3, [pc, #68]	; (800702c <_tx_initialize_high_level+0x64>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8006fec:	4b10      	ldr	r3, [pc, #64]	; (8007030 <_tx_initialize_high_level+0x68>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	4b10      	ldr	r3, [pc, #64]	; (8007034 <_tx_initialize_high_level+0x6c>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8006ff8:	4b0f      	ldr	r3, [pc, #60]	; (8007038 <_tx_initialize_high_level+0x70>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	4b0f      	ldr	r3, [pc, #60]	; (800703c <_tx_initialize_high_level+0x74>)
 8007000:	2200      	movs	r2, #0
 8007002:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8007004:	4b0e      	ldr	r3, [pc, #56]	; (8007040 <_tx_initialize_high_level+0x78>)
 8007006:	2200      	movs	r2, #0
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	4b0e      	ldr	r3, [pc, #56]	; (8007044 <_tx_initialize_high_level+0x7c>)
 800700c:	2200      	movs	r2, #0
 800700e:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8007010:	4b0d      	ldr	r3, [pc, #52]	; (8007048 <_tx_initialize_high_level+0x80>)
 8007012:	2200      	movs	r2, #0
 8007014:	601a      	str	r2, [r3, #0]
 8007016:	4b0d      	ldr	r3, [pc, #52]	; (800704c <_tx_initialize_high_level+0x84>)
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]
#endif
}
 800701c:	bf00      	nop
 800701e:	bd80      	pop	{r7, pc}
 8007020:	20003040 	.word	0x20003040
 8007024:	20003044 	.word	0x20003044
 8007028:	20003048 	.word	0x20003048
 800702c:	2000304c 	.word	0x2000304c
 8007030:	20003050 	.word	0x20003050
 8007034:	20003054 	.word	0x20003054
 8007038:	20003060 	.word	0x20003060
 800703c:	20003064 	.word	0x20003064
 8007040:	20003068 	.word	0x20003068
 8007044:	2000306c 	.word	0x2000306c
 8007048:	20003058 	.word	0x20003058
 800704c:	2000305c 	.word	0x2000305c

08007050 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8007054:	4b10      	ldr	r3, [pc, #64]	; (8007098 <_tx_initialize_kernel_enter+0x48>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800705c:	d00c      	beq.n	8007078 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate 
           initialization is in progress.  Note that this variable is 
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800705e:	4b0e      	ldr	r3, [pc, #56]	; (8007098 <_tx_initialize_kernel_enter+0x48>)
 8007060:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8007064:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8007066:	f7f9 f8e5 	bl	8000234 <_tx_initialize_low_level>
    
        /* Invoke the high-level initialization to exercise all of the 
           ThreadX components and the application's initialization 
           function.  */
        _tx_initialize_high_level();
 800706a:	f7ff ffad 	bl	8006fc8 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800706e:	4b0b      	ldr	r3, [pc, #44]	; (800709c <_tx_initialize_kernel_enter+0x4c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3301      	adds	r3, #1
 8007074:	4a09      	ldr	r2, [pc, #36]	; (800709c <_tx_initialize_kernel_enter+0x4c>)
 8007076:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate 
       initialization is in progress.  Note that this variable is 
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8007078:	4b07      	ldr	r3, [pc, #28]	; (8007098 <_tx_initialize_kernel_enter+0x48>)
 800707a:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800707e:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8007080:	4b07      	ldr	r3, [pc, #28]	; (80070a0 <_tx_initialize_kernel_enter+0x50>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4618      	mov	r0, r3
 8007086:	f7f9 fb8b 	bl	80007a0 <tx_application_define>

    /* Set the system state in preparation for entering the thread 
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800708a:	4b03      	ldr	r3, [pc, #12]	; (8007098 <_tx_initialize_kernel_enter+0x48>)
 800708c:	2200      	movs	r2, #0
 800708e:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8007090:	f7f9 f90c 	bl	80002ac <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8007094:	bf00      	nop
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20000010 	.word	0x20000010
 800709c:	20003110 	.word	0x20003110
 80070a0:	20003070 	.word	0x20003070

080070a4 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, 
                        VOID *queue_start, ULONG queue_size)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b08c      	sub	sp, #48	; 0x30
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
 80070b0:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 80070b2:	2238      	movs	r2, #56	; 0x38
 80070b4:	2100      	movs	r1, #0
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f001 fb06 	bl	80086c8 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	605a      	str	r2, [r3, #4]
    
    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 80070d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	fb02 f303 	mul.w	r3, r2, r3
 80070dc:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of 
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	699a      	ldr	r2, [r3, #24]
 80070e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	441a      	add	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007102:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007108:	60da      	str	r2, [r3, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800710a:	f3ef 8310 	mrs	r3, PRIMASK
 800710e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007110:	b672      	cpsid	i
    return(primask_value);
 8007112:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 8007114:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4a18      	ldr	r2, [pc, #96]	; (800717c <_tx_queue_create+0xd8>)
 800711a:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 800711c:	4b18      	ldr	r3, [pc, #96]	; (8007180 <_tx_queue_create+0xdc>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d109      	bne.n	8007138 <_tx_queue_create+0x94>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 8007124:	4a17      	ldr	r2, [pc, #92]	; (8007184 <_tx_queue_create+0xe0>)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	635a      	str	r2, [r3, #52]	; 0x34
 8007136:	e011      	b.n	800715c <_tx_queue_create+0xb8>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 8007138:	4b12      	ldr	r3, [pc, #72]	; (8007184 <_tx_queue_create+0xe0>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 800713e:	6a3b      	ldr	r3, [r7, #32]
 8007140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007142:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	69fa      	ldr	r2, [r7, #28]
 8007154:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6a3a      	ldr	r2, [r7, #32]
 800715a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 800715c:	4b08      	ldr	r3, [pc, #32]	; (8007180 <_tx_queue_create+0xdc>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	3301      	adds	r3, #1
 8007162:	4a07      	ldr	r2, [pc, #28]	; (8007180 <_tx_queue_create+0xdc>)
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	f383 8810 	msr	PRIMASK, r3
}
 8007170:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3730      	adds	r7, #48	; 0x30
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	51554555 	.word	0x51554555
 8007180:	2000304c 	.word	0x2000304c
 8007184:	20003048 	.word	0x20003048

08007188 <_get_ipsr>:
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 800718e:	f3ef 8305 	mrs	r3, IPSR
 8007192:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8007194:	687b      	ldr	r3, [r7, #4]
}
 8007196:	4618      	mov	r0, r3
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
	...

080071a4 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b090      	sub	sp, #64	; 0x40
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80071b2:	2300      	movs	r3, #0
 80071b4:	63bb      	str	r3, [r7, #56]	; 0x38
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80071b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071b8:	21ef      	movs	r1, #239	; 0xef
 80071ba:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80071bc:	f001 fa84 	bl	80086c8 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80071c0:	22b0      	movs	r2, #176	; 0xb0
 80071c2:	2100      	movs	r1, #0
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f001 fa7f 	bl	80086c8 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071e0:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071e6:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80071ec:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80071f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071fa:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007200:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2220      	movs	r2, #32
 8007206:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800720a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800720c:	637b      	str	r3, [r7, #52]	; 0x34
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800720e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007210:	3b01      	subs	r3, #1
 8007212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007214:	4413      	add	r3, r2
 8007216:	637b      	str	r3, [r7, #52]	; 0x34
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800721c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800721e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007222:	429a      	cmp	r2, r3
 8007224:	d007      	beq.n	8007236 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007234:	e006      	b.n	8007244 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800723a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007240:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2203      	movs	r2, #3
 8007248:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	4a46      	ldr	r2, [pc, #280]	; (8007368 <_tx_thread_create+0x1c4>)
 800724e:	655a      	str	r2, [r3, #84]	; 0x54
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8007256:	4945      	ldr	r1, [pc, #276]	; (800736c <_tx_thread_create+0x1c8>)
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f7f9 f895 	bl	8000388 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800725e:	f3ef 8310 	mrs	r3, PRIMASK
 8007262:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007264:	b672      	cpsid	i
    return(primask_value);
 8007266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8007268:	633b      	str	r3, [r7, #48]	; 0x30

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4a40      	ldr	r2, [pc, #256]	; (8007370 <_tx_thread_create+0x1cc>)
 800726e:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8007270:	4b40      	ldr	r3, [pc, #256]	; (8007374 <_tx_thread_create+0x1d0>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10b      	bne.n	8007290 <_tx_thread_create+0xec>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8007278:	4a3f      	ldr	r2, [pc, #252]	; (8007378 <_tx_thread_create+0x1d4>)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800728e:	e016      	b.n	80072be <_tx_thread_create+0x11a>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8007290:	4b39      	ldr	r3, [pc, #228]	; (8007378 <_tx_thread_create+0x1d4>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	62fb      	str	r3, [r7, #44]	; 0x2c
        previous_thread =  next_thread -> tx_thread_created_previous;
 8007296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800729c:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800729e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80072a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }
    
    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80072be:	4b2d      	ldr	r3, [pc, #180]	; (8007374 <_tx_thread_create+0x1d0>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3301      	adds	r3, #1
 80072c4:	4a2b      	ldr	r2, [pc, #172]	; (8007374 <_tx_thread_create+0x1d0>)
 80072c6:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80072c8:	4b2c      	ldr	r3, [pc, #176]	; (800737c <_tx_thread_create+0x1d8>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	3301      	adds	r3, #1
 80072ce:	4a2b      	ldr	r2, [pc, #172]	; (800737c <_tx_thread_create+0x1d8>)
 80072d0:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80072d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d128      	bne.n	800732a <_tx_thread_create+0x186>
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80072d8:	f7ff ff56 	bl	8007188 <_get_ipsr>
 80072dc:	4602      	mov	r2, r0
 80072de:	4b28      	ldr	r3, [pc, #160]	; (8007380 <_tx_thread_create+0x1dc>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80072e8:	d30d      	bcc.n	8007306 <_tx_thread_create+0x162>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80072ea:	4b26      	ldr	r3, [pc, #152]	; (8007384 <_tx_thread_create+0x1e0>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80072f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d009      	beq.n	800730a <_tx_thread_create+0x166>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80072f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072fa:	63bb      	str	r3, [r7, #56]	; 0x38

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80072fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007302:	63da      	str	r2, [r3, #60]	; 0x3c
 8007304:	e001      	b.n	800730a <_tx_thread_create+0x166>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8007306:	2300      	movs	r3, #0
 8007308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730c:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	f383 8810 	msr	PRIMASK, r3
}
 8007314:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f000 f924 	bl	8007564 <_tx_thread_system_resume>
#endif
 
        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800731c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800731e:	2b00      	cmp	r3, #0
 8007320:	d01c      	beq.n	800735c <_tx_thread_create+0x1b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8007322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007326:	63da      	str	r2, [r3, #60]	; 0x3c
 8007328:	e018      	b.n	800735c <_tx_thread_create+0x1b8>
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f383 8810 	msr	PRIMASK, r3
}
 8007334:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007336:	f3ef 8310 	mrs	r3, PRIMASK
 800733a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800733c:	b672      	cpsid	i
    return(primask_value);
 800733e:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8007340:	633b      	str	r3, [r7, #48]	; 0x30

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8007342:	4b0e      	ldr	r3, [pc, #56]	; (800737c <_tx_thread_create+0x1d8>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3b01      	subs	r3, #1
 8007348:	4a0c      	ldr	r2, [pc, #48]	; (800737c <_tx_thread_create+0x1d8>)
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	f383 8810 	msr	PRIMASK, r3
}
 8007356:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8007358:	f000 f8c0 	bl	80074dc <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3740      	adds	r7, #64	; 0x40
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	08007a3d 	.word	0x08007a3d
 800736c:	08007435 	.word	0x08007435
 8007370:	54485244 	.word	0x54485244
 8007374:	20003084 	.word	0x20003084
 8007378:	20003080 	.word	0x20003080
 800737c:	20003110 	.word	0x20003110
 8007380:	20000010 	.word	0x20000010
 8007384:	2000307c 	.word	0x2000307c

08007388 <_tx_thread_initialize>:
/*                                            Execution Profile support,  */
/*                                            resulting in version 6.1.7  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800738c:	4b12      	ldr	r3, [pc, #72]	; (80073d8 <_tx_thread_initialize+0x50>)
 800738e:	2200      	movs	r2, #0
 8007390:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8007392:	4b12      	ldr	r3, [pc, #72]	; (80073dc <_tx_thread_initialize+0x54>)
 8007394:	2200      	movs	r2, #0
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	4b11      	ldr	r3, [pc, #68]	; (80073e0 <_tx_thread_initialize+0x58>)
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800739e:	4b11      	ldr	r3, [pc, #68]	; (80073e4 <_tx_thread_initialize+0x5c>)
 80073a0:	2220      	movs	r2, #32
 80073a2:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80073a4:	2280      	movs	r2, #128	; 0x80
 80073a6:	2100      	movs	r1, #0
 80073a8:	480f      	ldr	r0, [pc, #60]	; (80073e8 <_tx_thread_initialize+0x60>)
 80073aa:	f001 f98d 	bl	80086c8 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80073ae:	4b0f      	ldr	r3, [pc, #60]	; (80073ec <_tx_thread_initialize+0x64>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80073b4:	4b0e      	ldr	r3, [pc, #56]	; (80073f0 <_tx_thread_initialize+0x68>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80073ba:	4b0e      	ldr	r3, [pc, #56]	; (80073f4 <_tx_thread_initialize+0x6c>)
 80073bc:	2200      	movs	r2, #0
 80073be:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80073c0:	4b0d      	ldr	r3, [pc, #52]	; (80073f8 <_tx_thread_initialize+0x70>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80073c6:	4b0d      	ldr	r3, [pc, #52]	; (80073fc <_tx_thread_initialize+0x74>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 80073ce:	4a0b      	ldr	r2, [pc, #44]	; (80073fc <_tx_thread_initialize+0x74>)
 80073d0:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80073d2:	bf00      	nop
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20003078 	.word	0x20003078
 80073dc:	2000307c 	.word	0x2000307c
 80073e0:	20003088 	.word	0x20003088
 80073e4:	2000308c 	.word	0x2000308c
 80073e8:	20003090 	.word	0x20003090
 80073ec:	20003080 	.word	0x20003080
 80073f0:	20003084 	.word	0x20003084
 80073f4:	20003110 	.word	0x20003110
 80073f8:	20003114 	.word	0x20003114
 80073fc:	20003118 	.word	0x20003118

08007400 <_get_control>:
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
    __asm("MRS %[result], control" : [result] "=r" (_control) : );
 8007406:	f3ef 8314 	mrs	r3, CONTROL
 800740a:	607b      	str	r3, [r7, #4]
    return _control;
 800740c:	687b      	ldr	r3, [r7, #4]
}
 800740e:	4618      	mov	r0, r3
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <_set_control>:
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
    __asm("MSR control, %[input]" : : [input] "r" (_control));
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f383 8814 	msr	CONTROL, r3
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800743a:	4b1e      	ldr	r3, [pc, #120]	; (80074b4 <_tx_thread_shell_entry+0x80>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	617b      	str	r3, [r7, #20]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007448:	4610      	mov	r0, r2
 800744a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800744c:	4b1a      	ldr	r3, [pc, #104]	; (80074b8 <_tx_thread_shell_entry+0x84>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8007454:	4b18      	ldr	r3, [pc, #96]	; (80074b8 <_tx_thread_shell_entry+0x84>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6978      	ldr	r0, [r7, #20]
 800745a:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800745c:	f3ef 8310 	mrs	r3, PRIMASK
 8007460:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007462:	b672      	cpsid	i
    return(primask_value);
 8007464:	687b      	ldr	r3, [r7, #4]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8007466:	613b      	str	r3, [r7, #16]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	2201      	movs	r2, #1
 800746c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2201      	movs	r2, #1
 8007472:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	2200      	movs	r2, #0
 8007478:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800747a:	4b10      	ldr	r3, [pc, #64]	; (80074bc <_tx_thread_shell_entry+0x88>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	3301      	adds	r3, #1
 8007480:	4a0e      	ldr	r2, [pc, #56]	; (80074bc <_tx_thread_shell_entry+0x88>)
 8007482:	6013      	str	r3, [r2, #0]
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f383 8810 	msr	PRIMASK, r3
}
 800748e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8007490:	f7ff ffb6 	bl	8007400 <_get_control>
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f023 0304 	bic.w	r3, r3, #4
 800749c:	60fb      	str	r3, [r7, #12]
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f7ff ffbb 	bl	800741a <_set_control>
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80074a4:	6978      	ldr	r0, [r7, #20]
 80074a6:	f000 f967 	bl	8007778 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80074aa:	bf00      	nop
 80074ac:	3718      	adds	r7, #24
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	20003078 	.word	0x20003078
 80074b8:	20003114 	.word	0x20003114
 80074bc:	20003110 	.word	0x20003110

080074c0 <_get_ipsr>:
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 80074c6:	f3ef 8305 	mrs	r3, IPSR
 80074ca:	607b      	str	r3, [r7, #4]
    return _ipsr;
 80074cc:	687b      	ldr	r3, [r7, #4]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
	...

080074dc <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80074e2:	4b15      	ldr	r3, [pc, #84]	; (8007538 <_tx_thread_system_preempt_check+0x5c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	617b      	str	r3, [r7, #20]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d120      	bne.n	8007530 <_tx_thread_system_preempt_check+0x54>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80074ee:	4b13      	ldr	r3, [pc, #76]	; (800753c <_tx_thread_system_preempt_check+0x60>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	613b      	str	r3, [r7, #16]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80074f4:	4b12      	ldr	r3, [pc, #72]	; (8007540 <_tx_thread_system_preempt_check+0x64>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	60fb      	str	r3, [r7, #12]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d016      	beq.n	8007530 <_tx_thread_system_preempt_check+0x54>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007502:	4b10      	ldr	r3, [pc, #64]	; (8007544 <_tx_thread_system_preempt_check+0x68>)
 8007504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007508:	601a      	str	r2, [r3, #0]
    if (_get_ipsr() == 0)
 800750a:	f7ff ffd9 	bl	80074c0 <_get_ipsr>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10c      	bne.n	800752e <_tx_thread_system_preempt_check+0x52>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007514:	f3ef 8310 	mrs	r3, PRIMASK
 8007518:	60bb      	str	r3, [r7, #8]
    return(primask_value);
 800751a:	68bb      	ldr	r3, [r7, #8]
    {
        interrupt_save = __get_primask_value();
 800751c:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800751e:	b662      	cpsie	i
}
 8007520:	bf00      	nop
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	f383 8810 	msr	PRIMASK, r3
}
 800752c:	bf00      	nop
        __enable_interrupts();
        __restore_interrupts(interrupt_save);
    }
}
 800752e:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8007530:	bf00      	nop
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	20003110 	.word	0x20003110
 800753c:	20003078 	.word	0x20003078
 8007540:	2000307c 	.word	0x2000307c
 8007544:	e000ed04 	.word	0xe000ed04

08007548 <_get_ipsr>:
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 800754e:	f3ef 8305 	mrs	r3, IPSR
 8007552:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8007554:	687b      	ldr	r3, [r7, #4]
}
 8007556:	4618      	mov	r0, r3
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
	...

08007564 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b094      	sub	sp, #80	; 0x50
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800756c:	f3ef 8310 	mrs	r3, PRIMASK
 8007570:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007572:	b672      	cpsid	i
    return(primask_value);
 8007574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8007576:	64fb      	str	r3, [r7, #76]	; 0x4c

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800757c:	2b00      	cmp	r3, #0
 800757e:	d005      	beq.n	800758c <_tx_thread_system_resume+0x28>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	334c      	adds	r3, #76	; 0x4c
 8007584:	4618      	mov	r0, r3
 8007586:	f000 fb91 	bl	8007cac <_tx_timer_system_deactivate>
 800758a:	e002      	b.n	8007592 <_tx_thread_system_resume+0x2e>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8007592:	4b6b      	ldr	r3, [pc, #428]	; (8007740 <_tx_thread_system_resume+0x1dc>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3b01      	subs	r3, #1
 8007598:	4a69      	ldr	r2, [pc, #420]	; (8007740 <_tx_thread_system_resume+0x1dc>)
 800759a:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f040 8082 	bne.w	80076aa <_tx_thread_system_resume+0x146>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f000 8096 	beq.w	80076dc <_tx_thread_system_resume+0x178>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d171      	bne.n	800769c <_tx_thread_system_resume+0x138>
                /* Resume the thread!  */
                
                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c2:	64bb      	str	r3, [r7, #72]	; 0x48
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80075c4:	4a5f      	ldr	r2, [pc, #380]	; (8007744 <_tx_thread_system_resume+0x1e0>)
 80075c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075cc:	647b      	str	r3, [r7, #68]	; 0x44
                if (head_ptr == TX_NULL)
 80075ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d153      	bne.n	800767c <_tx_thread_system_resume+0x118>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80075d4:	495b      	ldr	r1, [pc, #364]	; (8007744 <_tx_thread_system_resume+0x1e0>)
 80075d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80075ea:	2201      	movs	r2, #1
 80075ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075ee:	fa02 f303 	lsl.w	r3, r2, r3
 80075f2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80075f4:	4b54      	ldr	r3, [pc, #336]	; (8007748 <_tx_thread_system_resume+0x1e4>)
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075fa:	4313      	orrs	r3, r2
 80075fc:	4a52      	ldr	r2, [pc, #328]	; (8007748 <_tx_thread_system_resume+0x1e4>)
 80075fe:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8007600:	4b52      	ldr	r3, [pc, #328]	; (800774c <_tx_thread_system_resume+0x1e8>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007606:	429a      	cmp	r2, r3
 8007608:	d268      	bcs.n	80076dc <_tx_thread_system_resume+0x178>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800760a:	4a50      	ldr	r2, [pc, #320]	; (800774c <_tx_thread_system_resume+0x1e8>)
 800760c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800760e:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8007610:	4b4f      	ldr	r3, [pc, #316]	; (8007750 <_tx_thread_system_resume+0x1ec>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	63bb      	str	r3, [r7, #56]	; 0x38
                        
                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8007616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007618:	2b00      	cmp	r3, #0
 800761a:	d103      	bne.n	8007624 <_tx_thread_system_resume+0xc0>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800761c:	4a4c      	ldr	r2, [pc, #304]	; (8007750 <_tx_thread_system_resume+0x1ec>)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6013      	str	r3, [r2, #0]
 8007622:	e05b      	b.n	80076dc <_tx_thread_system_resume+0x178>
                        {
                        
                            /* Another thread has been scheduled for execution.  */
               
                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8007624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007628:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800762a:	429a      	cmp	r2, r3
 800762c:	d256      	bcs.n	80076dc <_tx_thread_system_resume+0x178>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800762e:	4a48      	ldr	r2, [pc, #288]	; (8007750 <_tx_thread_system_resume+0x1ec>)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6013      	str	r3, [r2, #0]
 8007634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007636:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763a:	f383 8810 	msr	PRIMASK, r3
}
 800763e:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007640:	4b3f      	ldr	r3, [pc, #252]	; (8007740 <_tx_thread_system_resume+0x1dc>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	637b      	str	r3, [r7, #52]	; 0x34
                                if (combined_flags == ((ULONG) 0))
 8007646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007648:	2b00      	cmp	r3, #0
 800764a:	d172      	bne.n	8007732 <_tx_thread_system_resume+0x1ce>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800764c:	4b41      	ldr	r3, [pc, #260]	; (8007754 <_tx_thread_system_resume+0x1f0>)
 800764e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007652:	601a      	str	r2, [r3, #0]
    if (_get_ipsr() == 0)
 8007654:	f7ff ff78 	bl	8007548 <_get_ipsr>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10c      	bne.n	8007678 <_tx_thread_system_resume+0x114>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800765e:	f3ef 8310 	mrs	r3, PRIMASK
 8007662:	627b      	str	r3, [r7, #36]	; 0x24
    return(primask_value);
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_primask_value();
 8007666:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8007668:	b662      	cpsie	i
}
 800766a:	bf00      	nop
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	f383 8810 	msr	PRIMASK, r3
}
 8007676:	bf00      	nop
}
 8007678:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800767a:	e05a      	b.n	8007732 <_tx_thread_system_resume+0x1ce>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800767c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	643b      	str	r3, [r7, #64]	; 0x40
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8007682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8007688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007692:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007698:	621a      	str	r2, [r3, #32]
 800769a:	e01f      	b.n	80076dc <_tx_thread_system_resume+0x178>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2203      	movs	r2, #3
 80076a6:	631a      	str	r2, [r3, #48]	; 0x30
 80076a8:	e018      	b.n	80076dc <_tx_thread_system_resume+0x178>
        /* A resumption occurred in the middle of a previous thread suspension.  */
        
        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the 
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d014      	beq.n	80076dc <_tx_thread_system_resume+0x178>
        {
            
            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d010      	beq.n	80076dc <_tx_thread_system_resume+0x178>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d106      	bne.n	80076d0 <_tx_thread_system_resume+0x16c>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	631a      	str	r2, [r3, #48]	; 0x30
 80076ce:	e005      	b.n	80076dc <_tx_thread_system_resume+0x178>
                }
                else
                {
                
                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2203      	movs	r2, #3
 80076da:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80076dc:	4b1e      	ldr	r3, [pc, #120]	; (8007758 <_tx_thread_system_resume+0x1f4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	633b      	str	r3, [r7, #48]	; 0x30
 80076e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	f383 8810 	msr	PRIMASK, r3
}
 80076ec:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80076ee:	4b18      	ldr	r3, [pc, #96]	; (8007750 <_tx_thread_system_resume+0x1ec>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d01f      	beq.n	8007738 <_tx_thread_system_resume+0x1d4>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80076f8:	4b11      	ldr	r3, [pc, #68]	; (8007740 <_tx_thread_system_resume+0x1dc>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	637b      	str	r3, [r7, #52]	; 0x34
        if (combined_flags == ((ULONG) 0))
 80076fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007700:	2b00      	cmp	r3, #0
 8007702:	d119      	bne.n	8007738 <_tx_thread_system_resume+0x1d4>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007704:	4b13      	ldr	r3, [pc, #76]	; (8007754 <_tx_thread_system_resume+0x1f0>)
 8007706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800770a:	601a      	str	r2, [r3, #0]
    if (_get_ipsr() == 0)
 800770c:	f7ff ff1c 	bl	8007548 <_get_ipsr>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10f      	bne.n	8007736 <_tx_thread_system_resume+0x1d2>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007716:	f3ef 8310 	mrs	r3, PRIMASK
 800771a:	617b      	str	r3, [r7, #20]
    return(primask_value);
 800771c:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_primask_value();
 800771e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8007720:	b662      	cpsie	i
}
 8007722:	bf00      	nop
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f383 8810 	msr	PRIMASK, r3
}
 800772e:	bf00      	nop
}
 8007730:	e001      	b.n	8007736 <_tx_thread_system_resume+0x1d2>
                                return;
 8007732:	bf00      	nop
 8007734:	e000      	b.n	8007738 <_tx_thread_system_resume+0x1d4>
 8007736:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8007738:	3750      	adds	r7, #80	; 0x50
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	20003110 	.word	0x20003110
 8007744:	20003090 	.word	0x20003090
 8007748:	20003088 	.word	0x20003088
 800774c:	2000308c 	.word	0x2000308c
 8007750:	2000307c 	.word	0x2000307c
 8007754:	e000ed04 	.word	0xe000ed04
 8007758:	20003078 	.word	0x20003078

0800775c <_get_ipsr>:
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 8007762:	f3ef 8305 	mrs	r3, IPSR
 8007766:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8007768:	687b      	ldr	r3, [r7, #4]
}
 800776a:	4618      	mov	r0, r3
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
	...

08007778 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b09a      	sub	sp, #104	; 0x68
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8007780:	4b7e      	ldr	r3, [pc, #504]	; (800797c <_tx_thread_system_suspend+0x204>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	667b      	str	r3, [r7, #100]	; 0x64
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007786:	f3ef 8310 	mrs	r3, PRIMASK
 800778a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800778c:	b672      	cpsid	i
    return(primask_value);
 800778e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8007790:	663b      	str	r3, [r7, #96]	; 0x60

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007796:	429a      	cmp	r2, r3
 8007798:	d112      	bne.n	80077c0 <_tx_thread_system_suspend+0x48>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800779e:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 80077a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d008      	beq.n	80077b8 <_tx_thread_system_suspend+0x40>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 80077a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ac:	d004      	beq.n	80077b8 <_tx_thread_system_suspend+0x40>
            {
            
                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	334c      	adds	r3, #76	; 0x4c
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 fa18 	bl	8007be8 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	4a70      	ldr	r2, [pc, #448]	; (8007980 <_tx_thread_system_suspend+0x208>)
 80077be:	6013      	str	r3, [r2, #0]
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80077c0:	4b70      	ldr	r3, [pc, #448]	; (8007984 <_tx_thread_system_suspend+0x20c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3b01      	subs	r3, #1
 80077c6:	4a6f      	ldr	r2, [pc, #444]	; (8007984 <_tx_thread_system_suspend+0x20c>)
 80077c8:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	f040 80a3 	bne.w	800791a <_tx_thread_system_suspend+0x1a2>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077de:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a1b      	ldr	r3, [r3, #32]
 80077e4:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 80077e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d015      	beq.n	800781a <_tx_thread_system_suspend+0xa2>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	643b      	str	r3, [r7, #64]	; 0x40

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80077f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077f8:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80077fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077fe:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8007800:	4a61      	ldr	r2, [pc, #388]	; (8007988 <_tx_thread_system_suspend+0x210>)
 8007802:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	429a      	cmp	r2, r3
 800780c:	d155      	bne.n	80078ba <_tx_thread_system_suspend+0x142>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800780e:	495e      	ldr	r1, [pc, #376]	; (8007988 <_tx_thread_system_suspend+0x210>)
 8007810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007812:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007818:	e04f      	b.n	80078ba <_tx_thread_system_suspend+0x142>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head 
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800781a:	4a5b      	ldr	r2, [pc, #364]	; (8007988 <_tx_thread_system_suspend+0x210>)
 800781c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800781e:	2100      	movs	r1, #0
 8007820:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8007824:	2201      	movs	r2, #1
 8007826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007828:	fa02 f303 	lsl.w	r3, r2, r3
 800782c:	653b      	str	r3, [r7, #80]	; 0x50
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800782e:	4b57      	ldr	r3, [pc, #348]	; (800798c <_tx_thread_system_suspend+0x214>)
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007834:	43db      	mvns	r3, r3
 8007836:	4013      	ands	r3, r2
 8007838:	4a54      	ldr	r2, [pc, #336]	; (800798c <_tx_thread_system_suspend+0x214>)
 800783a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800783c:	2300      	movs	r3, #0
 800783e:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8007840:	4b52      	ldr	r3, [pc, #328]	; (800798c <_tx_thread_system_suspend+0x214>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8007846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007848:	2b00      	cmp	r3, #0
 800784a:	d129      	bne.n	80078a0 <_tx_thread_system_suspend+0x128>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800784c:	4b50      	ldr	r3, [pc, #320]	; (8007990 <_tx_thread_system_suspend+0x218>)
 800784e:	2220      	movs	r2, #32
 8007850:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8007852:	4b50      	ldr	r3, [pc, #320]	; (8007994 <_tx_thread_system_suspend+0x21c>)
 8007854:	2200      	movs	r2, #0
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800785a:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800785c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785e:	f383 8810 	msr	PRIMASK, r3
}
 8007862:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007864:	4b47      	ldr	r3, [pc, #284]	; (8007984 <_tx_thread_system_suspend+0x20c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	647b      	str	r3, [r7, #68]	; 0x44
                if (combined_flags == ((ULONG) 0))
 800786a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800786c:	2b00      	cmp	r3, #0
 800786e:	d17d      	bne.n	800796c <_tx_thread_system_suspend+0x1f4>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007870:	4b49      	ldr	r3, [pc, #292]	; (8007998 <_tx_thread_system_suspend+0x220>)
 8007872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007876:	601a      	str	r2, [r3, #0]
    if (_get_ipsr() == 0)
 8007878:	f7ff ff70 	bl	800775c <_get_ipsr>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10c      	bne.n	800789c <_tx_thread_system_suspend+0x124>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007882:	f3ef 8310 	mrs	r3, PRIMASK
 8007886:	637b      	str	r3, [r7, #52]	; 0x34
    return(primask_value);
 8007888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        interrupt_save = __get_primask_value();
 800788a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800788c:	b662      	cpsie	i
}
 800788e:	bf00      	nop
 8007890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007892:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007896:	f383 8810 	msr	PRIMASK, r3
}
 800789a:	bf00      	nop
}
 800789c:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800789e:	e065      	b.n	800796c <_tx_thread_system_suspend+0x1f4>
            {
            
                /* Other threads at different priority levels are ready to run.  */
            
                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80078a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078a2:	fa93 f3a3 	rbit	r3, r3
 80078a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80078a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078aa:	fab3 f383 	clz	r3, r3
 80078ae:	653b      	str	r3, [r7, #80]	; 0x50

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 80078b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b4:	4413      	add	r3, r2
 80078b6:	4a36      	ldr	r2, [pc, #216]	; (8007990 <_tx_thread_system_suspend+0x218>)
 80078b8:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 80078ba:	4b36      	ldr	r3, [pc, #216]	; (8007994 <_tx_thread_system_suspend+0x21c>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d12a      	bne.n	800791a <_tx_thread_system_suspend+0x1a2>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80078c4:	4b32      	ldr	r3, [pc, #200]	; (8007990 <_tx_thread_system_suspend+0x218>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a2f      	ldr	r2, [pc, #188]	; (8007988 <_tx_thread_system_suspend+0x210>)
 80078ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078ce:	4a31      	ldr	r2, [pc, #196]	; (8007994 <_tx_thread_system_suspend+0x21c>)
 80078d0:	6013      	str	r3, [r2, #0]
 80078d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078d4:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80078d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d8:	f383 8810 	msr	PRIMASK, r3
}
 80078dc:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80078de:	4b29      	ldr	r3, [pc, #164]	; (8007984 <_tx_thread_system_suspend+0x20c>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	647b      	str	r3, [r7, #68]	; 0x44
            if (combined_flags == ((ULONG) 0))
 80078e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d142      	bne.n	8007970 <_tx_thread_system_suspend+0x1f8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80078ea:	4b2b      	ldr	r3, [pc, #172]	; (8007998 <_tx_thread_system_suspend+0x220>)
 80078ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078f0:	601a      	str	r2, [r3, #0]
    if (_get_ipsr() == 0)
 80078f2:	f7ff ff33 	bl	800775c <_get_ipsr>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10c      	bne.n	8007916 <_tx_thread_system_suspend+0x19e>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80078fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007900:	627b      	str	r3, [r7, #36]	; 0x24
    return(primask_value);
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_primask_value();
 8007904:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8007906:	b662      	cpsie	i
}
 8007908:	bf00      	nop
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	f383 8810 	msr	PRIMASK, r3
}
 8007914:	bf00      	nop
}
 8007916:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8007918:	e02a      	b.n	8007970 <_tx_thread_system_suspend+0x1f8>
 800791a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800791c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	f383 8810 	msr	PRIMASK, r3
}
 8007924:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8007926:	4b1b      	ldr	r3, [pc, #108]	; (8007994 <_tx_thread_system_suspend+0x21c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800792c:	429a      	cmp	r2, r3
 800792e:	d021      	beq.n	8007974 <_tx_thread_system_suspend+0x1fc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007930:	4b14      	ldr	r3, [pc, #80]	; (8007984 <_tx_thread_system_suspend+0x20c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	647b      	str	r3, [r7, #68]	; 0x44
        if (combined_flags == ((ULONG) 0))
 8007936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007938:	2b00      	cmp	r3, #0
 800793a:	d11b      	bne.n	8007974 <_tx_thread_system_suspend+0x1fc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800793c:	4b16      	ldr	r3, [pc, #88]	; (8007998 <_tx_thread_system_suspend+0x220>)
 800793e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007942:	601a      	str	r2, [r3, #0]
    if (_get_ipsr() == 0)
 8007944:	f7ff ff0a 	bl	800775c <_get_ipsr>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10c      	bne.n	8007968 <_tx_thread_system_suspend+0x1f0>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800794e:	f3ef 8310 	mrs	r3, PRIMASK
 8007952:	617b      	str	r3, [r7, #20]
    return(primask_value);
 8007954:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_primask_value();
 8007956:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8007958:	b662      	cpsie	i
}
 800795a:	bf00      	nop
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f383 8810 	msr	PRIMASK, r3
}
 8007966:	bf00      	nop
}
 8007968:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800796a:	e003      	b.n	8007974 <_tx_thread_system_suspend+0x1fc>
                return;
 800796c:	bf00      	nop
 800796e:	e002      	b.n	8007976 <_tx_thread_system_suspend+0x1fe>
            return;
 8007970:	bf00      	nop
 8007972:	e000      	b.n	8007976 <_tx_thread_system_suspend+0x1fe>
    return;
 8007974:	bf00      	nop
}
 8007976:	3768      	adds	r7, #104	; 0x68
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	20003078 	.word	0x20003078
 8007980:	2000367c 	.word	0x2000367c
 8007984:	20003110 	.word	0x20003110
 8007988:	20003090 	.word	0x20003090
 800798c:	20003088 	.word	0x20003088
 8007990:	2000308c 	.word	0x2000308c
 8007994:	2000307c 	.word	0x2000307c
 8007998:	e000ed04 	.word	0xe000ed04

0800799c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80079a2:	4b20      	ldr	r3, [pc, #128]	; (8007a24 <_tx_thread_time_slice+0x88>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80079a8:	f3ef 8310 	mrs	r3, PRIMASK
 80079ac:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80079ae:	b672      	cpsid	i
    return(primask_value);
 80079b0:	687b      	ldr	r3, [r7, #4]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 80079b2:	60bb      	str	r3, [r7, #8]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80079b4:	4b1c      	ldr	r3, [pc, #112]	; (8007a28 <_tx_thread_time_slice+0x8c>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d024      	beq.n	8007a0a <_tx_thread_time_slice+0x6e>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d120      	bne.n	8007a0a <_tx_thread_time_slice+0x6e>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	69da      	ldr	r2, [r3, #28]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	4a15      	ldr	r2, [pc, #84]	; (8007a2c <_tx_thread_time_slice+0x90>)
 80079d6:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d013      	beq.n	8007a0a <_tx_thread_time_slice+0x6e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d10d      	bne.n	8007a0a <_tx_thread_time_slice+0x6e>
                
                    /* Preemption-threshold is not being used by this thread.  */
        
                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	6a12      	ldr	r2, [r2, #32]
 80079f6:	490e      	ldr	r1, [pc, #56]	; (8007a30 <_tx_thread_time_slice+0x94>)
 80079f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
                    /* Designate the highest priority thread as the one to execute.  Don't use this 
                       thread's priority as an index just in case a higher priority thread is now 
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80079fc:	4b0d      	ldr	r3, [pc, #52]	; (8007a34 <_tx_thread_time_slice+0x98>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a0b      	ldr	r2, [pc, #44]	; (8007a30 <_tx_thread_time_slice+0x94>)
 8007a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a06:	4a0c      	ldr	r2, [pc, #48]	; (8007a38 <_tx_thread_time_slice+0x9c>)
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	f383 8810 	msr	PRIMASK, r3
}
 8007a14:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8007a16:	bf00      	nop
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	20003078 	.word	0x20003078
 8007a28:	20003120 	.word	0x20003120
 8007a2c:	2000367c 	.word	0x2000367c
 8007a30:	20003090 	.word	0x20003090
 8007a34:	2000308c 	.word	0x2000308c
 8007a38:	2000307c 	.word	0x2000307c

08007a3c <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b08a      	sub	sp, #40	; 0x28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007a48:	f3ef 8310 	mrs	r3, PRIMASK
 8007a4c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007a4e:	b672      	cpsid	i
    return(primask_value);
 8007a50:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts.  */
    TX_DISABLE
 8007a52:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a58:	2b04      	cmp	r3, #4
 8007a5a:	d10e      	bne.n	8007a7a <_tx_thread_timeout+0x3e>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8007a5c:	4b13      	ldr	r3, [pc, #76]	; (8007aac <_tx_thread_timeout+0x70>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3301      	adds	r3, #1
 8007a62:	4a12      	ldr	r2, [pc, #72]	; (8007aac <_tx_thread_timeout+0x70>)
 8007a64:	6013      	str	r3, [r2, #0]
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f383 8810 	msr	PRIMASK, r3
}
 8007a70:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8007a72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a74:	f7ff fd76 	bl	8007564 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8007a78:	e013      	b.n	8007aa2 <_tx_thread_timeout+0x66>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a7e:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a86:	61bb      	str	r3, [r7, #24]
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f383 8810 	msr	PRIMASK, r3
}
 8007a92:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <_tx_thread_timeout+0x66>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	69b9      	ldr	r1, [r7, #24]
 8007a9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007aa0:	4798      	blx	r3
}
 8007aa2:	bf00      	nop
 8007aa4:	3728      	adds	r7, #40	; 0x28
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	20003110 	.word	0x20003110

08007ab0 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8007aba:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007abc:	b672      	cpsid	i
    return(primask_value);
 8007abe:	687b      	ldr	r3, [r7, #4]

    /* Don't process in the ISR, wakeup the system timer thread to process the 
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8007ac0:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8007ac2:	4b09      	ldr	r3, [pc, #36]	; (8007ae8 <_tx_timer_expiration_process+0x38>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	4a07      	ldr	r2, [pc, #28]	; (8007ae8 <_tx_timer_expiration_process+0x38>)
 8007aca:	6013      	str	r3, [r2, #0]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	f383 8810 	msr	PRIMASK, r3
}
 8007ad6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8007ad8:	4804      	ldr	r0, [pc, #16]	; (8007aec <_tx_timer_expiration_process+0x3c>)
 8007ada:	f7ff fd43 	bl	8007564 <_tx_thread_system_resume>
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8007ade:	bf00      	nop
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20003110 	.word	0x20003110
 8007aec:	200031c0 	.word	0x200031c0

08007af0 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8007af0:	b590      	push	{r4, r7, lr}
 8007af2:	b089      	sub	sp, #36	; 0x24
 8007af4:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8007af6:	4b28      	ldr	r3, [pc, #160]	; (8007b98 <_tx_timer_initialize+0xa8>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8007afc:	4b27      	ldr	r3, [pc, #156]	; (8007b9c <_tx_timer_initialize+0xac>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8007b02:	4b27      	ldr	r3, [pc, #156]	; (8007ba0 <_tx_timer_initialize+0xb0>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8007b08:	4b26      	ldr	r3, [pc, #152]	; (8007ba4 <_tx_timer_initialize+0xb4>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8007b0e:	4b26      	ldr	r3, [pc, #152]	; (8007ba8 <_tx_timer_initialize+0xb8>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8007b14:	2280      	movs	r2, #128	; 0x80
 8007b16:	2100      	movs	r1, #0
 8007b18:	4824      	ldr	r0, [pc, #144]	; (8007bac <_tx_timer_initialize+0xbc>)
 8007b1a:	f000 fdd5 	bl	80086c8 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8007b1e:	4b24      	ldr	r3, [pc, #144]	; (8007bb0 <_tx_timer_initialize+0xc0>)
 8007b20:	4a22      	ldr	r2, [pc, #136]	; (8007bac <_tx_timer_initialize+0xbc>)
 8007b22:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8007b24:	4b23      	ldr	r3, [pc, #140]	; (8007bb4 <_tx_timer_initialize+0xc4>)
 8007b26:	4a21      	ldr	r2, [pc, #132]	; (8007bac <_tx_timer_initialize+0xbc>)
 8007b28:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8007b2a:	4b23      	ldr	r3, [pc, #140]	; (8007bb8 <_tx_timer_initialize+0xc8>)
 8007b2c:	4a23      	ldr	r2, [pc, #140]	; (8007bbc <_tx_timer_initialize+0xcc>)
 8007b2e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8007b30:	4b21      	ldr	r3, [pc, #132]	; (8007bb8 <_tx_timer_initialize+0xc8>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3304      	adds	r3, #4
 8007b36:	4a20      	ldr	r2, [pc, #128]	; (8007bb8 <_tx_timer_initialize+0xc8>)
 8007b38:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8007b3a:	4b21      	ldr	r3, [pc, #132]	; (8007bc0 <_tx_timer_initialize+0xd0>)
 8007b3c:	4a21      	ldr	r2, [pc, #132]	; (8007bc4 <_tx_timer_initialize+0xd4>)
 8007b3e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8007b40:	4b21      	ldr	r3, [pc, #132]	; (8007bc8 <_tx_timer_initialize+0xd8>)
 8007b42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007b46:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8007b48:	4b20      	ldr	r3, [pc, #128]	; (8007bcc <_tx_timer_initialize+0xdc>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 8007b4e:	4b1c      	ldr	r3, [pc, #112]	; (8007bc0 <_tx_timer_initialize+0xd0>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a1d      	ldr	r2, [pc, #116]	; (8007bc8 <_tx_timer_initialize+0xd8>)
 8007b54:	6812      	ldr	r2, [r2, #0]
 8007b56:	491d      	ldr	r1, [pc, #116]	; (8007bcc <_tx_timer_initialize+0xdc>)
 8007b58:	6809      	ldr	r1, [r1, #0]
 8007b5a:	481c      	ldr	r0, [pc, #112]	; (8007bcc <_tx_timer_initialize+0xdc>)
 8007b5c:	6800      	ldr	r0, [r0, #0]
 8007b5e:	2400      	movs	r4, #0
 8007b60:	9405      	str	r4, [sp, #20]
 8007b62:	2400      	movs	r4, #0
 8007b64:	9404      	str	r4, [sp, #16]
 8007b66:	9003      	str	r0, [sp, #12]
 8007b68:	9102      	str	r1, [sp, #8]
 8007b6a:	9201      	str	r2, [sp, #4]
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	4b18      	ldr	r3, [pc, #96]	; (8007bd0 <_tx_timer_initialize+0xe0>)
 8007b70:	4a18      	ldr	r2, [pc, #96]	; (8007bd4 <_tx_timer_initialize+0xe4>)
 8007b72:	4919      	ldr	r1, [pc, #100]	; (8007bd8 <_tx_timer_initialize+0xe8>)
 8007b74:	4819      	ldr	r0, [pc, #100]	; (8007bdc <_tx_timer_initialize+0xec>)
 8007b76:	f7ff fb15 	bl	80071a4 <_tx_thread_create>
 8007b7a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e5      	bne.n	8007b4e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8007b82:	4b17      	ldr	r3, [pc, #92]	; (8007be0 <_tx_timer_initialize+0xf0>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8007b88:	4b16      	ldr	r3, [pc, #88]	; (8007be4 <_tx_timer_initialize+0xf4>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8007b8e:	bf00      	nop
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd90      	pop	{r4, r7, pc}
 8007b96:	bf00      	nop
 8007b98:	2000311c 	.word	0x2000311c
 8007b9c:	2000367c 	.word	0x2000367c
 8007ba0:	20003120 	.word	0x20003120
 8007ba4:	200031b0 	.word	0x200031b0
 8007ba8:	200031bc 	.word	0x200031bc
 8007bac:	20003124 	.word	0x20003124
 8007bb0:	200031a4 	.word	0x200031a4
 8007bb4:	200031ac 	.word	0x200031ac
 8007bb8:	200031a8 	.word	0x200031a8
 8007bbc:	200031a0 	.word	0x200031a0
 8007bc0:	20003270 	.word	0x20003270
 8007bc4:	2000327c 	.word	0x2000327c
 8007bc8:	20003274 	.word	0x20003274
 8007bcc:	20003278 	.word	0x20003278
 8007bd0:	4154494d 	.word	0x4154494d
 8007bd4:	08007d1d 	.word	0x08007d1d
 8007bd8:	08008754 	.word	0x08008754
 8007bdc:	200031c0 	.word	0x200031c0
 8007be0:	200031b4 	.word	0x200031b4
 8007be4:	200031b8 	.word	0x200031b8

08007be8 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b089      	sub	sp, #36	; 0x24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d04a      	beq.n	8007c92 <_tx_timer_system_activate+0xaa>
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c02:	d046      	beq.n	8007c92 <_tx_timer_system_activate+0xaa>
        {
    
            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d142      	bne.n	8007c92 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	2b20      	cmp	r3, #32
 8007c10:	d902      	bls.n	8007c18 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8007c12:	231f      	movs	r3, #31
 8007c14:	61bb      	str	r3, [r7, #24]
 8007c16:	e002      	b.n	8007c1e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */
    
                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8007c1e:	4b20      	ldr	r3, [pc, #128]	; (8007ca0 <_tx_timer_system_activate+0xb8>)
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8007c2a:	4b1e      	ldr	r3, [pc, #120]	; (8007ca4 <_tx_timer_system_activate+0xbc>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	69fa      	ldr	r2, [r7, #28]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d30b      	bcc.n	8007c4c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8007c34:	4b1b      	ldr	r3, [pc, #108]	; (8007ca4 <_tx_timer_system_activate+0xbc>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	69fa      	ldr	r2, [r7, #28]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	109b      	asrs	r3, r3, #2
 8007c3e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8007c40:	4b19      	ldr	r3, [pc, #100]	; (8007ca8 <_tx_timer_system_activate+0xc0>)
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	61fb      	str	r3, [r7, #28]
                }
    
                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d109      	bne.n	8007c68 <_tx_timer_system_activate+0x80>
                {
                
                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	e011      	b.n	8007c8c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	69fa      	ldr	r2, [r7, #28]
 8007c90:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8007c92:	bf00      	nop
 8007c94:	3724      	adds	r7, #36	; 0x24
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	200031ac 	.word	0x200031ac
 8007ca4:	200031a8 	.word	0x200031a8
 8007ca8:	200031a4 	.word	0x200031a4

08007cac <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d026      	beq.n	8007d0e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d108      	bne.n	8007ce0 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d117      	bne.n	8007d08 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	e013      	b.n	8007d08 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d105      	bne.n	8007d08 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	619a      	str	r2, [r3, #24]
    }
}
 8007d0e:	bf00      	nop
 8007d10:	371c      	adds	r7, #28
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
	...

08007d1c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b094      	sub	sp, #80	; 0x50
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8007d24:	2300      	movs	r3, #0
 8007d26:	647b      	str	r3, [r7, #68]	; 0x44
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a6e      	ldr	r2, [pc, #440]	; (8007ee4 <_tx_timer_thread_entry+0x1c8>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	f040 80d5 	bne.w	8007edc <_tx_timer_thread_entry+0x1c0>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007d32:	f3ef 8310 	mrs	r3, PRIMASK
 8007d36:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007d38:	b672      	cpsid	i
    return(primask_value);
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {

            /* First, move the current list pointer and clear the timer 
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8007d3c:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8007d3e:	4b6a      	ldr	r3, [pc, #424]	; (8007ee8 <_tx_timer_thread_entry+0x1cc>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d003      	beq.n	8007d54 <_tx_timer_thread_entry+0x38>
            {
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f107 020c 	add.w	r2, r7, #12
 8007d52:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8007d54:	4b64      	ldr	r3, [pc, #400]	; (8007ee8 <_tx_timer_thread_entry+0x1cc>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8007d5c:	4b62      	ldr	r3, [pc, #392]	; (8007ee8 <_tx_timer_thread_entry+0x1cc>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3304      	adds	r3, #4
 8007d62:	4a61      	ldr	r2, [pc, #388]	; (8007ee8 <_tx_timer_thread_entry+0x1cc>)
 8007d64:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8007d66:	4b60      	ldr	r3, [pc, #384]	; (8007ee8 <_tx_timer_thread_entry+0x1cc>)
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	4b60      	ldr	r3, [pc, #384]	; (8007eec <_tx_timer_thread_entry+0x1d0>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d103      	bne.n	8007d7a <_tx_timer_thread_entry+0x5e>
            {
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
 8007d72:	4b5f      	ldr	r3, [pc, #380]	; (8007ef0 <_tx_timer_thread_entry+0x1d4>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a5c      	ldr	r2, [pc, #368]	; (8007ee8 <_tx_timer_thread_entry+0x1cc>)
 8007d78:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8007d7a:	4b5e      	ldr	r3, [pc, #376]	; (8007ef4 <_tx_timer_thread_entry+0x1d8>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	601a      	str	r2, [r3, #0]
 8007d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d82:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d86:	f383 8810 	msr	PRIMASK, r3
}
 8007d8a:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8007d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007d92:	b672      	cpsid	i
    return(primask_value);
 8007d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8007d96:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8007d98:	e07b      	b.n	8007e92 <_tx_timer_thread_entry+0x176>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	63bb      	str	r3, [r7, #56]	; 0x38
            
                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8007da4:	2300      	movs	r3, #0
 8007da6:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8007da8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d102      	bne.n	8007db6 <_tx_timer_thread_entry+0x9a>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8007db0:	2300      	movs	r3, #0
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	e00e      	b.n	8007dd4 <_tx_timer_thread_entry+0xb8>
                {

                    /* No, not the only expired timer.  */
            
                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8007db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	637b      	str	r3, [r7, #52]	; 0x34
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8007dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dc0:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8007dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dc6:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dca:	f107 020c 	add.w	r2, r7, #12
 8007dce:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd2:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really 
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8007dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b20      	cmp	r3, #32
 8007dda:	d911      	bls.n	8007e00 <_tx_timer_thread_entry+0xe4>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8007ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =  
 8007de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de6:	601a      	str	r2, [r3, #0]
                
                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8007de8:	2300      	movs	r3, #0
 8007dea:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8007dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dee:	f107 0208 	add.w	r2, r7, #8
 8007df2:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8007df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007df8:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8007dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dfc:	60bb      	str	r3, [r7, #8]
 8007dfe:	e01a      	b.n	8007e36 <_tx_timer_thread_entry+0x11a>
                    }
#endif
                  
                    /* Copy the calling function and ID into local variables before interrupts 
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8007e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	64bb      	str	r3, [r7, #72]	; 0x48
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8007e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8007e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e12:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8007e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d009      	beq.n	8007e30 <_tx_timer_thread_entry+0x114>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will 
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8007e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1e:	f107 0208 	add.w	r2, r7, #8
 8007e22:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8007e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e28:	611a      	str	r2, [r3, #16]
                        
                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8007e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e2c:	60bb      	str	r3, [r7, #8]
 8007e2e:	e002      	b.n	8007e36 <_tx_timer_thread_entry+0x11a>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8007e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e32:	2200      	movs	r2, #0
 8007e34:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8007e36:	4a30      	ldr	r2, [pc, #192]	; (8007ef8 <_tx_timer_thread_entry+0x1dc>)
 8007e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e3a:	6013      	str	r3, [r2, #0]
 8007e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e3e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	f383 8810 	msr	PRIMASK, r3
}
 8007e46:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8007e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <_tx_timer_thread_entry+0x138>
                {
            
                    (timeout_function) (timeout_param);
 8007e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e50:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007e52:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007e54:	f3ef 8310 	mrs	r3, PRIMASK
 8007e58:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007e5a:	b672      	cpsid	i
    return(primask_value);
 8007e5c:	6a3b      	ldr	r3, [r7, #32]
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8007e5e:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8007e60:	4b25      	ldr	r3, [pc, #148]	; (8007ef8 <_tx_timer_thread_entry+0x1dc>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d105      	bne.n	8007e7a <_tx_timer_thread_entry+0x15e>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8007e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e70:	2200      	movs	r2, #0
 8007e72:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8007e74:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007e76:	f7ff feb7 	bl	8007be8 <_tx_timer_system_activate>
 8007e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e7c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	f383 8810 	msr	PRIMASK, r3
}
 8007e84:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007e86:	f3ef 8310 	mrs	r3, PRIMASK
 8007e8a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007e8c:	b672      	cpsid	i
    return(primask_value);
 8007e8e:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8007e90:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (expired_timers != TX_NULL)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d180      	bne.n	8007d9a <_tx_timer_thread_entry+0x7e>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8007e98:	4b16      	ldr	r3, [pc, #88]	; (8007ef4 <_tx_timer_thread_entry+0x1d8>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d116      	bne.n	8007ece <_tx_timer_thread_entry+0x1b2>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8007ea0:	4b16      	ldr	r3, [pc, #88]	; (8007efc <_tx_timer_thread_entry+0x1e0>)
 8007ea2:	643b      	str	r3, [r7, #64]	; 0x40

                /* Set the status to suspending, in order to indicate the 
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8007ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ea6:	2203      	movs	r2, #3
 8007ea8:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8007eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eac:	2201      	movs	r2, #1
 8007eae:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8007eb0:	4b13      	ldr	r3, [pc, #76]	; (8007f00 <_tx_timer_thread_entry+0x1e4>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	4a12      	ldr	r2, [pc, #72]	; (8007f00 <_tx_timer_thread_entry+0x1e4>)
 8007eb8:	6013      	str	r3, [r2, #0]
 8007eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ebc:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f383 8810 	msr	PRIMASK, r3
}
 8007ec4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8007ec6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007ec8:	f7ff fc56 	bl	8007778 <_tx_thread_system_suspend>
 8007ecc:	e731      	b.n	8007d32 <_tx_timer_thread_entry+0x16>
 8007ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ed0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	f383 8810 	msr	PRIMASK, r3
}
 8007ed8:	bf00      	nop
            TX_DISABLE
 8007eda:	e72a      	b.n	8007d32 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8007edc:	bf00      	nop
 8007ede:	3750      	adds	r7, #80	; 0x50
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	4154494d 	.word	0x4154494d
 8007ee8:	200031ac 	.word	0x200031ac
 8007eec:	200031a8 	.word	0x200031a8
 8007ef0:	200031a4 	.word	0x200031a4
 8007ef4:	200031b0 	.word	0x200031b0
 8007ef8:	200031bc 	.word	0x200031bc
 8007efc:	200031c0 	.word	0x200031c0
 8007f00:	20003110 	.word	0x20003110

08007f04 <_get_ipsr>:
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 8007f0a:	f3ef 8305 	mrs	r3, IPSR
 8007f0e:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8007f10:	687b      	ldr	r3, [r7, #4]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
	...

08007f20 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, 
                                    ULONG memory_size,  ULONG wait_option)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
 8007f2c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	617b      	str	r3, [r7, #20]

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d102      	bne.n	8007f3e <_txe_byte_allocate+0x1e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007f38:	2302      	movs	r3, #2
 8007f3a:	617b      	str	r3, [r7, #20]
 8007f3c:	e028      	b.n	8007f90 <_txe_byte_allocate+0x70>
    }
    
    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a2c      	ldr	r2, [pc, #176]	; (8007ff4 <_txe_byte_allocate+0xd4>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d002      	beq.n	8007f4e <_txe_byte_allocate+0x2e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007f48:	2302      	movs	r3, #2
 8007f4a:	617b      	str	r3, [r7, #20]
 8007f4c:	e020      	b.n	8007f90 <_txe_byte_allocate+0x70>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d102      	bne.n	8007f5a <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8007f54:	2303      	movs	r3, #3
 8007f56:	617b      	str	r3, [r7, #20]
 8007f58:	e01a      	b.n	8007f90 <_txe_byte_allocate+0x70>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d102      	bne.n	8007f66 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8007f60:	2305      	movs	r3, #5
 8007f62:	617b      	str	r3, [r7, #20]
 8007f64:	e014      	b.n	8007f90 <_txe_byte_allocate+0x70>
    }
    
    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	69db      	ldr	r3, [r3, #28]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d902      	bls.n	8007f76 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8007f70:	2305      	movs	r3, #5
 8007f72:	617b      	str	r3, [r7, #20]
 8007f74:	e00c      	b.n	8007f90 <_txe_byte_allocate+0x70>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d009      	beq.n	8007f90 <_txe_byte_allocate+0x70>
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8007f7c:	f7ff ffc2 	bl	8007f04 <_get_ipsr>
 8007f80:	4602      	mov	r2, r0
 8007f82:	4b1d      	ldr	r3, [pc, #116]	; (8007ff8 <_txe_byte_allocate+0xd8>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <_txe_byte_allocate+0x70>
            {
        
                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8007f8c:	2304      	movs	r3, #4
 8007f8e:	617b      	str	r3, [r7, #20]
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR
    
    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d108      	bne.n	8007fa8 <_txe_byte_allocate+0x88>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8007f96:	4b19      	ldr	r3, [pc, #100]	; (8007ffc <_txe_byte_allocate+0xdc>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	613b      	str	r3, [r7, #16]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	4a18      	ldr	r2, [pc, #96]	; (8008000 <_txe_byte_allocate+0xe0>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d101      	bne.n	8007fa8 <_txe_byte_allocate+0x88>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8007fa4:	2313      	movs	r3, #19
 8007fa6:	617b      	str	r3, [r7, #20]
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d112      	bne.n	8007fd4 <_txe_byte_allocate+0xb4>
    {
    
        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8007fae:	f7ff ffa9 	bl	8007f04 <_get_ipsr>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	4b10      	ldr	r3, [pc, #64]	; (8007ff8 <_txe_byte_allocate+0xd8>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <_txe_byte_allocate+0xb4>
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8007fbe:	f7ff ffa1 	bl	8007f04 <_get_ipsr>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	4b0c      	ldr	r3, [pc, #48]	; (8007ff8 <_txe_byte_allocate+0xd8>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007fce:	d201      	bcs.n	8007fd4 <_txe_byte_allocate+0xb4>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8007fd0:	2313      	movs	r3, #19
 8007fd2:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d106      	bne.n	8007fe8 <_txe_byte_allocate+0xc8>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	68b9      	ldr	r1, [r7, #8]
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f7fe fd19 	bl	8006a18 <_tx_byte_allocate>
 8007fe6:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8007fe8:	697b      	ldr	r3, [r7, #20]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	42595445 	.word	0x42595445
 8007ff8:	20000010 	.word	0x20000010
 8007ffc:	20003078 	.word	0x20003078
 8008000:	200031c0 	.word	0x200031c0

08008004 <_get_ipsr>:
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 800800a:	f3ef 8305 	mrs	r3, IPSR
 800800e:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8008010:	687b      	ldr	r3, [r7, #4]
}
 8008012:	4618      	mov	r0, r3
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
	...

08008020 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b08e      	sub	sp, #56	; 0x38
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800802e:	2300      	movs	r3, #0
 8008030:	637b      	str	r3, [r7, #52]	; 0x34

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d102      	bne.n	800803e <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8008038:	2302      	movs	r3, #2
 800803a:	637b      	str	r3, [r7, #52]	; 0x34
 800803c:	e06f      	b.n	800811e <_txe_byte_pool_create+0xfe>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800803e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008040:	2b34      	cmp	r3, #52	; 0x34
 8008042:	d002      	beq.n	800804a <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8008044:	2302      	movs	r3, #2
 8008046:	637b      	str	r3, [r7, #52]	; 0x34
 8008048:	e069      	b.n	800811e <_txe_byte_pool_create+0xfe>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800804a:	f3ef 8310 	mrs	r3, PRIMASK
 800804e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008050:	b672      	cpsid	i
    return(primask_value);
 8008052:	69fb      	ldr	r3, [r7, #28]
    }
    else
    {
    
        /* Disable interrupts.  */
        TX_DISABLE
 8008054:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8008056:	4b39      	ldr	r3, [pc, #228]	; (800813c <_txe_byte_pool_create+0x11c>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	3301      	adds	r3, #1
 800805c:	4a37      	ldr	r2, [pc, #220]	; (800813c <_txe_byte_pool_create+0x11c>)
 800805e:	6013      	str	r3, [r2, #0]
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	f383 8810 	msr	PRIMASK, r3
}
 800806a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800806c:	4b34      	ldr	r3, [pc, #208]	; (8008140 <_txe_byte_pool_create+0x120>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8008072:	2300      	movs	r3, #0
 8008074:	633b      	str	r3, [r7, #48]	; 0x30
 8008076:	e009      	b.n	800808c <_txe_byte_pool_create+0x6c>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807c:	429a      	cmp	r2, r3
 800807e:	d00b      	beq.n	8008098 <_txe_byte_pool_create+0x78>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8008080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008084:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8008086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008088:	3301      	adds	r3, #1
 800808a:	633b      	str	r3, [r7, #48]	; 0x30
 800808c:	4b2d      	ldr	r3, [pc, #180]	; (8008144 <_txe_byte_pool_create+0x124>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008092:	429a      	cmp	r2, r3
 8008094:	d3f0      	bcc.n	8008078 <_txe_byte_pool_create+0x58>
 8008096:	e000      	b.n	800809a <_txe_byte_pool_create+0x7a>
                break;
 8008098:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800809a:	f3ef 8310 	mrs	r3, PRIMASK
 800809e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80080a0:	b672      	cpsid	i
    return(primask_value);
 80080a2:	697b      	ldr	r3, [r7, #20]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80080a4:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80080a6:	4b25      	ldr	r3, [pc, #148]	; (800813c <_txe_byte_pool_create+0x11c>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	3b01      	subs	r3, #1
 80080ac:	4a23      	ldr	r2, [pc, #140]	; (800813c <_txe_byte_pool_create+0x11c>)
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	f383 8810 	msr	PRIMASK, r3
}
 80080ba:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80080bc:	f7ff fa0e 	bl	80074dc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d102      	bne.n	80080ce <_txe_byte_pool_create+0xae>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 80080c8:	2302      	movs	r3, #2
 80080ca:	637b      	str	r3, [r7, #52]	; 0x34
 80080cc:	e027      	b.n	800811e <_txe_byte_pool_create+0xfe>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d102      	bne.n	80080da <_txe_byte_pool_create+0xba>
        {
    
            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 80080d4:	2303      	movs	r3, #3
 80080d6:	637b      	str	r3, [r7, #52]	; 0x34
 80080d8:	e021      	b.n	800811e <_txe_byte_pool_create+0xfe>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	2b63      	cmp	r3, #99	; 0x63
 80080de:	d802      	bhi.n	80080e6 <_txe_byte_pool_create+0xc6>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 80080e0:	2305      	movs	r3, #5
 80080e2:	637b      	str	r3, [r7, #52]	; 0x34
 80080e4:	e01b      	b.n	800811e <_txe_byte_pool_create+0xfe>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80080e6:	4b18      	ldr	r3, [pc, #96]	; (8008148 <_txe_byte_pool_create+0x128>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	627b      	str	r3, [r7, #36]	; 0x24

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	4a17      	ldr	r2, [pc, #92]	; (800814c <_txe_byte_pool_create+0x12c>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d101      	bne.n	80080f8 <_txe_byte_pool_create+0xd8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80080f4:	2313      	movs	r3, #19
 80080f6:	637b      	str	r3, [r7, #52]	; 0x34
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80080f8:	f7ff ff84 	bl	8008004 <_get_ipsr>
 80080fc:	4602      	mov	r2, r0
 80080fe:	4b14      	ldr	r3, [pc, #80]	; (8008150 <_txe_byte_pool_create+0x130>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4313      	orrs	r3, r2
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00a      	beq.n	800811e <_txe_byte_pool_create+0xfe>
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008108:	f7ff ff7c 	bl	8008004 <_get_ipsr>
 800810c:	4602      	mov	r2, r0
 800810e:	4b10      	ldr	r3, [pc, #64]	; (8008150 <_txe_byte_pool_create+0x130>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4313      	orrs	r3, r2
 8008114:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008118:	d201      	bcs.n	800811e <_txe_byte_pool_create+0xfe>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800811a:	2313      	movs	r3, #19
 800811c:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800811e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008120:	2b00      	cmp	r3, #0
 8008122:	d106      	bne.n	8008132 <_txe_byte_pool_create+0x112>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	68b9      	ldr	r1, [r7, #8]
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f7fe fdae 	bl	8006c8c <_tx_byte_pool_create>
 8008130:	6378      	str	r0, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8008132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008134:	4618      	mov	r0, r3
 8008136:	3738      	adds	r7, #56	; 0x38
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	20003110 	.word	0x20003110
 8008140:	20003068 	.word	0x20003068
 8008144:	2000306c 	.word	0x2000306c
 8008148:	20003078 	.word	0x20003078
 800814c:	200031c0 	.word	0x200031c0
 8008150:	20000010 	.word	0x20000010

08008154 <_get_ipsr>:
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 800815a:	f3ef 8305 	mrs	r3, IPSR
 800815e:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8008160:	687b      	ldr	r3, [r7, #4]
}
 8008162:	4618      	mov	r0, r3
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
	...

08008170 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, 
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b090      	sub	sp, #64	; 0x40
 8008174:	af02      	add	r7, sp, #8
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
 800817c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800817e:	2300      	movs	r3, #0
 8008180:	637b      	str	r3, [r7, #52]	; 0x34

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d102      	bne.n	800818e <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8008188:	2309      	movs	r3, #9
 800818a:	637b      	str	r3, [r7, #52]	; 0x34
 800818c:	e07d      	b.n	800828a <_txe_queue_create+0x11a>
    }
    
    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800818e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008190:	2b38      	cmp	r3, #56	; 0x38
 8008192:	d002      	beq.n	800819a <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8008194:	2309      	movs	r3, #9
 8008196:	637b      	str	r3, [r7, #52]	; 0x34
 8008198:	e077      	b.n	800828a <_txe_queue_create+0x11a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800819a:	f3ef 8310 	mrs	r3, PRIMASK
 800819e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80081a0:	b672      	cpsid	i
    return(primask_value);
 80081a2:	69fb      	ldr	r3, [r7, #28]
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80081a4:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80081a6:	4b41      	ldr	r3, [pc, #260]	; (80082ac <_txe_queue_create+0x13c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3301      	adds	r3, #1
 80081ac:	4a3f      	ldr	r2, [pc, #252]	; (80082ac <_txe_queue_create+0x13c>)
 80081ae:	6013      	str	r3, [r2, #0]
 80081b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b2:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	f383 8810 	msr	PRIMASK, r3
}
 80081ba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 80081bc:	4b3c      	ldr	r3, [pc, #240]	; (80082b0 <_txe_queue_create+0x140>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 80081c2:	2300      	movs	r3, #0
 80081c4:	633b      	str	r3, [r7, #48]	; 0x30
 80081c6:	e009      	b.n	80081dc <_txe_queue_create+0x6c>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d00b      	beq.n	80081e8 <_txe_queue_create+0x78>
            }
            else
            {
        
                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 80081d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 80081d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d8:	3301      	adds	r3, #1
 80081da:	633b      	str	r3, [r7, #48]	; 0x30
 80081dc:	4b35      	ldr	r3, [pc, #212]	; (80082b4 <_txe_queue_create+0x144>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d3f0      	bcc.n	80081c8 <_txe_queue_create+0x58>
 80081e6:	e000      	b.n	80081ea <_txe_queue_create+0x7a>
                break;
 80081e8:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80081ea:	f3ef 8310 	mrs	r3, PRIMASK
 80081ee:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80081f0:	b672      	cpsid	i
    return(primask_value);
 80081f2:	697b      	ldr	r3, [r7, #20]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80081f4:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80081f6:	4b2d      	ldr	r3, [pc, #180]	; (80082ac <_txe_queue_create+0x13c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	3b01      	subs	r3, #1
 80081fc:	4a2b      	ldr	r2, [pc, #172]	; (80082ac <_txe_queue_create+0x13c>)
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008202:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	f383 8810 	msr	PRIMASK, r3
}
 800820a:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800820c:	f7ff f966 	bl	80074dc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008214:	429a      	cmp	r2, r3
 8008216:	d102      	bne.n	800821e <_txe_queue_create+0xae>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 8008218:	2309      	movs	r3, #9
 800821a:	637b      	str	r3, [r7, #52]	; 0x34
 800821c:	e035      	b.n	800828a <_txe_queue_create+0x11a>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d102      	bne.n	800822a <_txe_queue_create+0xba>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 8008224:	2303      	movs	r3, #3
 8008226:	637b      	str	r3, [r7, #52]	; 0x34
 8008228:	e02f      	b.n	800828a <_txe_queue_create+0x11a>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d102      	bne.n	8008236 <_txe_queue_create+0xc6>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8008230:	2305      	movs	r3, #5
 8008232:	637b      	str	r3, [r7, #52]	; 0x34
 8008234:	e029      	b.n	800828a <_txe_queue_create+0x11a>
        }
    
        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b10      	cmp	r3, #16
 800823a:	d902      	bls.n	8008242 <_txe_queue_create+0xd2>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800823c:	2305      	movs	r3, #5
 800823e:	637b      	str	r3, [r7, #52]	; 0x34
 8008240:	e023      	b.n	800828a <_txe_queue_create+0x11a>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 8008242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008244:	089b      	lsrs	r3, r3, #2
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	429a      	cmp	r2, r3
 800824a:	d902      	bls.n	8008252 <_txe_queue_create+0xe2>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800824c:	2305      	movs	r3, #5
 800824e:	637b      	str	r3, [r7, #52]	; 0x34
 8008250:	e01b      	b.n	800828a <_txe_queue_create+0x11a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8008252:	4b19      	ldr	r3, [pc, #100]	; (80082b8 <_txe_queue_create+0x148>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	627b      	str	r3, [r7, #36]	; 0x24

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	4a18      	ldr	r2, [pc, #96]	; (80082bc <_txe_queue_create+0x14c>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d101      	bne.n	8008264 <_txe_queue_create+0xf4>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008260:	2313      	movs	r3, #19
 8008262:	637b      	str	r3, [r7, #52]	; 0x34
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008264:	f7ff ff76 	bl	8008154 <_get_ipsr>
 8008268:	4602      	mov	r2, r0
 800826a:	4b15      	ldr	r3, [pc, #84]	; (80082c0 <_txe_queue_create+0x150>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4313      	orrs	r3, r2
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00a      	beq.n	800828a <_txe_queue_create+0x11a>
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008274:	f7ff ff6e 	bl	8008154 <_get_ipsr>
 8008278:	4602      	mov	r2, r0
 800827a:	4b11      	ldr	r3, [pc, #68]	; (80082c0 <_txe_queue_create+0x150>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4313      	orrs	r3, r2
 8008280:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008284:	d201      	bcs.n	800828a <_txe_queue_create+0x11a>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8008286:	2313      	movs	r3, #19
 8008288:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800828a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800828c:	2b00      	cmp	r3, #0
 800828e:	d108      	bne.n	80082a2 <_txe_queue_create+0x132>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 8008290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	68b9      	ldr	r1, [r7, #8]
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f7fe ff02 	bl	80070a4 <_tx_queue_create>
 80082a0:	6378      	str	r0, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 80082a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3738      	adds	r7, #56	; 0x38
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	20003110 	.word	0x20003110
 80082b0:	20003048 	.word	0x20003048
 80082b4:	2000304c 	.word	0x2000304c
 80082b8:	20003078 	.word	0x20003078
 80082bc:	200031c0 	.word	0x200031c0
 80082c0:	20000010 	.word	0x20000010

080082c4 <_get_ipsr>:
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 80082ca:	f3ef 8305 	mrs	r3, IPSR
 80082ce:	607b      	str	r3, [r7, #4]
    return _ipsr;
 80082d0:	687b      	ldr	r3, [r7, #4]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
	...

080082e0 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b096      	sub	sp, #88	; 0x58
 80082e4:	af06      	add	r7, sp, #24
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
 80082ec:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80082ee:	2300      	movs	r3, #0
 80082f0:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d102      	bne.n	80082fe <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80082f8:	230e      	movs	r3, #14
 80082fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082fc:	e0b5      	b.n	800846a <_txe_thread_create+0x18a>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80082fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008300:	2bb0      	cmp	r3, #176	; 0xb0
 8008302:	d002      	beq.n	800830a <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8008304:	230e      	movs	r3, #14
 8008306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008308:	e0af      	b.n	800846a <_txe_thread_create+0x18a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800830a:	f3ef 8310 	mrs	r3, PRIMASK
 800830e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008310:	b672      	cpsid	i
    return(primask_value);
 8008312:	69bb      	ldr	r3, [r7, #24]
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8008314:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8008316:	4b62      	ldr	r3, [pc, #392]	; (80084a0 <_txe_thread_create+0x1c0>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	3301      	adds	r3, #1
 800831c:	4a60      	ldr	r2, [pc, #384]	; (80084a0 <_txe_thread_create+0x1c0>)
 800831e:	6013      	str	r3, [r2, #0]
 8008320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008322:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	f383 8810 	msr	PRIMASK, r3
}
 800832a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800832c:	2300      	movs	r3, #0
 800832e:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  _tx_thread_created_ptr;
 8008330:	4b5c      	ldr	r3, [pc, #368]	; (80084a4 <_txe_thread_create+0x1c4>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	633b      	str	r3, [r7, #48]	; 0x30
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8008336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008338:	62bb      	str	r3, [r7, #40]	; 0x28
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800833a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800833c:	3b01      	subs	r3, #1
 800833e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008340:	4413      	add	r3, r2
 8008342:	62bb      	str	r3, [r7, #40]	; 0x28
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8008344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008346:	627b      	str	r3, [r7, #36]	; 0x24
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8008348:	2300      	movs	r3, #0
 800834a:	637b      	str	r3, [r7, #52]	; 0x34
 800834c:	e02b      	b.n	80083a6 <_txe_thread_create+0xc6>
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008352:	429a      	cmp	r2, r3
 8008354:	d101      	bne.n	800835a <_txe_thread_create+0x7a>
            {
        
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8008356:	2301      	movs	r3, #1
 8008358:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835c:	2b01      	cmp	r3, #1
 800835e:	d028      	beq.n	80083b2 <_txe_thread_create+0xd2>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8008360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008366:	429a      	cmp	r2, r3
 8008368:	d308      	bcc.n	800837c <_txe_thread_create+0x9c>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800836a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008370:	429a      	cmp	r2, r3
 8008372:	d203      	bcs.n	800837c <_txe_thread_create+0x9c>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8008374:	2300      	movs	r3, #0
 8008376:	64bb      	str	r3, [r7, #72]	; 0x48
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8008378:	2301      	movs	r3, #1
 800837a:	63bb      	str	r3, [r7, #56]	; 0x38
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800837c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008382:	429a      	cmp	r2, r3
 8008384:	d308      	bcc.n	8008398 <_txe_thread_create+0xb8>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8008386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800838c:	429a      	cmp	r2, r3
 800838e:	d203      	bcs.n	8008398 <_txe_thread_create+0xb8>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8008390:	2300      	movs	r3, #0
 8008392:	64bb      	str	r3, [r7, #72]	; 0x48
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8008394:	2301      	movs	r3, #1
 8008396:	63bb      	str	r3, [r7, #56]	; 0x38
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8008398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800839e:	633b      	str	r3, [r7, #48]	; 0x30
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80083a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a2:	3301      	adds	r3, #1
 80083a4:	637b      	str	r3, [r7, #52]	; 0x34
 80083a6:	4b40      	ldr	r3, [pc, #256]	; (80084a8 <_txe_thread_create+0x1c8>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d3ce      	bcc.n	800834e <_txe_thread_create+0x6e>
 80083b0:	e000      	b.n	80083b4 <_txe_thread_create+0xd4>
                break;
 80083b2:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80083b4:	f3ef 8310 	mrs	r3, PRIMASK
 80083b8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80083ba:	b672      	cpsid	i
    return(primask_value);
 80083bc:	693b      	ldr	r3, [r7, #16]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80083be:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80083c0:	4b37      	ldr	r3, [pc, #220]	; (80084a0 <_txe_thread_create+0x1c0>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	4a36      	ldr	r2, [pc, #216]	; (80084a0 <_txe_thread_create+0x1c0>)
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083cc:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f383 8810 	msr	PRIMASK, r3
}
 80083d4:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80083d6:	f7ff f881 	bl	80074dc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083de:	429a      	cmp	r2, r3
 80083e0:	d102      	bne.n	80083e8 <_txe_thread_create+0x108>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80083e2:	230e      	movs	r3, #14
 80083e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083e6:	e040      	b.n	800846a <_txe_thread_create+0x18a>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80083e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d102      	bne.n	80083f4 <_txe_thread_create+0x114>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80083ee:	2303      	movs	r3, #3
 80083f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083f2:	e03a      	b.n	800846a <_txe_thread_create+0x18a>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d102      	bne.n	8008400 <_txe_thread_create+0x120>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80083fa:	2303      	movs	r3, #3
 80083fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083fe:	e034      	b.n	800846a <_txe_thread_create+0x18a>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8008400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008402:	2bc7      	cmp	r3, #199	; 0xc7
 8008404:	d802      	bhi.n	800840c <_txe_thread_create+0x12c>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8008406:	2305      	movs	r3, #5
 8008408:	63fb      	str	r3, [r7, #60]	; 0x3c
 800840a:	e02e      	b.n	800846a <_txe_thread_create+0x18a>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800840c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800840e:	2b1f      	cmp	r3, #31
 8008410:	d902      	bls.n	8008418 <_txe_thread_create+0x138>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8008412:	230f      	movs	r3, #15
 8008414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008416:	e028      	b.n	800846a <_txe_thread_create+0x18a>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8008418:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800841a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800841c:	429a      	cmp	r2, r3
 800841e:	d902      	bls.n	8008426 <_txe_thread_create+0x146>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8008420:	2318      	movs	r3, #24
 8008422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008424:	e021      	b.n	800846a <_txe_thread_create+0x18a>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8008426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008428:	2b01      	cmp	r3, #1
 800842a:	d902      	bls.n	8008432 <_txe_thread_create+0x152>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800842c:	2310      	movs	r3, #16
 800842e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008430:	e01b      	b.n	800846a <_txe_thread_create+0x18a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8008432:	4b1e      	ldr	r3, [pc, #120]	; (80084ac <_txe_thread_create+0x1cc>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	623b      	str	r3, [r7, #32]

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	4a1d      	ldr	r2, [pc, #116]	; (80084b0 <_txe_thread_create+0x1d0>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d101      	bne.n	8008444 <_txe_thread_create+0x164>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008440:	2313      	movs	r3, #19
 8008442:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008444:	f7ff ff3e 	bl	80082c4 <_get_ipsr>
 8008448:	4602      	mov	r2, r0
 800844a:	4b1a      	ldr	r3, [pc, #104]	; (80084b4 <_txe_thread_create+0x1d4>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4313      	orrs	r3, r2
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00a      	beq.n	800846a <_txe_thread_create+0x18a>
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008454:	f7ff ff36 	bl	80082c4 <_get_ipsr>
 8008458:	4602      	mov	r2, r0
 800845a:	4b16      	ldr	r3, [pc, #88]	; (80084b4 <_txe_thread_create+0x1d4>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4313      	orrs	r3, r2
 8008460:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008464:	d201      	bcs.n	800846a <_txe_thread_create+0x18a>
                {
            
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8008466:	2313      	movs	r3, #19
 8008468:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800846a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800846c:	2b00      	cmp	r3, #0
 800846e:	d112      	bne.n	8008496 <_txe_thread_create+0x1b6>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8008470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008472:	9305      	str	r3, [sp, #20]
 8008474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008476:	9304      	str	r3, [sp, #16]
 8008478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800847a:	9303      	str	r3, [sp, #12]
 800847c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800847e:	9302      	str	r3, [sp, #8]
 8008480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008482:	9301      	str	r3, [sp, #4]
 8008484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	68b9      	ldr	r1, [r7, #8]
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f7fe fe88 	bl	80071a4 <_tx_thread_create>
 8008494:	63f8      	str	r0, [r7, #60]	; 0x3c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8008496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008498:	4618      	mov	r0, r3
 800849a:	3740      	adds	r7, #64	; 0x40
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	20003110 	.word	0x20003110
 80084a4:	20003080 	.word	0x20003080
 80084a8:	20003084 	.word	0x20003084
 80084ac:	20003078 	.word	0x20003078
 80084b0:	200031c0 	.word	0x200031c0
 80084b4:	20000010 	.word	0x20000010

080084b8 <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80084be:	f3ef 8310 	mrs	r3, PRIMASK
 80084c2:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80084c4:	b672      	cpsid	i
    return(primask_value);
 80084c6:	687b      	ldr	r3, [r7, #4]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 80084c8:	60fb      	str	r3, [r7, #12]


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 80084ca:	4b07      	ldr	r3, [pc, #28]	; (80084e8 <tx_low_power_enter+0x30>)
 80084cc:	2201      	movs	r2, #1
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	f383 8810 	msr	PRIMASK, r3
}
 80084da:	bf00      	nop

    /* User code to enter low power mode. This allows the application to power down
       peripherals and put the processor in sleep mode.
    */
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
 80084dc:	f7f8 fa1c 	bl	8000918 <App_ThreadX_LowPower_Enter>
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 80084e0:	bf00      	nop
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	20003680 	.word	0x20003680

080084ec <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 80084f2:	4b0a      	ldr	r3, [pc, #40]	; (800851c <tx_low_power_exit+0x30>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00c      	beq.n	8008514 <tx_low_power_exit+0x28>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 80084fa:	4b08      	ldr	r3, [pc, #32]	; (800851c <tx_low_power_exit+0x30>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	601a      	str	r2, [r3, #0]

        /* User code to exit low power mode and reprogram the
           timer to the desired interrupt frequency.  */
#ifdef TX_LOW_POWER_USER_EXIT
        TX_LOW_POWER_USER_EXIT;
 8008500:	f7f8 fa11 	bl	8000926 <App_ThreadX_LowPower_Exit>
#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
 8008504:	2300      	movs	r3, #0
 8008506:	607b      	str	r3, [r7, #4]
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d002      	beq.n	8008514 <tx_low_power_exit+0x28>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f806 	bl	8008520 <tx_time_increment>
        }
    }
}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	20003680 	.word	0x20003680

08008520 <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b08a      	sub	sp, #40	; 0x28
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 8099 	beq.w	8008662 <tx_time_increment+0x142>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008530:	f3ef 8310 	mrs	r3, PRIMASK
 8008534:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008536:	b672      	cpsid	i
    return(primask_value);
 8008538:	693b      	ldr	r3, [r7, #16]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800853a:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 800853c:	4b4b      	ldr	r3, [pc, #300]	; (800866c <tx_time_increment+0x14c>)
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4413      	add	r3, r2
 8008544:	4a49      	ldr	r2, [pc, #292]	; (800866c <tx_time_increment+0x14c>)
 8008546:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 8008548:	4b49      	ldr	r3, [pc, #292]	; (8008670 <tx_time_increment+0x150>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00e      	beq.n	800856e <tx_time_increment+0x4e>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 8008550:	4b47      	ldr	r3, [pc, #284]	; (8008670 <tx_time_increment+0x150>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	429a      	cmp	r2, r3
 8008558:	d206      	bcs.n	8008568 <tx_time_increment+0x48>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 800855a:	4b45      	ldr	r3, [pc, #276]	; (8008670 <tx_time_increment+0x150>)
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	4a43      	ldr	r2, [pc, #268]	; (8008670 <tx_time_increment+0x150>)
 8008564:	6013      	str	r3, [r2, #0]
 8008566:	e002      	b.n	800856e <tx_time_increment+0x4e>
        }
        else
        {
            _tx_timer_time_slice =  1;
 8008568:	4b41      	ldr	r3, [pc, #260]	; (8008670 <tx_time_increment+0x150>)
 800856a:	2201      	movs	r2, #1
 800856c:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 800856e:	4b41      	ldr	r3, [pc, #260]	; (8008674 <tx_time_increment+0x154>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 8008574:	2300      	movs	r3, #0
 8008576:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 8008578:	2300      	movs	r3, #0
 800857a:	627b      	str	r3, [r7, #36]	; 0x24
 800857c:	e046      	b.n	800860c <tx_time_increment+0xec>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 800857e:	6a3b      	ldr	r3, [r7, #32]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d034      	beq.n	80085f0 <tx_time_increment+0xd0>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b20      	cmp	r3, #32
 8008592:	d908      	bls.n	80085a6 <tx_time_increment+0x86>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	4413      	add	r3, r2
 800859c:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	e003      	b.n	80085ae <tx_time_increment+0x8e>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 80085a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a8:	1c5a      	adds	r2, r3, #1
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	69fa      	ldr	r2, [r7, #28]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d1e6      	bne.n	800858c <tx_time_increment+0x6c>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	2200      	movs	r2, #0
 80085c6:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d103      	bne.n	80085d6 <tx_time_increment+0xb6>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	61bb      	str	r3, [r7, #24]
 80085d4:	e009      	b.n	80085ea <tx_time_increment+0xca>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	6a3a      	ldr	r2, [r7, #32]
 80085dc:	6812      	ldr	r2, [r2, #0]
 80085de:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	695a      	ldr	r2, [r3, #20]
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	2200      	movs	r2, #0
 80085ee:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 80085f0:	6a3b      	ldr	r3, [r7, #32]
 80085f2:	3304      	adds	r3, #4
 80085f4:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 80085f6:	4b20      	ldr	r3, [pc, #128]	; (8008678 <tx_time_increment+0x158>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	6a3a      	ldr	r2, [r7, #32]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d302      	bcc.n	8008606 <tx_time_increment+0xe6>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 8008600:	4b1e      	ldr	r3, [pc, #120]	; (800867c <tx_time_increment+0x15c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 8008606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008608:	3301      	adds	r3, #1
 800860a:	627b      	str	r3, [r7, #36]	; 0x24
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	2b1f      	cmp	r3, #31
 8008610:	d9b5      	bls.n	800857e <tx_time_increment+0x5e>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 8008612:	4b1a      	ldr	r3, [pc, #104]	; (800867c <tx_time_increment+0x15c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a17      	ldr	r2, [pc, #92]	; (8008674 <tx_time_increment+0x154>)
 8008618:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 800861a:	e019      	b.n	8008650 <tx_time_increment+0x130>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	429a      	cmp	r2, r3
 800862e:	d206      	bcs.n	800863e <tx_time_increment+0x11e>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	1ad2      	subs	r2, r2, r3
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	601a      	str	r2, [r3, #0]
 800863c:	e002      	b.n	8008644 <tx_time_increment+0x124>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	2201      	movs	r2, #1
 8008642:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	2200      	movs	r2, #0
 8008648:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 800864a:	69f8      	ldr	r0, [r7, #28]
 800864c:	f7ff facc 	bl	8007be8 <_tx_timer_system_activate>
    while (temp_list_head)
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1e2      	bne.n	800861c <tx_time_increment+0xfc>
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f383 8810 	msr	PRIMASK, r3
}
 8008660:	e000      	b.n	8008664 <tx_time_increment+0x144>
        return;
 8008662:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8008664:	3728      	adds	r7, #40	; 0x28
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	2000311c 	.word	0x2000311c
 8008670:	2000367c 	.word	0x2000367c
 8008674:	200031ac 	.word	0x200031ac
 8008678:	200031a8 	.word	0x200031a8
 800867c:	200031a4 	.word	0x200031a4

08008680 <__libc_init_array>:
 8008680:	b570      	push	{r4, r5, r6, lr}
 8008682:	4d0d      	ldr	r5, [pc, #52]	; (80086b8 <__libc_init_array+0x38>)
 8008684:	2600      	movs	r6, #0
 8008686:	4c0d      	ldr	r4, [pc, #52]	; (80086bc <__libc_init_array+0x3c>)
 8008688:	1b64      	subs	r4, r4, r5
 800868a:	10a4      	asrs	r4, r4, #2
 800868c:	42a6      	cmp	r6, r4
 800868e:	d109      	bne.n	80086a4 <__libc_init_array+0x24>
 8008690:	4d0b      	ldr	r5, [pc, #44]	; (80086c0 <__libc_init_array+0x40>)
 8008692:	2600      	movs	r6, #0
 8008694:	4c0b      	ldr	r4, [pc, #44]	; (80086c4 <__libc_init_array+0x44>)
 8008696:	f000 f81f 	bl	80086d8 <_init>
 800869a:	1b64      	subs	r4, r4, r5
 800869c:	10a4      	asrs	r4, r4, #2
 800869e:	42a6      	cmp	r6, r4
 80086a0:	d105      	bne.n	80086ae <__libc_init_array+0x2e>
 80086a2:	bd70      	pop	{r4, r5, r6, pc}
 80086a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086a8:	3601      	adds	r6, #1
 80086aa:	4798      	blx	r3
 80086ac:	e7ee      	b.n	800868c <__libc_init_array+0xc>
 80086ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b2:	3601      	adds	r6, #1
 80086b4:	4798      	blx	r3
 80086b6:	e7f2      	b.n	800869e <__libc_init_array+0x1e>
 80086b8:	080087f0 	.word	0x080087f0
 80086bc:	080087f0 	.word	0x080087f0
 80086c0:	080087f0 	.word	0x080087f0
 80086c4:	080087f4 	.word	0x080087f4

080086c8 <memset>:
 80086c8:	4402      	add	r2, r0
 80086ca:	4603      	mov	r3, r0
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d100      	bne.n	80086d2 <memset+0xa>
 80086d0:	4770      	bx	lr
 80086d2:	f803 1b01 	strb.w	r1, [r3], #1
 80086d6:	e7f9      	b.n	80086cc <memset+0x4>

080086d8 <_init>:
 80086d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086da:	bf00      	nop
 80086dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086de:	bc08      	pop	{r3}
 80086e0:	469e      	mov	lr, r3
 80086e2:	4770      	bx	lr

080086e4 <_fini>:
 80086e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e6:	bf00      	nop
 80086e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ea:	bc08      	pop	{r3}
 80086ec:	469e      	mov	lr, r3
 80086ee:	4770      	bx	lr
