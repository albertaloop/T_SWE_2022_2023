
StateMachine-1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075b8  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080077ac  080077ac  000177ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007854  08007854  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007854  08007854  00017854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800785c  0800785c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800785c  0800785c  0001785c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007860  08007860  00017860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fec  20000010  08007874  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ffc  08007874  00020ffc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027bfd  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059da  00000000  00000000  00047c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002098  00000000  00000000  0004d620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d78  00000000  00000000  0004f6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032cfd  00000000  00000000  00051430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000272b5  00000000  00000000  0008412d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001407de  00000000  00000000  000ab3e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ebbc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000852c  00000000  00000000  001ebc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000010 	.word	0x20000010
 8000210:	00000000 	.word	0x00000000
 8000214:	08007794 	.word	0x08007794

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000014 	.word	0x20000014
 8000230:	08007794 	.word	0x08007794

08000234 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000234:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000236:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800023a:	4917      	ldr	r1, [pc, #92]	; (8000298 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 800023c:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000240:	4816      	ldr	r0, [pc, #88]	; (800029c <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000242:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000244:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 8000248:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800024a:	4815      	ldr	r0, [pc, #84]	; (80002a0 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800024c:	4912      	ldr	r1, [pc, #72]	; (8000298 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 800024e:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000250:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000252:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000256:	4913      	ldr	r1, [pc, #76]	; (80002a4 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 8000258:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800025a:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 800025e:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 8000260:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 8000264:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 8000268:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 800026c:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000270:	490d      	ldr	r1, [pc, #52]	; (80002a8 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 8000272:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 8000276:	4770      	bx	lr

08000278 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 8000278:	f7ff bffe 	b.w	8000278 <__tx_BadHandler>

0800027c <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 800027c:	b501      	push	{r0, lr}

    /* Do interrupt handler work here */
    /* .... */

    POP     {r0,lr}
 800027e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000282:	4770      	bx	lr

08000284 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 8000284:	b501      	push	{r0, lr}
    BL      _tx_timer_interrupt
 8000286:	f000 f89f 	bl	80003c8 <_tx_timer_interrupt>
    POP     {r0,lr}
 800028a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 800028e:	4770      	bx	lr

08000290 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000290:	f7ff bffe 	b.w	8000290 <__tx_NMIHandler>

08000294 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000294:	f7ff bffe 	b.w	8000294 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000298:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 800029c:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002a0:	200009ec 	.word	0x200009ec
    LDR     r1, =SYSTICK_CYCLES
 80002a4:	0010c8df 	.word	0x0010c8df
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002a8:	40ff0000 	.word	0x40ff0000

080002ac <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002ac:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002b0:	4a31      	ldr	r2, [pc, #196]	; (8000378 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002b2:	6010      	str	r0, [r2, #0]

#ifdef __ARM_PCS_VFP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002b4:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002b8:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002bc:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002c0:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002c2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002c6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002ca:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002ce:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002d2:	f3bf 8f6f 	isb	sy

080002d6 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002d6:	e7fe      	b.n	80002d6 <__tx_wait_here>

080002d8 <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002d8:	4828      	ldr	r0, [pc, #160]	; (800037c <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002da:	4a29      	ldr	r2, [pc, #164]	; (8000380 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 80002dc:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002e0:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002e2:	b191      	cbz	r1, 800030a <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002e4:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002e6:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002ea:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002ee:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002f2:	d101      	bne.n	80002f8 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002f4:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002f8 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002f8:	4c22      	ldr	r4, [pc, #136]	; (8000384 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002fa:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002fe:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000302:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000304:	b10d      	cbz	r5, 800030a <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000306:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000308:	6023      	str	r3, [r4, #0]

0800030a <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 800030a:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800030c:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800030e:	b1d1      	cbz	r1, 8000346 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000310:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 8000312:	b662      	cpsie	i

08000314 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000314:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000316:	4c1b      	ldr	r4, [pc, #108]	; (8000384 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000318:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800031a:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800031e:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000320:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000322:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000326:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800032a:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800032e:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000332:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000336:	d101      	bne.n	800033c <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000338:	ecbc 8a10 	vldmia	ip!, {s16-s31}

0800033c <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 800033c:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000340:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000344:	4770      	bx	lr

08000346 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000346:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000348:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800034a:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 800034c:	b949      	cbnz	r1, 8000362 <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 800034e:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 8000350:	f007 f910 	bl	8007574 <tx_low_power_enter>
    POP     {r0-r3}
 8000354:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000356:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 8000358:	f007 f926 	bl	80075a8 <tx_low_power_exit>
    POP     {r0-r3}
 800035c:	bc0f      	pop	{r0, r1, r2, r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800035e:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 8000360:	e7f1      	b.n	8000346 <__tx_ts_wait>

08000362 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 8000362:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000366:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 800036a:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */
    CPSIE   i                                       // Enable interrupts
 800036e:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 8000370:	e7d0      	b.n	8000314 <__tx_ts_restore>
 8000372:	bf00      	nop

08000374 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 8000374:	4770      	bx	lr
 8000376:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000378:	20000a88 	.word	0x20000a88
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800037c:	200009f0 	.word	0x200009f0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000380:	200009f4 	.word	0x200009f4
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000384:	20000ff4 	.word	0x20000ff4

08000388 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000388:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 800038a:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 800038e:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 8000392:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 8000396:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000398:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 800039c:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 800039e:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003a0:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003a2:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003a4:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003a6:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003a8:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003aa:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003ae:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003b2:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003b4:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003b6:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003ba:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003bc:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003c2:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003c4:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003c6:	4770      	bx	lr

080003c8 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003c8:	4922      	ldr	r1, [pc, #136]	; (8000454 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003ca:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003cc:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003d0:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003d2:	4b21      	ldr	r3, [pc, #132]	; (8000458 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003d4:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003d6:	b13a      	cbz	r2, 80003e8 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003d8:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003dc:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003de:	b91a      	cbnz	r2, 80003e8 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003e0:	4b1e      	ldr	r3, [pc, #120]	; (800045c <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 80003e2:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003e6:	6018      	str	r0, [r3, #0]

080003e8 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003e8:	491d      	ldr	r1, [pc, #116]	; (8000460 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003ea:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003ec:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003ee:	b122      	cbz	r2, 80003fa <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003f0:	4b1c      	ldr	r3, [pc, #112]	; (8000464 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 80003f2:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003f6:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003f8:	e008      	b.n	800040c <__tx_timer_done>

080003fa <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003fa:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003fe:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000400:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000402:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000404:	d101      	bne.n	800040a <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000406:	4b19      	ldr	r3, [pc, #100]	; (800046c <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000408:	6818      	ldr	r0, [r3, #0]

0800040a <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800040a:	6008      	str	r0, [r1, #0]

0800040c <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800040e:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000410:	b912      	cbnz	r2, 8000418 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000412:	4914      	ldr	r1, [pc, #80]	; (8000464 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000414:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000416:	b1c8      	cbz	r0, 800044c <__tx_timer_nothing_expired>

08000418 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000418:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800041a:	4912      	ldr	r1, [pc, #72]	; (8000464 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800041c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800041e:	b108      	cbz	r0, 8000424 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000420:	f006 fdd6 	bl	8006fd0 <_tx_timer_expiration_process>

08000424 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000424:	4b0d      	ldr	r3, [pc, #52]	; (800045c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000426:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000428:	b172      	cbz	r2, 8000448 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800042a:	f006 fd47 	bl	8006ebc <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800042e:	4810      	ldr	r0, [pc, #64]	; (8000470 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000430:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000432:	b949      	cbnz	r1, 8000448 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000434:	480f      	ldr	r0, [pc, #60]	; (8000474 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000436:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000438:	4a0f      	ldr	r2, [pc, #60]	; (8000478 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800043a:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 800043c:	480f      	ldr	r0, [pc, #60]	; (800047c <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800043e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000442:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000444:	d000      	beq.n	8000448 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000446:	6002      	str	r2, [r0, #0]

08000448 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000448:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

0800044c <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 800044c:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000450:	4770      	bx	lr
 8000452:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000454:	20000a94 	.word	0x20000a94
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000458:	20000ff4 	.word	0x20000ff4
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800045c:	20000a98 	.word	0x20000a98
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000460:	20000b24 	.word	0x20000b24
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000464:	20000b28 	.word	0x20000b28
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000468:	20000b20 	.word	0x20000b20
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800046c:	20000b1c 	.word	0x20000b1c
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000470:	20000a88 	.word	0x20000a88
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000474:	200009f0 	.word	0x200009f0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000478:	200009f4 	.word	0x200009f4
    LDR     r0, =0xE000ED04                         // Build address of control register
 800047c:	e000ed04 	.word	0xe000ed04

08000480 <__aeabi_uldivmod>:
 8000480:	b953      	cbnz	r3, 8000498 <__aeabi_uldivmod+0x18>
 8000482:	b94a      	cbnz	r2, 8000498 <__aeabi_uldivmod+0x18>
 8000484:	2900      	cmp	r1, #0
 8000486:	bf08      	it	eq
 8000488:	2800      	cmpeq	r0, #0
 800048a:	bf1c      	itt	ne
 800048c:	f04f 31ff 	movne.w	r1, #4294967295
 8000490:	f04f 30ff 	movne.w	r0, #4294967295
 8000494:	f000 b982 	b.w	800079c <__aeabi_idiv0>
 8000498:	f1ad 0c08 	sub.w	ip, sp, #8
 800049c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004a0:	f000 f806 	bl	80004b0 <__udivmoddi4>
 80004a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004ac:	b004      	add	sp, #16
 80004ae:	4770      	bx	lr

080004b0 <__udivmoddi4>:
 80004b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80004b6:	4604      	mov	r4, r0
 80004b8:	460f      	mov	r7, r1
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d148      	bne.n	8000550 <__udivmoddi4+0xa0>
 80004be:	428a      	cmp	r2, r1
 80004c0:	4694      	mov	ip, r2
 80004c2:	d961      	bls.n	8000588 <__udivmoddi4+0xd8>
 80004c4:	fab2 f382 	clz	r3, r2
 80004c8:	b143      	cbz	r3, 80004dc <__udivmoddi4+0x2c>
 80004ca:	f1c3 0120 	rsb	r1, r3, #32
 80004ce:	409f      	lsls	r7, r3
 80004d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d4:	409c      	lsls	r4, r3
 80004d6:	fa20 f101 	lsr.w	r1, r0, r1
 80004da:	430f      	orrs	r7, r1
 80004dc:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	fbb7 f6f1 	udiv	r6, r7, r1
 80004ea:	fb01 7716 	mls	r7, r1, r6, r7
 80004ee:	fb06 f00e 	mul.w	r0, r6, lr
 80004f2:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80004f6:	4290      	cmp	r0, r2
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x5c>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f106 37ff 	add.w	r7, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x5a>
 8000504:	4290      	cmp	r0, r2
 8000506:	f200 8137 	bhi.w	8000778 <__udivmoddi4+0x2c8>
 800050a:	463e      	mov	r6, r7
 800050c:	1a12      	subs	r2, r2, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb2 f0f1 	udiv	r0, r2, r1
 8000514:	fb01 2210 	mls	r2, r1, r0, r2
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x86>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 32ff 	add.w	r2, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x84>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 811c 	bhi.w	800076c <__udivmoddi4+0x2bc>
 8000534:	4610      	mov	r0, r2
 8000536:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053a:	eba4 040e 	sub.w	r4, r4, lr
 800053e:	2600      	movs	r6, #0
 8000540:	b11d      	cbz	r5, 800054a <__udivmoddi4+0x9a>
 8000542:	40dc      	lsrs	r4, r3
 8000544:	2300      	movs	r3, #0
 8000546:	e9c5 4300 	strd	r4, r3, [r5]
 800054a:	4631      	mov	r1, r6
 800054c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000550:	428b      	cmp	r3, r1
 8000552:	d909      	bls.n	8000568 <__udivmoddi4+0xb8>
 8000554:	2d00      	cmp	r5, #0
 8000556:	f000 80fd 	beq.w	8000754 <__udivmoddi4+0x2a4>
 800055a:	2600      	movs	r6, #0
 800055c:	e9c5 0100 	strd	r0, r1, [r5]
 8000560:	4630      	mov	r0, r6
 8000562:	4631      	mov	r1, r6
 8000564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000568:	fab3 f683 	clz	r6, r3
 800056c:	2e00      	cmp	r6, #0
 800056e:	d14b      	bne.n	8000608 <__udivmoddi4+0x158>
 8000570:	428b      	cmp	r3, r1
 8000572:	f0c0 80f2 	bcc.w	800075a <__udivmoddi4+0x2aa>
 8000576:	4282      	cmp	r2, r0
 8000578:	f240 80ef 	bls.w	800075a <__udivmoddi4+0x2aa>
 800057c:	4630      	mov	r0, r6
 800057e:	2d00      	cmp	r5, #0
 8000580:	d0e3      	beq.n	800054a <__udivmoddi4+0x9a>
 8000582:	e9c5 4700 	strd	r4, r7, [r5]
 8000586:	e7e0      	b.n	800054a <__udivmoddi4+0x9a>
 8000588:	b902      	cbnz	r2, 800058c <__udivmoddi4+0xdc>
 800058a:	deff      	udf	#255	; 0xff
 800058c:	fab2 f382 	clz	r3, r2
 8000590:	2b00      	cmp	r3, #0
 8000592:	f040 809d 	bne.w	80006d0 <__udivmoddi4+0x220>
 8000596:	1a89      	subs	r1, r1, r2
 8000598:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800059c:	b297      	uxth	r7, r2
 800059e:	2601      	movs	r6, #1
 80005a0:	0c20      	lsrs	r0, r4, #16
 80005a2:	fbb1 f2fe 	udiv	r2, r1, lr
 80005a6:	fb0e 1112 	mls	r1, lr, r2, r1
 80005aa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005ae:	fb07 f002 	mul.w	r0, r7, r2
 80005b2:	4288      	cmp	r0, r1
 80005b4:	d90f      	bls.n	80005d6 <__udivmoddi4+0x126>
 80005b6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ba:	f102 38ff 	add.w	r8, r2, #4294967295
 80005be:	bf2c      	ite	cs
 80005c0:	f04f 0901 	movcs.w	r9, #1
 80005c4:	f04f 0900 	movcc.w	r9, #0
 80005c8:	4288      	cmp	r0, r1
 80005ca:	d903      	bls.n	80005d4 <__udivmoddi4+0x124>
 80005cc:	f1b9 0f00 	cmp.w	r9, #0
 80005d0:	f000 80cf 	beq.w	8000772 <__udivmoddi4+0x2c2>
 80005d4:	4642      	mov	r2, r8
 80005d6:	1a09      	subs	r1, r1, r0
 80005d8:	b2a4      	uxth	r4, r4
 80005da:	fbb1 f0fe 	udiv	r0, r1, lr
 80005de:	fb0e 1110 	mls	r1, lr, r0, r1
 80005e2:	fb00 f707 	mul.w	r7, r0, r7
 80005e6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80005ea:	42a7      	cmp	r7, r4
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x150>
 80005ee:	eb1c 0404 	adds.w	r4, ip, r4
 80005f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f6:	d202      	bcs.n	80005fe <__udivmoddi4+0x14e>
 80005f8:	42a7      	cmp	r7, r4
 80005fa:	f200 80b4 	bhi.w	8000766 <__udivmoddi4+0x2b6>
 80005fe:	4608      	mov	r0, r1
 8000600:	1be4      	subs	r4, r4, r7
 8000602:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000606:	e79b      	b.n	8000540 <__udivmoddi4+0x90>
 8000608:	f1c6 0720 	rsb	r7, r6, #32
 800060c:	40b3      	lsls	r3, r6
 800060e:	fa01 f406 	lsl.w	r4, r1, r6
 8000612:	fa22 fc07 	lsr.w	ip, r2, r7
 8000616:	40f9      	lsrs	r1, r7
 8000618:	40b2      	lsls	r2, r6
 800061a:	ea4c 0c03 	orr.w	ip, ip, r3
 800061e:	fa20 f307 	lsr.w	r3, r0, r7
 8000622:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000626:	431c      	orrs	r4, r3
 8000628:	fa1f fe8c 	uxth.w	lr, ip
 800062c:	fa00 f306 	lsl.w	r3, r0, r6
 8000630:	0c20      	lsrs	r0, r4, #16
 8000632:	fbb1 f8f9 	udiv	r8, r1, r9
 8000636:	fb09 1118 	mls	r1, r9, r8, r1
 800063a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800063e:	fb08 f00e 	mul.w	r0, r8, lr
 8000642:	4288      	cmp	r0, r1
 8000644:	d90f      	bls.n	8000666 <__udivmoddi4+0x1b6>
 8000646:	eb1c 0101 	adds.w	r1, ip, r1
 800064a:	f108 3aff 	add.w	sl, r8, #4294967295
 800064e:	bf2c      	ite	cs
 8000650:	f04f 0b01 	movcs.w	fp, #1
 8000654:	f04f 0b00 	movcc.w	fp, #0
 8000658:	4288      	cmp	r0, r1
 800065a:	d903      	bls.n	8000664 <__udivmoddi4+0x1b4>
 800065c:	f1bb 0f00 	cmp.w	fp, #0
 8000660:	f000 808d 	beq.w	800077e <__udivmoddi4+0x2ce>
 8000664:	46d0      	mov	r8, sl
 8000666:	1a09      	subs	r1, r1, r0
 8000668:	b2a4      	uxth	r4, r4
 800066a:	fbb1 f0f9 	udiv	r0, r1, r9
 800066e:	fb09 1110 	mls	r1, r9, r0, r1
 8000672:	fb00 fe0e 	mul.w	lr, r0, lr
 8000676:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800067a:	458e      	cmp	lr, r1
 800067c:	d907      	bls.n	800068e <__udivmoddi4+0x1de>
 800067e:	eb1c 0101 	adds.w	r1, ip, r1
 8000682:	f100 34ff 	add.w	r4, r0, #4294967295
 8000686:	d201      	bcs.n	800068c <__udivmoddi4+0x1dc>
 8000688:	458e      	cmp	lr, r1
 800068a:	d87f      	bhi.n	800078c <__udivmoddi4+0x2dc>
 800068c:	4620      	mov	r0, r4
 800068e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000692:	eba1 010e 	sub.w	r1, r1, lr
 8000696:	fba0 9802 	umull	r9, r8, r0, r2
 800069a:	4541      	cmp	r1, r8
 800069c:	464c      	mov	r4, r9
 800069e:	46c6      	mov	lr, r8
 80006a0:	d302      	bcc.n	80006a8 <__udivmoddi4+0x1f8>
 80006a2:	d106      	bne.n	80006b2 <__udivmoddi4+0x202>
 80006a4:	454b      	cmp	r3, r9
 80006a6:	d204      	bcs.n	80006b2 <__udivmoddi4+0x202>
 80006a8:	3801      	subs	r0, #1
 80006aa:	ebb9 0402 	subs.w	r4, r9, r2
 80006ae:	eb68 0e0c 	sbc.w	lr, r8, ip
 80006b2:	2d00      	cmp	r5, #0
 80006b4:	d070      	beq.n	8000798 <__udivmoddi4+0x2e8>
 80006b6:	1b1a      	subs	r2, r3, r4
 80006b8:	eb61 010e 	sbc.w	r1, r1, lr
 80006bc:	fa22 f306 	lsr.w	r3, r2, r6
 80006c0:	fa01 f707 	lsl.w	r7, r1, r7
 80006c4:	40f1      	lsrs	r1, r6
 80006c6:	2600      	movs	r6, #0
 80006c8:	431f      	orrs	r7, r3
 80006ca:	e9c5 7100 	strd	r7, r1, [r5]
 80006ce:	e73c      	b.n	800054a <__udivmoddi4+0x9a>
 80006d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80006d4:	f1c3 0020 	rsb	r0, r3, #32
 80006d8:	fa01 f203 	lsl.w	r2, r1, r3
 80006dc:	fa21 f600 	lsr.w	r6, r1, r0
 80006e0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80006e4:	fa24 f100 	lsr.w	r1, r4, r0
 80006e8:	fa1f f78c 	uxth.w	r7, ip
 80006ec:	409c      	lsls	r4, r3
 80006ee:	4311      	orrs	r1, r2
 80006f0:	fbb6 f0fe 	udiv	r0, r6, lr
 80006f4:	0c0a      	lsrs	r2, r1, #16
 80006f6:	fb0e 6610 	mls	r6, lr, r0, r6
 80006fa:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80006fe:	fb00 f607 	mul.w	r6, r0, r7
 8000702:	4296      	cmp	r6, r2
 8000704:	d90e      	bls.n	8000724 <__udivmoddi4+0x274>
 8000706:	eb1c 0202 	adds.w	r2, ip, r2
 800070a:	f100 38ff 	add.w	r8, r0, #4294967295
 800070e:	bf2c      	ite	cs
 8000710:	f04f 0901 	movcs.w	r9, #1
 8000714:	f04f 0900 	movcc.w	r9, #0
 8000718:	4296      	cmp	r6, r2
 800071a:	d902      	bls.n	8000722 <__udivmoddi4+0x272>
 800071c:	f1b9 0f00 	cmp.w	r9, #0
 8000720:	d031      	beq.n	8000786 <__udivmoddi4+0x2d6>
 8000722:	4640      	mov	r0, r8
 8000724:	1b92      	subs	r2, r2, r6
 8000726:	b289      	uxth	r1, r1
 8000728:	fbb2 f6fe 	udiv	r6, r2, lr
 800072c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000730:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000734:	fb06 f207 	mul.w	r2, r6, r7
 8000738:	428a      	cmp	r2, r1
 800073a:	d907      	bls.n	800074c <__udivmoddi4+0x29c>
 800073c:	eb1c 0101 	adds.w	r1, ip, r1
 8000740:	f106 38ff 	add.w	r8, r6, #4294967295
 8000744:	d201      	bcs.n	800074a <__udivmoddi4+0x29a>
 8000746:	428a      	cmp	r2, r1
 8000748:	d823      	bhi.n	8000792 <__udivmoddi4+0x2e2>
 800074a:	4646      	mov	r6, r8
 800074c:	1a89      	subs	r1, r1, r2
 800074e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000752:	e725      	b.n	80005a0 <__udivmoddi4+0xf0>
 8000754:	462e      	mov	r6, r5
 8000756:	4628      	mov	r0, r5
 8000758:	e6f7      	b.n	800054a <__udivmoddi4+0x9a>
 800075a:	1a84      	subs	r4, r0, r2
 800075c:	eb61 0303 	sbc.w	r3, r1, r3
 8000760:	2001      	movs	r0, #1
 8000762:	461f      	mov	r7, r3
 8000764:	e70b      	b.n	800057e <__udivmoddi4+0xce>
 8000766:	4464      	add	r4, ip
 8000768:	3802      	subs	r0, #2
 800076a:	e749      	b.n	8000600 <__udivmoddi4+0x150>
 800076c:	4464      	add	r4, ip
 800076e:	3802      	subs	r0, #2
 8000770:	e6e1      	b.n	8000536 <__udivmoddi4+0x86>
 8000772:	3a02      	subs	r2, #2
 8000774:	4461      	add	r1, ip
 8000776:	e72e      	b.n	80005d6 <__udivmoddi4+0x126>
 8000778:	3e02      	subs	r6, #2
 800077a:	4462      	add	r2, ip
 800077c:	e6c6      	b.n	800050c <__udivmoddi4+0x5c>
 800077e:	f1a8 0802 	sub.w	r8, r8, #2
 8000782:	4461      	add	r1, ip
 8000784:	e76f      	b.n	8000666 <__udivmoddi4+0x1b6>
 8000786:	3802      	subs	r0, #2
 8000788:	4462      	add	r2, ip
 800078a:	e7cb      	b.n	8000724 <__udivmoddi4+0x274>
 800078c:	3802      	subs	r0, #2
 800078e:	4461      	add	r1, ip
 8000790:	e77d      	b.n	800068e <__udivmoddi4+0x1de>
 8000792:	3e02      	subs	r6, #2
 8000794:	4461      	add	r1, ip
 8000796:	e7d9      	b.n	800074c <__udivmoddi4+0x29c>
 8000798:	462e      	mov	r6, r5
 800079a:	e6d6      	b.n	800054a <__udivmoddi4+0x9a>

0800079c <__aeabi_idiv0>:
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop

080007a0 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af02      	add	r7, sp, #8
 80007a6:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007a8:	2334      	movs	r3, #52	; 0x34
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b0:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <tx_application_define+0x34>)
 80007b2:	4909      	ldr	r1, [pc, #36]	; (80007d8 <tx_application_define+0x38>)
 80007b4:	4809      	ldr	r0, [pc, #36]	; (80007dc <tx_application_define+0x3c>)
 80007b6:	f006 fe43 	bl	8007440 <_txe_byte_pool_create>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d104      	bne.n	80007ca <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <tx_application_define+0x3c>)
 80007c2:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 80007c4:	68f8      	ldr	r0, [r7, #12]
 80007c6:	f000 f80b 	bl	80007e0 <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000002c 	.word	0x2000002c
 80007d8:	080077ac 	.word	0x080077ac
 80007dc:	2000042c 	.word	0x2000042c

080007e0 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 80007f0:	68fb      	ldr	r3, [r7, #12]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <App_ThreadX_LowPower_Enter>:
  * @brief  App_ThreadX_LowPower_Enter
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Enter(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */

  /* USER CODE END  App_ThreadX_LowPower_Enter */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <App_ThreadX_LowPower_Exit>:
  * @brief  App_ThreadX_LowPower_Exit
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Exit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Exit */

  /* USER CODE END  App_ThreadX_LowPower_Exit */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 800081e:	f005 ff19 	bl	8006654 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000834:	4907      	ldr	r1, [pc, #28]	; (8000854 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4313      	orrs	r3, r2
 800083a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800083e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4013      	ands	r3, r2
 8000844:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000846:	68fb      	ldr	r3, [r7, #12]
}
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	40021000 	.word	0x40021000

08000858 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000862:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000864:	4907      	ldr	r1, [pc, #28]	; (8000884 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4313      	orrs	r3, r2
 800086a:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <LL_APB1_GRP2_EnableClock+0x2c>)
 800086e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4013      	ands	r3, r2
 8000874:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000876:	68fb      	ldr	r3, [r7, #12]
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	40021000 	.word	0x40021000

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f000 ff59 	bl	8001742 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000890:	f000 f816 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000894:	f000 fa88 	bl	8000da8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000898:	f000 f874 	bl	8000984 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 800089c:	f000 f8e8 	bl	8000a70 <MX_FDCAN1_Init>
  MX_LPUART1_UART_Init();
 80008a0:	f000 f940 	bl	8000b24 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 80008a4:	f000 f98c 	bl	8000bc0 <MX_USART3_UART_Init>
  MX_RTC_Init();
 80008a8:	f000 f9d6 	bl	8000c58 <MX_RTC_Init>
  MX_UCPD1_Init();
 80008ac:	f000 fa1e 	bl	8000cec <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 80008b0:	f000 fa52 	bl	8000d58 <MX_USB_PCD_Init>
  MX_ICACHE_Init();
 80008b4:	f000 f922 	bl	8000afc <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80008b8:	f7ff ffaf 	bl	800081a <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <main+0x34>
	...

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b098      	sub	sp, #96	; 0x60
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0318 	add.w	r3, r7, #24
 80008ca:	2248      	movs	r2, #72	; 0x48
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f006 ff58 	bl	8007784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80008e2:	2000      	movs	r0, #0
 80008e4:	f002 fc8c 	bl	8003200 <HAL_PWREx_ControlVoltageScaling>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80008ee:	f000 fba1 	bl	8001034 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008f2:	f002 fc67 	bl	80031c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008f6:	4b22      	ldr	r3, [pc, #136]	; (8000980 <SystemClock_Config+0xc0>)
 80008f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008fc:	4a20      	ldr	r2, [pc, #128]	; (8000980 <SystemClock_Config+0xc0>)
 80008fe:	f023 0318 	bic.w	r3, r3, #24
 8000902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8000906:	2334      	movs	r3, #52	; 0x34
 8000908:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800090a:	2381      	movs	r3, #129	; 0x81
 800090c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800090e:	2301      	movs	r3, #1
 8000910:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000912:	2301      	movs	r3, #1
 8000914:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000916:	2300      	movs	r3, #0
 8000918:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800091a:	2360      	movs	r3, #96	; 0x60
 800091c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091e:	2302      	movs	r3, #2
 8000920:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000922:	2301      	movs	r3, #1
 8000924:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000926:	2301      	movs	r3, #1
 8000928:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 800092a:	2337      	movs	r3, #55	; 0x37
 800092c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800092e:	2307      	movs	r3, #7
 8000930:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000932:	2302      	movs	r3, #2
 8000934:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000936:	2302      	movs	r3, #2
 8000938:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093a:	f107 0318 	add.w	r3, r7, #24
 800093e:	4618      	mov	r0, r3
 8000940:	f002 fcee 	bl	8003320 <HAL_RCC_OscConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800094a:	f000 fb73 	bl	8001034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094e:	230f      	movs	r3, #15
 8000950:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000952:	2303      	movs	r3, #3
 8000954:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2105      	movs	r1, #5
 8000966:	4618      	mov	r0, r3
 8000968:	f003 f9bc 	bl	8003ce4 <HAL_RCC_ClockConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000972:	f000 fb5f 	bl	8001034 <Error_Handler>
  }
}
 8000976:	bf00      	nop
 8000978:	3760      	adds	r7, #96	; 0x60
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
 80009a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009a6:	4b2f      	ldr	r3, [pc, #188]	; (8000a64 <MX_ADC1_Init+0xe0>)
 80009a8:	4a2f      	ldr	r2, [pc, #188]	; (8000a68 <MX_ADC1_Init+0xe4>)
 80009aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009ac:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <MX_ADC1_Init+0xe0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009b2:	4b2c      	ldr	r3, [pc, #176]	; (8000a64 <MX_ADC1_Init+0xe0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009b8:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <MX_ADC1_Init+0xe0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009be:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <MX_ADC1_Init+0xe0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009c4:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <MX_ADC1_Init+0xe0>)
 80009c6:	2204      	movs	r2, #4
 80009c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <MX_ADC1_Init+0xe0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009d0:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <MX_ADC1_Init+0xe0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80009d6:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <MX_ADC1_Init+0xe0>)
 80009d8:	2201      	movs	r2, #1
 80009da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009dc:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <MX_ADC1_Init+0xe0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009e4:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <MX_ADC1_Init+0xe0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_ADC1_Init+0xe0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009f0:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <MX_ADC1_Init+0xe0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009f8:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_ADC1_Init+0xe0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009fe:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <MX_ADC1_Init+0xe0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a06:	4817      	ldr	r0, [pc, #92]	; (8000a64 <MX_ADC1_Init+0xe0>)
 8000a08:	f001 f876 	bl	8001af8 <HAL_ADC_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a12:	f000 fb0f 	bl	8001034 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4810      	ldr	r0, [pc, #64]	; (8000a64 <MX_ADC1_Init+0xe0>)
 8000a22:	f001 fdcb 	bl	80025bc <HAL_ADCEx_MultiModeConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a2c:	f000 fb02 	bl	8001034 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a30:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_ADC1_Init+0xe8>)
 8000a32:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a34:	2306      	movs	r3, #6
 8000a36:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a3c:	237f      	movs	r3, #127	; 0x7f
 8000a3e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a40:	2304      	movs	r3, #4
 8000a42:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_ADC1_Init+0xe0>)
 8000a4e:	f001 f9a5 	bl	8001d9c <HAL_ADC_ConfigChannel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000a58:	f000 faec 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	; 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000460 	.word	0x20000460
 8000a68:	42028000 	.word	0x42028000
 8000a6c:	0c900008 	.word	0x0c900008

08000a70 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <MX_FDCAN1_Init+0x84>)
 8000a76:	4a20      	ldr	r2, [pc, #128]	; (8000af8 <MX_FDCAN1_Init+0x88>)
 8000a78:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000a7a:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <MX_FDCAN1_Init+0x84>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <MX_FDCAN1_Init+0x84>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a86:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <MX_FDCAN1_Init+0x84>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <MX_FDCAN1_Init+0x84>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <MX_FDCAN1_Init+0x84>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <MX_FDCAN1_Init+0x84>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <MX_FDCAN1_Init+0x84>)
 8000aa0:	2210      	movs	r2, #16
 8000aa2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MX_FDCAN1_Init+0x84>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_FDCAN1_Init+0x84>)
 8000aac:	2202      	movs	r2, #2
 8000aae:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ab0:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_FDCAN1_Init+0x84>)
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_FDCAN1_Init+0x84>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000abc:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <MX_FDCAN1_Init+0x84>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_FDCAN1_Init+0x84>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <MX_FDCAN1_Init+0x84>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_FDCAN1_Init+0x84>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <MX_FDCAN1_Init+0x84>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_FDCAN1_Init+0x84>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <MX_FDCAN1_Init+0x84>)
 8000ae2:	f001 feef 	bl	80028c4 <HAL_FDCAN_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000aec:	f000 faa2 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200004c8 	.word	0x200004c8
 8000af8:	4000a400 	.word	0x4000a400

08000afc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000b00:	2000      	movs	r0, #0
 8000b02:	f002 fa1f 	bl	8002f44 <HAL_ICACHE_ConfigAssociativityMode>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000b0c:	f000 fa92 	bl	8001034 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000b10:	f002 fa38 	bl	8002f84 <HAL_ICACHE_Enable>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000b1a:	f000 fa8b 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b28:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <MX_LPUART1_UART_Init+0x90>)
 8000b2a:	4a23      	ldr	r2, [pc, #140]	; (8000bb8 <MX_LPUART1_UART_Init+0x94>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000b2e:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <MX_LPUART1_UART_Init+0x90>)
 8000b30:	4a22      	ldr	r2, [pc, #136]	; (8000bbc <MX_LPUART1_UART_Init+0x98>)
 8000b32:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b34:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <MX_LPUART1_UART_Init+0x90>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b3a:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <MX_LPUART1_UART_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b40:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <MX_LPUART1_UART_Init+0x90>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b46:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <MX_LPUART1_UART_Init+0x90>)
 8000b48:	220c      	movs	r2, #12
 8000b4a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4c:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <MX_LPUART1_UART_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <MX_LPUART1_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <MX_LPUART1_UART_Init+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <MX_LPUART1_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_LPUART1_UART_Init+0x90>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b6a:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <MX_LPUART1_UART_Init+0x90>)
 8000b6c:	f004 fce6 	bl	800553c <HAL_UART_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000b76:	f000 fa5d 	bl	8001034 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <MX_LPUART1_UART_Init+0x90>)
 8000b7e:	f005 f9d3 	bl	8005f28 <HAL_UARTEx_SetTxFifoThreshold>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000b88:	f000 fa54 	bl	8001034 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <MX_LPUART1_UART_Init+0x90>)
 8000b90:	f005 fa08 	bl	8005fa4 <HAL_UARTEx_SetRxFifoThreshold>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000b9a:	f000 fa4b 	bl	8001034 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_LPUART1_UART_Init+0x90>)
 8000ba0:	f005 f989 	bl	8005eb6 <HAL_UARTEx_DisableFifoMode>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000baa:	f000 fa43 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2000052c 	.word	0x2000052c
 8000bb8:	40008000 	.word	0x40008000
 8000bbc:	00033324 	.word	0x00033324

08000bc0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bc6:	4a23      	ldr	r2, [pc, #140]	; (8000c54 <MX_USART3_UART_Init+0x94>)
 8000bc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c08:	4811      	ldr	r0, [pc, #68]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c0a:	f004 fc97 	bl	800553c <HAL_UART_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c14:	f000 fa0e 	bl	8001034 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	480d      	ldr	r0, [pc, #52]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c1c:	f005 f984 	bl	8005f28 <HAL_UARTEx_SetTxFifoThreshold>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c26:	f000 fa05 	bl	8001034 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4808      	ldr	r0, [pc, #32]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c2e:	f005 f9b9 	bl	8005fa4 <HAL_UARTEx_SetRxFifoThreshold>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c38:	f000 f9fc 	bl	8001034 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <MX_USART3_UART_Init+0x90>)
 8000c3e:	f005 f93a 	bl	8005eb6 <HAL_UARTEx_DisableFifoMode>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c48:	f000 f9f4 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200005bc 	.word	0x200005bc
 8000c54:	40004800 	.word	0x40004800

08000c58 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000c5e:	463b      	mov	r3, r7
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
 8000c6c:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <MX_RTC_Init+0x8c>)
 8000c70:	4a1d      	ldr	r2, [pc, #116]	; (8000ce8 <MX_RTC_Init+0x90>)
 8000c72:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <MX_RTC_Init+0x8c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_RTC_Init+0x8c>)
 8000c7c:	227f      	movs	r2, #127	; 0x7f
 8000c7e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <MX_RTC_Init+0x8c>)
 8000c82:	22ff      	movs	r2, #255	; 0xff
 8000c84:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_RTC_Init+0x8c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_RTC_Init+0x8c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_RTC_Init+0x8c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_RTC_Init+0x8c>)
 8000c9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c9e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <MX_RTC_Init+0x8c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ca6:	480f      	ldr	r0, [pc, #60]	; (8000ce4 <MX_RTC_Init+0x8c>)
 8000ca8:	f004 f844 	bl	8004d34 <HAL_RTC_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000cb2:	f000 f9bf 	bl	8001034 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <MX_RTC_Init+0x8c>)
 8000ccc:	f004 f938 	bl	8004f40 <HAL_RTCEx_PrivilegeModeSet>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000cd6:	f000 f9ad 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000064c 	.word	0x2000064c
 8000ce8:	40002800 	.word	0x40002800

08000cec <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
 8000d00:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000d02:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000d06:	f7ff fda7 	bl	8000858 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	f7ff fd8c 	bl	8000828 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f7ff fd89 	bl	8000828 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d1a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d20:	2300      	movs	r3, #0
 8000d22:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	463b      	mov	r3, r7
 8000d26:	4619      	mov	r1, r3
 8000d28:	4809      	ldr	r0, [pc, #36]	; (8000d50 <MX_UCPD1_Init+0x64>)
 8000d2a:	f005 fb12 	bl	8006352 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d32:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d34:	2303      	movs	r3, #3
 8000d36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4804      	ldr	r0, [pc, #16]	; (8000d54 <MX_UCPD1_Init+0x68>)
 8000d42:	f005 fb06 	bl	8006352 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	42020400 	.word	0x42020400
 8000d54:	42020000 	.word	0x42020000

08000d58 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000d5c:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <MX_USB_PCD_Init+0x48>)
 8000d5e:	4a11      	ldr	r2, [pc, #68]	; (8000da4 <MX_USB_PCD_Init+0x4c>)
 8000d60:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_USB_PCD_Init+0x48>)
 8000d64:	2208      	movs	r2, #8
 8000d66:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000d68:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <MX_USB_PCD_Init+0x48>)
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_USB_PCD_Init+0x48>)
 8000d70:	2202      	movs	r2, #2
 8000d72:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <MX_USB_PCD_Init+0x48>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_USB_PCD_Init+0x48>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <MX_USB_PCD_Init+0x48>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_USB_PCD_Init+0x48>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <MX_USB_PCD_Init+0x48>)
 8000d8e:	f002 f909 	bl	8002fa4 <HAL_PCD_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000d98:	f000 f94c 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000674 	.word	0x20000674
 8000da4:	4000d400 	.word	0x4000d400

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08e      	sub	sp, #56	; 0x38
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dbe:	4b8a      	ldr	r3, [pc, #552]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a89      	ldr	r2, [pc, #548]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000dc4:	f043 0310 	orr.w	r3, r3, #16
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b87      	ldr	r3, [pc, #540]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0310 	and.w	r3, r3, #16
 8000dd2:	623b      	str	r3, [r7, #32]
 8000dd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd6:	4b84      	ldr	r3, [pc, #528]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a83      	ldr	r2, [pc, #524]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b81      	ldr	r3, [pc, #516]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0304 	and.w	r3, r3, #4
 8000dea:	61fb      	str	r3, [r7, #28]
 8000dec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dee:	4b7e      	ldr	r3, [pc, #504]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a7d      	ldr	r2, [pc, #500]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000df4:	f043 0320 	orr.w	r3, r3, #32
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4b7b      	ldr	r3, [pc, #492]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f003 0320 	and.w	r3, r3, #32
 8000e02:	61bb      	str	r3, [r7, #24]
 8000e04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e06:	4b78      	ldr	r3, [pc, #480]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	4a77      	ldr	r2, [pc, #476]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e12:	4b75      	ldr	r3, [pc, #468]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b72      	ldr	r3, [pc, #456]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	4a71      	ldr	r2, [pc, #452]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2a:	4b6f      	ldr	r3, [pc, #444]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	4b6c      	ldr	r3, [pc, #432]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	4a6b      	ldr	r2, [pc, #428]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e42:	4b69      	ldr	r3, [pc, #420]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e4e:	4b66      	ldr	r3, [pc, #408]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	4a65      	ldr	r2, [pc, #404]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5a:	4b63      	ldr	r3, [pc, #396]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e66:	4b60      	ldr	r3, [pc, #384]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	4a5f      	ldr	r2, [pc, #380]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000e6c:	f043 0308 	orr.w	r3, r3, #8
 8000e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e72:	4b5d      	ldr	r3, [pc, #372]	; (8000fe8 <MX_GPIO_Init+0x240>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000e7e:	f002 fa1b 	bl	80032b8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2180      	movs	r1, #128	; 0x80
 8000e86:	4859      	ldr	r0, [pc, #356]	; (8000fec <MX_GPIO_Init+0x244>)
 8000e88:	f002 f844 	bl	8002f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e92:	4857      	ldr	r0, [pc, #348]	; (8000ff0 <MX_GPIO_Init+0x248>)
 8000e94:	f002 f83e 	bl	8002f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	21a0      	movs	r1, #160	; 0xa0
 8000e9c:	4855      	ldr	r0, [pc, #340]	; (8000ff4 <MX_GPIO_Init+0x24c>)
 8000e9e:	f002 f839 	bl	8002f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000ea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4850      	ldr	r0, [pc, #320]	; (8000ff8 <MX_GPIO_Init+0x250>)
 8000eb8:	f001 feac 	bl	8002c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ece:	4619      	mov	r1, r3
 8000ed0:	484a      	ldr	r0, [pc, #296]	; (8000ffc <MX_GPIO_Init+0x254>)
 8000ed2:	f001 fe9f 	bl	8002c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000ed6:	230b      	movs	r3, #11
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eda:	2303      	movs	r3, #3
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4845      	ldr	r0, [pc, #276]	; (8001000 <MX_GPIO_Init+0x258>)
 8000eea:	f001 fe93 	bl	8002c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC3 PC6
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6
 8000eee:	f641 734b 	movw	r3, #8011	; 0x1f4b
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	483a      	ldr	r0, [pc, #232]	; (8000fec <MX_GPIO_Init+0x244>)
 8000f04:	f001 fe86 	bl	8002c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f08:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4834      	ldr	r0, [pc, #208]	; (8000ff0 <MX_GPIO_Init+0x248>)
 8000f1e:	f001 fe79 	bl	8002c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB13
                           PB4 PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13
 8000f22:	f242 3357 	movw	r3, #9047	; 0x2357
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f34:	4619      	mov	r1, r3
 8000f36:	482f      	ldr	r0, [pc, #188]	; (8000ff4 <MX_GPIO_Init+0x24c>)
 8000f38:	f001 fe6c 	bl	8002c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG9
                           PG10 PG12 PG13 PG14
                           PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f3c:	f24f 637f 	movw	r3, #63103	; 0xf67f
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f42:	2303      	movs	r3, #3
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	4619      	mov	r1, r3
 8000f50:	482c      	ldr	r0, [pc, #176]	; (8001004 <MX_GPIO_Init+0x25c>)
 8000f52:	f001 fe5f 	bl	8002c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000f56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <MX_GPIO_Init+0x260>)
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4822      	ldr	r0, [pc, #136]	; (8000ff4 <MX_GPIO_Init+0x24c>)
 8000f6c:	f001 fe52 	bl	8002c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 PD3 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f70:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f76:	2303      	movs	r3, #3
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	4619      	mov	r1, r3
 8000f84:	4821      	ldr	r0, [pc, #132]	; (800100c <MX_GPIO_Init+0x264>)
 8000f86:	f001 fe45 	bl	8002c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000f8a:	2380      	movs	r3, #128	; 0x80
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4812      	ldr	r0, [pc, #72]	; (8000fec <MX_GPIO_Init+0x244>)
 8000fa2:	f001 fe37 	bl	8002c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000fa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <MX_GPIO_Init+0x248>)
 8000fc0:	f001 fe28 	bl	8002c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000fc4:	23a0      	movs	r3, #160	; 0xa0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <MX_GPIO_Init+0x24c>)
 8000fdc:	f001 fe1a 	bl	8002c14 <HAL_GPIO_Init>

}
 8000fe0:	bf00      	nop
 8000fe2:	3738      	adds	r7, #56	; 0x38
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	42020800 	.word	0x42020800
 8000ff0:	42020000 	.word	0x42020000
 8000ff4:	42020400 	.word	0x42020400
 8000ff8:	42021000 	.word	0x42021000
 8000ffc:	42021400 	.word	0x42021400
 8001000:	42021c00 	.word	0x42021c00
 8001004:	42021800 	.word	0x42021800
 8001008:	10110000 	.word	0x10110000
 800100c:	42020c00 	.word	0x42020c00

08001010 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d101      	bne.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001022:	f000 fba9 	bl	8001778 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40012c00 	.word	0x40012c00

08001034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001038:	b672      	cpsid	i
}
 800103a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800103c:	e7fe      	b.n	800103c <Error_Handler+0x8>
	...

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <HAL_MspInit+0x44>)
 8001048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104a:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <HAL_MspInit+0x44>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6613      	str	r3, [r2, #96]	; 0x60
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <HAL_MspInit+0x44>)
 8001054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HAL_MspInit+0x44>)
 8001060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001062:	4a08      	ldr	r2, [pc, #32]	; (8001084 <HAL_MspInit+0x44>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001068:	6593      	str	r3, [r2, #88]	; 0x58
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_MspInit+0x44>)
 800106c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40021000 	.word	0x40021000

08001088 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b0ae      	sub	sp, #184	; 0xb8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	2294      	movs	r2, #148	; 0x94
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f006 fb6b 	bl	8007784 <memset>
  if(hadc->Instance==ADC1)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a1f      	ldr	r2, [pc, #124]	; (8001130 <HAL_ADC_MspInit+0xa8>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d137      	bne.n	8001128 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010bc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80010be:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80010c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	4618      	mov	r0, r3
 80010cc:	f003 f91c 	bl	8004308 <HAL_RCCEx_PeriphCLKConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80010d6:	f7ff ffad 	bl	8001034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <HAL_ADC_MspInit+0xac>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	4a15      	ldr	r2, [pc, #84]	; (8001134 <HAL_ADC_MspInit+0xac>)
 80010e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <HAL_ADC_MspInit+0xac>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <HAL_ADC_MspInit+0xac>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <HAL_ADC_MspInit+0xac>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_ADC_MspInit+0xac>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 800110a:	2304      	movs	r3, #4
 800110c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001110:	2303      	movs	r3, #3
 8001112:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800111c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001120:	4619      	mov	r1, r3
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <HAL_ADC_MspInit+0xb0>)
 8001124:	f001 fd76 	bl	8002c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001128:	bf00      	nop
 800112a:	37b8      	adds	r7, #184	; 0xb8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	42028000 	.word	0x42028000
 8001134:	40021000 	.word	0x40021000
 8001138:	42020800 	.word	0x42020800

0800113c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b0ae      	sub	sp, #184	; 0xb8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	2294      	movs	r2, #148	; 0x94
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f006 fb11 	bl	8007784 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a22      	ldr	r2, [pc, #136]	; (80011f0 <HAL_FDCAN_MspInit+0xb4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d13c      	bne.n	80011e6 <HAL_FDCAN_MspInit+0xaa>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800116c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001170:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001172:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001176:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	4618      	mov	r0, r3
 800117e:	f003 f8c3 	bl	8004308 <HAL_RCCEx_PeriphCLKConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001188:	f7ff ff54 	bl	8001034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_FDCAN_MspInit+0xb8>)
 800118e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001190:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <HAL_FDCAN_MspInit+0xb8>)
 8001192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001196:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HAL_FDCAN_MspInit+0xb8>)
 800119a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <HAL_FDCAN_MspInit+0xb8>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <HAL_FDCAN_MspInit+0xb8>)
 80011aa:	f043 0308 	orr.w	r3, r3, #8
 80011ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_FDCAN_MspInit+0xb8>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011bc:	2303      	movs	r3, #3
 80011be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80011d4:	2309      	movs	r3, #9
 80011d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <HAL_FDCAN_MspInit+0xbc>)
 80011e2:	f001 fd17 	bl	8002c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80011e6:	bf00      	nop
 80011e8:	37b8      	adds	r7, #184	; 0xb8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	4000a400 	.word	0x4000a400
 80011f4:	40021000 	.word	0x40021000
 80011f8:	42020c00 	.word	0x42020c00

080011fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b0b0      	sub	sp, #192	; 0xc0
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001214:	f107 0318 	add.w	r3, r7, #24
 8001218:	2294      	movs	r2, #148	; 0x94
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f006 fab1 	bl	8007784 <memset>
  if(huart->Instance==LPUART1)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a43      	ldr	r2, [pc, #268]	; (8001334 <HAL_UART_MspInit+0x138>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d13e      	bne.n	80012aa <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800122c:	2320      	movs	r3, #32
 800122e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001230:	2300      	movs	r3, #0
 8001232:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001234:	f107 0318 	add.w	r3, r7, #24
 8001238:	4618      	mov	r0, r3
 800123a:	f003 f865 	bl	8004308 <HAL_RCCEx_PeriphCLKConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001244:	f7ff fef6 	bl	8001034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001248:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <HAL_UART_MspInit+0x13c>)
 800124a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124c:	4a3a      	ldr	r2, [pc, #232]	; (8001338 <HAL_UART_MspInit+0x13c>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001254:	4b38      	ldr	r3, [pc, #224]	; (8001338 <HAL_UART_MspInit+0x13c>)
 8001256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001260:	4b35      	ldr	r3, [pc, #212]	; (8001338 <HAL_UART_MspInit+0x13c>)
 8001262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001264:	4a34      	ldr	r2, [pc, #208]	; (8001338 <HAL_UART_MspInit+0x13c>)
 8001266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800126a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126c:	4b32      	ldr	r3, [pc, #200]	; (8001338 <HAL_UART_MspInit+0x13c>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001278:	f002 f81e 	bl	80032b8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 800127c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001296:	2308      	movs	r3, #8
 8001298:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800129c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012a0:	4619      	mov	r1, r3
 80012a2:	4826      	ldr	r0, [pc, #152]	; (800133c <HAL_UART_MspInit+0x140>)
 80012a4:	f001 fcb6 	bl	8002c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012a8:	e040      	b.n	800132c <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a24      	ldr	r2, [pc, #144]	; (8001340 <HAL_UART_MspInit+0x144>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d13b      	bne.n	800132c <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012b4:	2304      	movs	r3, #4
 80012b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012bc:	f107 0318 	add.w	r3, r7, #24
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 f821 	bl	8004308 <HAL_RCCEx_PeriphCLKConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80012cc:	f7ff feb2 	bl	8001034 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <HAL_UART_MspInit+0x13c>)
 80012d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d4:	4a18      	ldr	r2, [pc, #96]	; (8001338 <HAL_UART_MspInit+0x13c>)
 80012d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012da:	6593      	str	r3, [r2, #88]	; 0x58
 80012dc:	4b16      	ldr	r3, [pc, #88]	; (8001338 <HAL_UART_MspInit+0x13c>)
 80012de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <HAL_UART_MspInit+0x13c>)
 80012ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ec:	4a12      	ldr	r2, [pc, #72]	; (8001338 <HAL_UART_MspInit+0x13c>)
 80012ee:	f043 0302 	orr.w	r3, r3, #2
 80012f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f4:	4b10      	ldr	r3, [pc, #64]	; (8001338 <HAL_UART_MspInit+0x13c>)
 80012f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001300:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001304:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800131a:	2307      	movs	r3, #7
 800131c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001320:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001324:	4619      	mov	r1, r3
 8001326:	4807      	ldr	r0, [pc, #28]	; (8001344 <HAL_UART_MspInit+0x148>)
 8001328:	f001 fc74 	bl	8002c14 <HAL_GPIO_Init>
}
 800132c:	bf00      	nop
 800132e:	37c0      	adds	r7, #192	; 0xc0
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40008000 	.word	0x40008000
 8001338:	40021000 	.word	0x40021000
 800133c:	42021800 	.word	0x42021800
 8001340:	40004800 	.word	0x40004800
 8001344:	42020400 	.word	0x42020400

08001348 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b0a8      	sub	sp, #160	; 0xa0
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	2294      	movs	r2, #148	; 0x94
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f006 fa13 	bl	8007784 <memset>
  if(hrtc->Instance==RTC)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a16      	ldr	r2, [pc, #88]	; (80013bc <HAL_RTC_MspInit+0x74>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d124      	bne.n	80013b2 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001368:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800136c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800136e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001372:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001376:	f107 030c 	add.w	r3, r7, #12
 800137a:	4618      	mov	r0, r3
 800137c:	f002 ffc4 	bl	8004308 <HAL_RCCEx_PeriphCLKConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001386:	f7ff fe55 	bl	8001034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <HAL_RTC_MspInit+0x78>)
 800138c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001390:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <HAL_RTC_MspInit+0x78>)
 8001392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_RTC_MspInit+0x78>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_RTC_MspInit+0x78>)
 80013a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a4:	6593      	str	r3, [r2, #88]	; 0x58
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_RTC_MspInit+0x78>)
 80013a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80013b2:	bf00      	nop
 80013b4:	37a0      	adds	r7, #160	; 0xa0
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40002800 	.word	0x40002800
 80013c0:	40021000 	.word	0x40021000

080013c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b0ae      	sub	sp, #184	; 0xb8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	2294      	movs	r2, #148	; 0x94
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f006 f9cd 	bl	8007784 <memset>
  if(hpcd->Instance==USB)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a22      	ldr	r2, [pc, #136]	; (8001478 <HAL_PCD_MspInit+0xb4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d13d      	bne.n	8001470 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	4618      	mov	r0, r3
 8001406:	f002 ff7f 	bl	8004308 <HAL_RCCEx_PeriphCLKConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001410:	f7ff fe10 	bl	8001034 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_PCD_MspInit+0xb8>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001418:	4a18      	ldr	r2, [pc, #96]	; (800147c <HAL_PCD_MspInit+0xb8>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_PCD_MspInit+0xb8>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800142c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001430:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001446:	230a      	movs	r3, #10
 8001448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001450:	4619      	mov	r1, r3
 8001452:	480b      	ldr	r0, [pc, #44]	; (8001480 <HAL_PCD_MspInit+0xbc>)
 8001454:	f001 fbde 	bl	8002c14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <HAL_PCD_MspInit+0xb8>)
 800145a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145c:	4a07      	ldr	r2, [pc, #28]	; (800147c <HAL_PCD_MspInit+0xb8>)
 800145e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001462:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_PCD_MspInit+0xb8>)
 8001466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001470:	bf00      	nop
 8001472:	37b8      	adds	r7, #184	; 0xb8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	4000d400 	.word	0x4000d400
 800147c:	40021000 	.word	0x40021000
 8001480:	42020000 	.word	0x42020000

08001484 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08c      	sub	sp, #48	; 0x30
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001494:	2200      	movs	r2, #0
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	202a      	movs	r0, #42	; 0x2a
 800149a:	f001 f9eb 	bl	8002874 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800149e:	202a      	movs	r0, #42	; 0x2a
 80014a0:	f001 fa02 	bl	80028a8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014a4:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <HAL_InitTick+0x9c>)
 80014a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a8:	4a1d      	ldr	r2, [pc, #116]	; (8001520 <HAL_InitTick+0x9c>)
 80014aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014ae:	6613      	str	r3, [r2, #96]	; 0x60
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <HAL_InitTick+0x9c>)
 80014b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014bc:	f107 0210 	add.w	r2, r7, #16
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f002 fe0e 	bl	80040e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014cc:	f002 fdf8 	bl	80040c0 <HAL_RCC_GetPCLK2Freq>
 80014d0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d4:	4a13      	ldr	r2, [pc, #76]	; (8001524 <HAL_InitTick+0xa0>)
 80014d6:	fba2 2303 	umull	r2, r3, r2, r3
 80014da:	0c9b      	lsrs	r3, r3, #18
 80014dc:	3b01      	subs	r3, #1
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_InitTick+0xa4>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <HAL_InitTick+0xa8>)
 80014e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_InitTick+0xa4>)
 80014e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014ee:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <HAL_InitTick+0xa4>)
 80014f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <HAL_InitTick+0xa4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <HAL_InitTick+0xa4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001500:	4809      	ldr	r0, [pc, #36]	; (8001528 <HAL_InitTick+0xa4>)
 8001502:	f003 fd49 	bl	8004f98 <HAL_TIM_Base_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d104      	bne.n	8001516 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800150c:	4806      	ldr	r0, [pc, #24]	; (8001528 <HAL_InitTick+0xa4>)
 800150e:	f003 fda5 	bl	800505c <HAL_TIM_Base_Start_IT>
 8001512:	4603      	mov	r3, r0
 8001514:	e000      	b.n	8001518 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3730      	adds	r7, #48	; 0x30
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	431bde83 	.word	0x431bde83
 8001528:	20000968 	.word	0x20000968
 800152c:	40012c00 	.word	0x40012c00

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <NMI_Handler+0x4>

08001536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler+0x4>

08001542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler+0x4>

0800154e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <TIM1_UP_IRQHandler+0x10>)
 8001562:	f003 fdeb 	bl	800513c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000968 	.word	0x20000968

08001570 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <SystemInit+0x20>)
 8001576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157a:	4a05      	ldr	r2, [pc, #20]	; (8001590 <SystemInit+0x20>)
 800157c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800159a:	4b4f      	ldr	r3, [pc, #316]	; (80016d8 <SystemCoreClockUpdate+0x144>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d107      	bne.n	80015b6 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80015a6:	4b4c      	ldr	r3, [pc, #304]	; (80016d8 <SystemCoreClockUpdate+0x144>)
 80015a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	e005      	b.n	80015c2 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80015b6:	4b48      	ldr	r3, [pc, #288]	; (80016d8 <SystemCoreClockUpdate+0x144>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	f003 030f 	and.w	r3, r3, #15
 80015c0:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80015c2:	4a46      	ldr	r2, [pc, #280]	; (80016dc <SystemCoreClockUpdate+0x148>)
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ca:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015cc:	4b42      	ldr	r3, [pc, #264]	; (80016d8 <SystemCoreClockUpdate+0x144>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b0c      	cmp	r3, #12
 80015d6:	d866      	bhi.n	80016a6 <SystemCoreClockUpdate+0x112>
 80015d8:	a201      	add	r2, pc, #4	; (adr r2, 80015e0 <SystemCoreClockUpdate+0x4c>)
 80015da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015de:	bf00      	nop
 80015e0:	08001615 	.word	0x08001615
 80015e4:	080016a7 	.word	0x080016a7
 80015e8:	080016a7 	.word	0x080016a7
 80015ec:	080016a7 	.word	0x080016a7
 80015f0:	0800161d 	.word	0x0800161d
 80015f4:	080016a7 	.word	0x080016a7
 80015f8:	080016a7 	.word	0x080016a7
 80015fc:	080016a7 	.word	0x080016a7
 8001600:	08001625 	.word	0x08001625
 8001604:	080016a7 	.word	0x080016a7
 8001608:	080016a7 	.word	0x080016a7
 800160c:	080016a7 	.word	0x080016a7
 8001610:	0800162d 	.word	0x0800162d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001614:	4a32      	ldr	r2, [pc, #200]	; (80016e0 <SystemCoreClockUpdate+0x14c>)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	6013      	str	r3, [r2, #0]
      break;
 800161a:	e048      	b.n	80016ae <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800161c:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <SystemCoreClockUpdate+0x14c>)
 800161e:	4a31      	ldr	r2, [pc, #196]	; (80016e4 <SystemCoreClockUpdate+0x150>)
 8001620:	601a      	str	r2, [r3, #0]
      break;
 8001622:	e044      	b.n	80016ae <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001624:	4b2e      	ldr	r3, [pc, #184]	; (80016e0 <SystemCoreClockUpdate+0x14c>)
 8001626:	4a30      	ldr	r2, [pc, #192]	; (80016e8 <SystemCoreClockUpdate+0x154>)
 8001628:	601a      	str	r2, [r3, #0]
      break;
 800162a:	e040      	b.n	80016ae <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <SystemCoreClockUpdate+0x144>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001636:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <SystemCoreClockUpdate+0x144>)
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	091b      	lsrs	r3, r3, #4
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	3301      	adds	r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d003      	beq.n	8001652 <SystemCoreClockUpdate+0xbe>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2b03      	cmp	r3, #3
 800164e:	d006      	beq.n	800165e <SystemCoreClockUpdate+0xca>
 8001650:	e00b      	b.n	800166a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001652:	4a24      	ldr	r2, [pc, #144]	; (80016e4 <SystemCoreClockUpdate+0x150>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	613b      	str	r3, [r7, #16]
          break;
 800165c:	e00b      	b.n	8001676 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800165e:	4a22      	ldr	r2, [pc, #136]	; (80016e8 <SystemCoreClockUpdate+0x154>)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	fbb2 f3f3 	udiv	r3, r2, r3
 8001666:	613b      	str	r3, [r7, #16]
          break;
 8001668:	e005      	b.n	8001676 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001672:	613b      	str	r3, [r7, #16]
          break;
 8001674:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001676:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <SystemCoreClockUpdate+0x144>)
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	0a1b      	lsrs	r3, r3, #8
 800167c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	fb02 f303 	mul.w	r3, r2, r3
 8001686:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <SystemCoreClockUpdate+0x144>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0e5b      	lsrs	r3, r3, #25
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	3301      	adds	r3, #1
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a0:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <SystemCoreClockUpdate+0x14c>)
 80016a2:	6013      	str	r3, [r2, #0]
      break;
 80016a4:	e003      	b.n	80016ae <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80016a6:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <SystemCoreClockUpdate+0x14c>)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	6013      	str	r3, [r2, #0]
      break;
 80016ac:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <SystemCoreClockUpdate+0x144>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	091b      	lsrs	r3, r3, #4
 80016b4:	f003 030f 	and.w	r3, r3, #15
 80016b8:	4a0c      	ldr	r2, [pc, #48]	; (80016ec <SystemCoreClockUpdate+0x158>)
 80016ba:	5cd3      	ldrb	r3, [r2, r3]
 80016bc:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <SystemCoreClockUpdate+0x14c>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	fa22 f303 	lsr.w	r3, r2, r3
 80016c8:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <SystemCoreClockUpdate+0x14c>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	371c      	adds	r7, #28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	40021000 	.word	0x40021000
 80016dc:	080077ec 	.word	0x080077ec
 80016e0:	20000000 	.word	0x20000000
 80016e4:	00f42400 	.word	0x00f42400
 80016e8:	007a1200 	.word	0x007a1200
 80016ec:	080077d4 	.word	0x080077d4

080016f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80016f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001728 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016f4:	f7ff ff3c 	bl	8001570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016fa:	e003      	b.n	8001704 <LoopCopyDataInit>

080016fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001700:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001702:	3104      	adds	r1, #4

08001704 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001704:	480a      	ldr	r0, [pc, #40]	; (8001730 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001708:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800170a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800170c:	d3f6      	bcc.n	80016fc <CopyDataInit>
	ldr	r2, =_sbss
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001710:	e002      	b.n	8001718 <LoopFillZerobss>

08001712 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001712:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001714:	f842 3b04 	str.w	r3, [r2], #4

08001718 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <LoopForever+0x16>)
	cmp	r2, r3
 800171a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800171c:	d3f9      	bcc.n	8001712 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800171e:	f006 f80d 	bl	800773c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001722:	f7ff f8b1 	bl	8000888 <main>

08001726 <LoopForever>:

LoopForever:
    b LoopForever
 8001726:	e7fe      	b.n	8001726 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001728:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800172c:	08007864 	.word	0x08007864
	ldr	r0, =_sdata
 8001730:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001734:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001738:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 800173c:	20000ffc 	.word	0x20000ffc

08001740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC1_2_IRQHandler>

08001742 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800174c:	2004      	movs	r0, #4
 800174e:	f001 f886 	bl	800285e <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001752:	f7ff ff1f 	bl	8001594 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001756:	2007      	movs	r0, #7
 8001758:	f7ff fe94 	bl	8001484 <HAL_InitTick>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d002      	beq.n	8001768 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	71fb      	strb	r3, [r7, #7]
 8001766:	e001      	b.n	800176c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001768:	f7ff fc6a 	bl	8001040 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800176c:	79fb      	ldrb	r3, [r7, #7]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_IncTick+0x20>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_IncTick+0x24>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4413      	add	r3, r2
 8001788:	4a04      	ldr	r2, [pc, #16]	; (800179c <HAL_IncTick+0x24>)
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000008 	.word	0x20000008
 800179c:	200009b4 	.word	0x200009b4

080017a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return uwTick;
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <HAL_GetTick+0x14>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	200009b4 	.word	0x200009b4

080017b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	609a      	str	r2, [r3, #8]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	609a      	str	r2, [r3, #8]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3360      	adds	r3, #96	; 0x60
 8001832:	461a      	mov	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <LL_ADC_SetOffset+0x44>)
 8001842:	4013      	ands	r3, r2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	4313      	orrs	r3, r2
 8001850:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001858:	bf00      	nop
 800185a:	371c      	adds	r7, #28
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	03fff000 	.word	0x03fff000

08001868 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3360      	adds	r3, #96	; 0x60
 8001876:	461a      	mov	r2, r3
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001888:	4618      	mov	r0, r3
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3360      	adds	r3, #96	; 0x60
 80018a4:	461a      	mov	r2, r3
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018be:	bf00      	nop
 80018c0:	371c      	adds	r7, #28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	615a      	str	r2, [r3, #20]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	3330      	adds	r3, #48	; 0x30
 8001900:	461a      	mov	r2, r3
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	4413      	add	r3, r2
 800190e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	f003 031f 	and.w	r3, r3, #31
 800191a:	211f      	movs	r1, #31
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	401a      	ands	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	0e9b      	lsrs	r3, r3, #26
 8001928:	f003 011f 	and.w	r1, r3, #31
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	431a      	orrs	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800193c:	bf00      	nop
 800193e:	371c      	adds	r7, #28
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	3314      	adds	r3, #20
 8001958:	461a      	mov	r2, r3
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	0e5b      	lsrs	r3, r3, #25
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	4413      	add	r3, r2
 8001966:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	0d1b      	lsrs	r3, r3, #20
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	2107      	movs	r1, #7
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	401a      	ands	r2, r3
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	0d1b      	lsrs	r3, r3, #20
 8001982:	f003 031f 	and.w	r3, r3, #31
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	431a      	orrs	r2, r3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001992:	bf00      	nop
 8001994:	371c      	adds	r7, #28
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b8:	43db      	mvns	r3, r3
 80019ba:	401a      	ands	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f003 0318 	and.w	r3, r3, #24
 80019c2:	4908      	ldr	r1, [pc, #32]	; (80019e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019c4:	40d9      	lsrs	r1, r3
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	400b      	ands	r3, r1
 80019ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ce:	431a      	orrs	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019d6:	bf00      	nop
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	0007ffff 	.word	0x0007ffff

080019e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80019f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6093      	str	r3, [r2, #8]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a20:	d101      	bne.n	8001a26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a70:	d101      	bne.n	8001a76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <LL_ADC_IsEnabled+0x18>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <LL_ADC_IsEnabled+0x1a>
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d101      	bne.n	8001ac2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d101      	bne.n	8001ae8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e134      	b.n	8001d7c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d109      	bne.n	8001b34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff fab1 	bl	8001088 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff67 	bl	8001a0c <LL_ADC_IsDeepPowerDownEnabled>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d004      	beq.n	8001b4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff4d 	bl	80019e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff ff82 	bl	8001a5c <LL_ADC_IsInternalRegulatorEnabled>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d115      	bne.n	8001b8a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff ff66 	bl	8001a34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b68:	4b86      	ldr	r3, [pc, #536]	; (8001d84 <HAL_ADC_Init+0x28c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	099b      	lsrs	r3, r3, #6
 8001b6e:	4a86      	ldr	r2, [pc, #536]	; (8001d88 <HAL_ADC_Init+0x290>)
 8001b70:	fba2 2303 	umull	r2, r3, r2, r3
 8001b74:	099b      	lsrs	r3, r3, #6
 8001b76:	3301      	adds	r3, #1
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b7c:	e002      	b.n	8001b84 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f9      	bne.n	8001b7e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff ff64 	bl	8001a5c <LL_ADC_IsInternalRegulatorEnabled>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10d      	bne.n	8001bb6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	f043 0210 	orr.w	r2, r3, #16
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001baa:	f043 0201 	orr.w	r2, r3, #1
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff ff75 	bl	8001aaa <LL_ADC_REG_IsConversionOngoing>
 8001bc0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f040 80cd 	bne.w	8001d6a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f040 80c9 	bne.w	8001d6a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bdc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001be0:	f043 0202 	orr.w	r2, r3, #2
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff49 	bl	8001a84 <LL_ADC_IsEnabled>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d110      	bne.n	8001c1a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bf8:	4864      	ldr	r0, [pc, #400]	; (8001d8c <HAL_ADC_Init+0x294>)
 8001bfa:	f7ff ff43 	bl	8001a84 <LL_ADC_IsEnabled>
 8001bfe:	4604      	mov	r4, r0
 8001c00:	4863      	ldr	r0, [pc, #396]	; (8001d90 <HAL_ADC_Init+0x298>)
 8001c02:	f7ff ff3f 	bl	8001a84 <LL_ADC_IsEnabled>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4323      	orrs	r3, r4
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d105      	bne.n	8001c1a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	4619      	mov	r1, r3
 8001c14:	485f      	ldr	r0, [pc, #380]	; (8001d94 <HAL_ADC_Init+0x29c>)
 8001c16:	f7ff fdcf 	bl	80017b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7e5b      	ldrb	r3, [r3, #25]
 8001c1e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c24:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c2a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c30:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c38:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d106      	bne.n	8001c56 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	045b      	lsls	r3, r3, #17
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d009      	beq.n	8001c72 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c62:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <HAL_ADC_Init+0x2a0>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	69b9      	ldr	r1, [r7, #24]
 8001c82:	430b      	orrs	r3, r1
 8001c84:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ff0d 	bl	8001aaa <LL_ADC_REG_IsConversionOngoing>
 8001c90:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff1a 	bl	8001ad0 <LL_ADC_INJ_IsConversionOngoing>
 8001c9c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d140      	bne.n	8001d26 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d13d      	bne.n	8001d26 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	7e1b      	ldrb	r3, [r3, #24]
 8001cb2:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cb4:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cbc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ccc:	f023 0306 	bic.w	r3, r3, #6
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	69b9      	ldr	r1, [r7, #24]
 8001cd6:	430b      	orrs	r3, r1
 8001cd8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d118      	bne.n	8001d16 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001cee:	f023 0304 	bic.w	r3, r3, #4
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d00:	4311      	orrs	r1, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d06:	430a      	orrs	r2, r1
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	611a      	str	r2, [r3, #16]
 8001d14:	e007      	b.n	8001d26 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0201 	bic.w	r2, r2, #1
 8001d24:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d10c      	bne.n	8001d48 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	f023 010f 	bic.w	r1, r3, #15
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	1e5a      	subs	r2, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	631a      	str	r2, [r3, #48]	; 0x30
 8001d46:	e007      	b.n	8001d58 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 020f 	bic.w	r2, r2, #15
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5c:	f023 0303 	bic.w	r3, r3, #3
 8001d60:	f043 0201 	orr.w	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	659a      	str	r2, [r3, #88]	; 0x58
 8001d68:	e007      	b.n	8001d7a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6e:	f043 0210 	orr.w	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3724      	adds	r7, #36	; 0x24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd90      	pop	{r4, r7, pc}
 8001d84:	20000000 	.word	0x20000000
 8001d88:	053e2d63 	.word	0x053e2d63
 8001d8c:	42028000 	.word	0x42028000
 8001d90:	42028100 	.word	0x42028100
 8001d94:	42028300 	.word	0x42028300
 8001d98:	fff0c007 	.word	0xfff0c007

08001d9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b0b7      	sub	sp, #220	; 0xdc
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x22>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e3c1      	b.n	8002542 <HAL_ADC_ConfigChannel+0x7a6>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fe6d 	bl	8001aaa <LL_ADC_REG_IsConversionOngoing>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f040 83a6 	bne.w	8002524 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6818      	ldr	r0, [r3, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	6859      	ldr	r1, [r3, #4]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	f7ff fd83 	bl	80018f0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fe5b 	bl	8001aaa <LL_ADC_REG_IsConversionOngoing>
 8001df4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fe67 	bl	8001ad0 <LL_ADC_INJ_IsConversionOngoing>
 8001e02:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e06:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f040 81c1 	bne.w	8002192 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f040 81bc 	bne.w	8002192 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e22:	d10f      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f7ff fd8a 	bl	8001948 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fd44 	bl	80018ca <LL_ADC_SetSamplingTimeCommonConfig>
 8001e42:	e00e      	b.n	8001e62 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6819      	ldr	r1, [r3, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	461a      	mov	r2, r3
 8001e52:	f7ff fd79 	bl	8001948 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fd34 	bl	80018ca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	695a      	ldr	r2, [r3, #20]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	08db      	lsrs	r3, r3, #3
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d00a      	beq.n	8001e9a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	6919      	ldr	r1, [r3, #16]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e94:	f7ff fcc4 	bl	8001820 <LL_ADC_SetOffset>
 8001e98:	e17b      	b.n	8002192 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fce1 	bl	8001868 <LL_ADC_GetOffsetChannel>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10a      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x12a>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fcd6 	bl	8001868 <LL_ADC_GetOffsetChannel>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	0e9b      	lsrs	r3, r3, #26
 8001ec0:	f003 021f 	and.w	r2, r3, #31
 8001ec4:	e01e      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x168>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fccb 	bl	8001868 <LL_ADC_GetOffsetChannel>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ee4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ee8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001eec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001ef4:	2320      	movs	r3, #32
 8001ef6:	e004      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001ef8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001efc:	fab3 f383 	clz	r3, r3
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d105      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x180>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0e9b      	lsrs	r3, r3, #26
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	e018      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x1b2>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f28:	fa93 f3a3 	rbit	r3, r3
 8001f2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001f40:	2320      	movs	r3, #32
 8001f42:	e004      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001f44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f48:	fab3 f383 	clz	r3, r3
 8001f4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d106      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fc9a 	bl	8001894 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2101      	movs	r1, #1
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fc7e 	bl	8001868 <LL_ADC_GetOffsetChannel>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10a      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x1f0>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fc73 	bl	8001868 <LL_ADC_GetOffsetChannel>
 8001f82:	4603      	mov	r3, r0
 8001f84:	0e9b      	lsrs	r3, r3, #26
 8001f86:	f003 021f 	and.w	r2, r3, #31
 8001f8a:	e01e      	b.n	8001fca <HAL_ADC_ConfigChannel+0x22e>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2101      	movs	r1, #1
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fc68 	bl	8001868 <LL_ADC_GetOffsetChannel>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001faa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001fae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001fb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001fba:	2320      	movs	r3, #32
 8001fbc:	e004      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001fbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fc2:	fab3 f383 	clz	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d105      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x246>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	0e9b      	lsrs	r3, r3, #26
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	e018      	b.n	8002014 <HAL_ADC_ConfigChannel+0x278>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001ff6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ffa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001ffe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8002006:	2320      	movs	r3, #32
 8002008:	e004      	b.n	8002014 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800200a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002014:	429a      	cmp	r2, r3
 8002016:	d106      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2200      	movs	r2, #0
 800201e:	2101      	movs	r1, #1
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fc37 	bl	8001894 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2102      	movs	r1, #2
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fc1b 	bl	8001868 <LL_ADC_GetOffsetChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10a      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x2b6>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2102      	movs	r1, #2
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fc10 	bl	8001868 <LL_ADC_GetOffsetChannel>
 8002048:	4603      	mov	r3, r0
 800204a:	0e9b      	lsrs	r3, r3, #26
 800204c:	f003 021f 	and.w	r2, r3, #31
 8002050:	e01e      	b.n	8002090 <HAL_ADC_ConfigChannel+0x2f4>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2102      	movs	r1, #2
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fc05 	bl	8001868 <LL_ADC_GetOffsetChannel>
 800205e:	4603      	mov	r3, r0
 8002060:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002070:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002074:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002078:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8002080:	2320      	movs	r3, #32
 8002082:	e004      	b.n	800208e <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002084:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002088:	fab3 f383 	clz	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002098:	2b00      	cmp	r3, #0
 800209a:	d105      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x30c>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0e9b      	lsrs	r3, r3, #26
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	e016      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x33a>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80020ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80020c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80020c8:	2320      	movs	r3, #32
 80020ca:	e004      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80020cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d106      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2200      	movs	r2, #0
 80020e0:	2102      	movs	r1, #2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fbd6 	bl	8001894 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2103      	movs	r1, #3
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fbba 	bl	8001868 <LL_ADC_GetOffsetChannel>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10a      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x378>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2103      	movs	r1, #3
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fbaf 	bl	8001868 <LL_ADC_GetOffsetChannel>
 800210a:	4603      	mov	r3, r0
 800210c:	0e9b      	lsrs	r3, r3, #26
 800210e:	f003 021f 	and.w	r2, r3, #31
 8002112:	e017      	b.n	8002144 <HAL_ADC_ConfigChannel+0x3a8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2103      	movs	r1, #3
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fba4 	bl	8001868 <LL_ADC_GetOffsetChannel>
 8002120:	4603      	mov	r3, r0
 8002122:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800212c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800212e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8002136:	2320      	movs	r3, #32
 8002138:	e003      	b.n	8002142 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800213a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214c:	2b00      	cmp	r3, #0
 800214e:	d105      	bne.n	800215c <HAL_ADC_ConfigChannel+0x3c0>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0e9b      	lsrs	r3, r3, #26
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	e011      	b.n	8002180 <HAL_ADC_ConfigChannel+0x3e4>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800216a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800216c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800216e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002174:	2320      	movs	r3, #32
 8002176:	e003      	b.n	8002180 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8002178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002180:	429a      	cmp	r2, r3
 8002182:	d106      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2200      	movs	r2, #0
 800218a:	2103      	movs	r1, #3
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fb81 	bl	8001894 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fc74 	bl	8001a84 <LL_ADC_IsEnabled>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f040 81c9 	bne.w	8002536 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	6819      	ldr	r1, [r3, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	461a      	mov	r2, r3
 80021b2:	f7ff fbf5 	bl	80019a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	4a8f      	ldr	r2, [pc, #572]	; (80023f8 <HAL_ADC_ConfigChannel+0x65c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	f040 8131 	bne.w	8002424 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10b      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x44e>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	0e9b      	lsrs	r3, r3, #26
 80021d8:	3301      	adds	r3, #1
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	2b09      	cmp	r3, #9
 80021e0:	bf94      	ite	ls
 80021e2:	2301      	movls	r3, #1
 80021e4:	2300      	movhi	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	e019      	b.n	800221e <HAL_ADC_ConfigChannel+0x482>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80021f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021fa:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80021fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8002202:	2320      	movs	r3, #32
 8002204:	e003      	b.n	800220e <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8002206:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	3301      	adds	r3, #1
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	2b09      	cmp	r3, #9
 8002216:	bf94      	ite	ls
 8002218:	2301      	movls	r3, #1
 800221a:	2300      	movhi	r3, #0
 800221c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800221e:	2b00      	cmp	r3, #0
 8002220:	d079      	beq.n	8002316 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222a:	2b00      	cmp	r3, #0
 800222c:	d107      	bne.n	800223e <HAL_ADC_ConfigChannel+0x4a2>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	0e9b      	lsrs	r3, r3, #26
 8002234:	3301      	adds	r3, #1
 8002236:	069b      	lsls	r3, r3, #26
 8002238:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800223c:	e015      	b.n	800226a <HAL_ADC_ConfigChannel+0x4ce>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800224c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800224e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002256:	2320      	movs	r3, #32
 8002258:	e003      	b.n	8002262 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800225a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800225c:	fab3 f383 	clz	r3, r3
 8002260:	b2db      	uxtb	r3, r3
 8002262:	3301      	adds	r3, #1
 8002264:	069b      	lsls	r3, r3, #26
 8002266:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_ADC_ConfigChannel+0x4ee>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	0e9b      	lsrs	r3, r3, #26
 800227c:	3301      	adds	r3, #1
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	2101      	movs	r1, #1
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	e017      	b.n	80022ba <HAL_ADC_ConfigChannel+0x51e>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800229a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800229c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80022a2:	2320      	movs	r3, #32
 80022a4:	e003      	b.n	80022ae <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80022a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022a8:	fab3 f383 	clz	r3, r3
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	3301      	adds	r3, #1
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	2101      	movs	r1, #1
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	ea42 0103 	orr.w	r1, r2, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10a      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x544>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	0e9b      	lsrs	r3, r3, #26
 80022d0:	3301      	adds	r3, #1
 80022d2:	f003 021f 	and.w	r2, r3, #31
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	051b      	lsls	r3, r3, #20
 80022de:	e018      	b.n	8002312 <HAL_ADC_ConfigChannel+0x576>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80022f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80022f8:	2320      	movs	r3, #32
 80022fa:	e003      	b.n	8002304 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80022fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	3301      	adds	r3, #1
 8002306:	f003 021f 	and.w	r2, r3, #31
 800230a:	4613      	mov	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002312:	430b      	orrs	r3, r1
 8002314:	e081      	b.n	800241a <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231e:	2b00      	cmp	r3, #0
 8002320:	d107      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x596>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	0e9b      	lsrs	r3, r3, #26
 8002328:	3301      	adds	r3, #1
 800232a:	069b      	lsls	r3, r3, #26
 800232c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002330:	e015      	b.n	800235e <HAL_ADC_ConfigChannel+0x5c2>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233a:	fa93 f3a3 	rbit	r3, r3
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800234a:	2320      	movs	r3, #32
 800234c:	e003      	b.n	8002356 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002350:	fab3 f383 	clz	r3, r3
 8002354:	b2db      	uxtb	r3, r3
 8002356:	3301      	adds	r3, #1
 8002358:	069b      	lsls	r3, r3, #26
 800235a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002366:	2b00      	cmp	r3, #0
 8002368:	d109      	bne.n	800237e <HAL_ADC_ConfigChannel+0x5e2>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	0e9b      	lsrs	r3, r3, #26
 8002370:	3301      	adds	r3, #1
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	2101      	movs	r1, #1
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	e017      	b.n	80023ae <HAL_ADC_ConfigChannel+0x612>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	61fb      	str	r3, [r7, #28]
  return result;
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002396:	2320      	movs	r3, #32
 8002398:	e003      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	fab3 f383 	clz	r3, r3
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	3301      	adds	r3, #1
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	2101      	movs	r1, #1
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	ea42 0103 	orr.w	r1, r2, r3
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10d      	bne.n	80023da <HAL_ADC_ConfigChannel+0x63e>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	0e9b      	lsrs	r3, r3, #26
 80023c4:	3301      	adds	r3, #1
 80023c6:	f003 021f 	and.w	r2, r3, #31
 80023ca:	4613      	mov	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	3b1e      	subs	r3, #30
 80023d2:	051b      	lsls	r3, r3, #20
 80023d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023d8:	e01e      	b.n	8002418 <HAL_ADC_ConfigChannel+0x67c>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	613b      	str	r3, [r7, #16]
  return result;
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d104      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 80023f2:	2320      	movs	r3, #32
 80023f4:	e006      	b.n	8002404 <HAL_ADC_ConfigChannel+0x668>
 80023f6:	bf00      	nop
 80023f8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	3301      	adds	r3, #1
 8002406:	f003 021f 	and.w	r2, r3, #31
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	3b1e      	subs	r3, #30
 8002412:	051b      	lsls	r3, r3, #20
 8002414:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002418:	430b      	orrs	r3, r1
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	6892      	ldr	r2, [r2, #8]
 800241e:	4619      	mov	r1, r3
 8002420:	f7ff fa92 	bl	8001948 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b48      	ldr	r3, [pc, #288]	; (800254c <HAL_ADC_ConfigChannel+0x7b0>)
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 8082 	beq.w	8002536 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002432:	4847      	ldr	r0, [pc, #284]	; (8002550 <HAL_ADC_ConfigChannel+0x7b4>)
 8002434:	f7ff f9e6 	bl	8001804 <LL_ADC_GetCommonPathInternalCh>
 8002438:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800243c:	4845      	ldr	r0, [pc, #276]	; (8002554 <HAL_ADC_ConfigChannel+0x7b8>)
 800243e:	f7ff fb21 	bl	8001a84 <LL_ADC_IsEnabled>
 8002442:	4604      	mov	r4, r0
 8002444:	4844      	ldr	r0, [pc, #272]	; (8002558 <HAL_ADC_ConfigChannel+0x7bc>)
 8002446:	f7ff fb1d 	bl	8001a84 <LL_ADC_IsEnabled>
 800244a:	4603      	mov	r3, r0
 800244c:	4323      	orrs	r3, r4
 800244e:	2b00      	cmp	r3, #0
 8002450:	d15e      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a41      	ldr	r2, [pc, #260]	; (800255c <HAL_ADC_ConfigChannel+0x7c0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d127      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800245c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002460:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d121      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a39      	ldr	r2, [pc, #228]	; (8002554 <HAL_ADC_ConfigChannel+0x7b8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d161      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002472:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002476:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800247a:	4619      	mov	r1, r3
 800247c:	4834      	ldr	r0, [pc, #208]	; (8002550 <HAL_ADC_ConfigChannel+0x7b4>)
 800247e:	f7ff f9ae 	bl	80017de <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002482:	4b37      	ldr	r3, [pc, #220]	; (8002560 <HAL_ADC_ConfigChannel+0x7c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	099b      	lsrs	r3, r3, #6
 8002488:	4a36      	ldr	r2, [pc, #216]	; (8002564 <HAL_ADC_ConfigChannel+0x7c8>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	099b      	lsrs	r3, r3, #6
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800249c:	e002      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f9      	bne.n	800249e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024aa:	e044      	b.n	8002536 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a2d      	ldr	r2, [pc, #180]	; (8002568 <HAL_ADC_ConfigChannel+0x7cc>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d113      	bne.n	80024de <HAL_ADC_ConfigChannel+0x742>
 80024b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10d      	bne.n	80024de <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a23      	ldr	r2, [pc, #140]	; (8002554 <HAL_ADC_ConfigChannel+0x7b8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d134      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80024cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024d4:	4619      	mov	r1, r3
 80024d6:	481e      	ldr	r0, [pc, #120]	; (8002550 <HAL_ADC_ConfigChannel+0x7b4>)
 80024d8:	f7ff f981 	bl	80017de <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024dc:	e02b      	b.n	8002536 <HAL_ADC_ConfigChannel+0x79a>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a22      	ldr	r2, [pc, #136]	; (800256c <HAL_ADC_ConfigChannel+0x7d0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d126      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x79a>
 80024e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d120      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a16      	ldr	r2, [pc, #88]	; (8002554 <HAL_ADC_ConfigChannel+0x7b8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d11b      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80024fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002502:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002506:	4619      	mov	r1, r3
 8002508:	4811      	ldr	r0, [pc, #68]	; (8002550 <HAL_ADC_ConfigChannel+0x7b4>)
 800250a:	f7ff f968 	bl	80017de <LL_ADC_SetCommonPathInternalCh>
 800250e:	e012      	b.n	8002536 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002514:	f043 0220 	orr.w	r2, r3, #32
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002522:	e008      	b.n	8002536 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002528:	f043 0220 	orr.w	r2, r3, #32
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800253e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002542:	4618      	mov	r0, r3
 8002544:	37dc      	adds	r7, #220	; 0xdc
 8002546:	46bd      	mov	sp, r7
 8002548:	bd90      	pop	{r4, r7, pc}
 800254a:	bf00      	nop
 800254c:	80080000 	.word	0x80080000
 8002550:	42028300 	.word	0x42028300
 8002554:	42028000 	.word	0x42028000
 8002558:	42028100 	.word	0x42028100
 800255c:	c7520000 	.word	0xc7520000
 8002560:	20000000 	.word	0x20000000
 8002564:	053e2d63 	.word	0x053e2d63
 8002568:	cb840000 	.word	0xcb840000
 800256c:	80000001 	.word	0x80000001

08002570 <LL_ADC_IsEnabled>:
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <LL_ADC_IsEnabled+0x18>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <LL_ADC_IsEnabled+0x1a>
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <LL_ADC_REG_IsConversionOngoing>:
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d101      	bne.n	80025ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b0a1      	sub	sp, #132	; 0x84
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e089      	b.n	80026ee <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80025e2:	2300      	movs	r3, #0
 80025e4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80025e6:	2300      	movs	r3, #0
 80025e8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a42      	ldr	r2, [pc, #264]	; (80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d102      	bne.n	80025fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80025f4:	4b41      	ldr	r3, [pc, #260]	; (80026fc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	e001      	b.n	80025fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10b      	bne.n	800261c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002608:	f043 0220 	orr.w	r2, r3, #32
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e068      	b.n	80026ee <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff ffb9 	bl	8002596 <LL_ADC_REG_IsConversionOngoing>
 8002624:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff ffb3 	bl	8002596 <LL_ADC_REG_IsConversionOngoing>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d14a      	bne.n	80026cc <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002636:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002638:	2b00      	cmp	r3, #0
 800263a:	d147      	bne.n	80026cc <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800263c:	4b30      	ldr	r3, [pc, #192]	; (8002700 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800263e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d027      	beq.n	8002698 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	6859      	ldr	r1, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800265a:	035b      	lsls	r3, r3, #13
 800265c:	430b      	orrs	r3, r1
 800265e:	431a      	orrs	r2, r3
 8002660:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002662:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002664:	4824      	ldr	r0, [pc, #144]	; (80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002666:	f7ff ff83 	bl	8002570 <LL_ADC_IsEnabled>
 800266a:	4604      	mov	r4, r0
 800266c:	4823      	ldr	r0, [pc, #140]	; (80026fc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800266e:	f7ff ff7f 	bl	8002570 <LL_ADC_IsEnabled>
 8002672:	4603      	mov	r3, r0
 8002674:	4323      	orrs	r3, r4
 8002676:	2b00      	cmp	r3, #0
 8002678:	d132      	bne.n	80026e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800267a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002682:	f023 030f 	bic.w	r3, r3, #15
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	6811      	ldr	r1, [r2, #0]
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	6892      	ldr	r2, [r2, #8]
 800268e:	430a      	orrs	r2, r1
 8002690:	431a      	orrs	r2, r3
 8002692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002694:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002696:	e023      	b.n	80026e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002698:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026a2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026a4:	4814      	ldr	r0, [pc, #80]	; (80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80026a6:	f7ff ff63 	bl	8002570 <LL_ADC_IsEnabled>
 80026aa:	4604      	mov	r4, r0
 80026ac:	4813      	ldr	r0, [pc, #76]	; (80026fc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80026ae:	f7ff ff5f 	bl	8002570 <LL_ADC_IsEnabled>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4323      	orrs	r3, r4
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d112      	bne.n	80026e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80026ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026c2:	f023 030f 	bic.w	r3, r3, #15
 80026c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80026c8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026ca:	e009      	b.n	80026e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d0:	f043 0220 	orr.w	r2, r3, #32
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80026de:	e000      	b.n	80026e2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80026ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3784      	adds	r7, #132	; 0x84
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd90      	pop	{r4, r7, pc}
 80026f6:	bf00      	nop
 80026f8:	42028000 	.word	0x42028000
 80026fc:	42028100 	.word	0x42028100
 8002700:	42028300 	.word	0x42028300

08002704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <__NVIC_SetPriorityGrouping+0x44>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002720:	4013      	ands	r3, r2
 8002722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800272c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002736:	4a04      	ldr	r2, [pc, #16]	; (8002748 <__NVIC_SetPriorityGrouping+0x44>)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	60d3      	str	r3, [r2, #12]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002750:	4b04      	ldr	r3, [pc, #16]	; (8002764 <__NVIC_GetPriorityGrouping+0x18>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	0a1b      	lsrs	r3, r3, #8
 8002756:	f003 0307 	and.w	r3, r3, #7
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	2b00      	cmp	r3, #0
 8002778:	db0b      	blt.n	8002792 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	f003 021f 	and.w	r2, r3, #31
 8002780:	4907      	ldr	r1, [pc, #28]	; (80027a0 <__NVIC_EnableIRQ+0x38>)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	2001      	movs	r0, #1
 800278a:	fa00 f202 	lsl.w	r2, r0, r2
 800278e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	e000e100 	.word	0xe000e100

080027a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	6039      	str	r1, [r7, #0]
 80027ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	db0a      	blt.n	80027ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	490c      	ldr	r1, [pc, #48]	; (80027f0 <__NVIC_SetPriority+0x4c>)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	0152      	lsls	r2, r2, #5
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	440b      	add	r3, r1
 80027c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027cc:	e00a      	b.n	80027e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	4908      	ldr	r1, [pc, #32]	; (80027f4 <__NVIC_SetPriority+0x50>)
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	3b04      	subs	r3, #4
 80027dc:	0152      	lsls	r2, r2, #5
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	440b      	add	r3, r1
 80027e2:	761a      	strb	r2, [r3, #24]
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000e100 	.word	0xe000e100
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b089      	sub	sp, #36	; 0x24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f1c3 0307 	rsb	r3, r3, #7
 8002812:	2b03      	cmp	r3, #3
 8002814:	bf28      	it	cs
 8002816:	2303      	movcs	r3, #3
 8002818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3303      	adds	r3, #3
 800281e:	2b06      	cmp	r3, #6
 8002820:	d902      	bls.n	8002828 <NVIC_EncodePriority+0x30>
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3b04      	subs	r3, #4
 8002826:	e000      	b.n	800282a <NVIC_EncodePriority+0x32>
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	f04f 32ff 	mov.w	r2, #4294967295
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43da      	mvns	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	401a      	ands	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002840:	f04f 31ff 	mov.w	r1, #4294967295
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	43d9      	mvns	r1, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	4313      	orrs	r3, r2
         );
}
 8002852:	4618      	mov	r0, r3
 8002854:	3724      	adds	r7, #36	; 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff ff4c 	bl	8002704 <__NVIC_SetPriorityGrouping>
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002882:	f7ff ff63 	bl	800274c <__NVIC_GetPriorityGrouping>
 8002886:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	68b9      	ldr	r1, [r7, #8]
 800288c:	6978      	ldr	r0, [r7, #20]
 800288e:	f7ff ffb3 	bl	80027f8 <NVIC_EncodePriority>
 8002892:	4602      	mov	r2, r0
 8002894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002898:	4611      	mov	r1, r2
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff ff82 	bl	80027a4 <__NVIC_SetPriority>
}
 80028a0:	bf00      	nop
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff ff56 	bl	8002768 <__NVIC_EnableIRQ>
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e142      	b.n	8002b5c <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fe fc26 	bl	800113c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0210 	bic.w	r2, r2, #16
 80028fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002900:	f7fe ff4e 	bl	80017a0 <HAL_GetTick>
 8002904:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002906:	e012      	b.n	800292e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002908:	f7fe ff4a 	bl	80017a0 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b0a      	cmp	r3, #10
 8002914:	d90b      	bls.n	800292e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291a:	f043 0201 	orr.w	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2203      	movs	r2, #3
 8002926:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e116      	b.n	8002b5c <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b08      	cmp	r3, #8
 800293a:	d0e5      	beq.n	8002908 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699a      	ldr	r2, [r3, #24]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800294c:	f7fe ff28 	bl	80017a0 <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002952:	e012      	b.n	800297a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002954:	f7fe ff24 	bl	80017a0 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b0a      	cmp	r3, #10
 8002960:	d90b      	bls.n	800297a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002966:	f043 0201 	orr.w	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2203      	movs	r2, #3
 8002972:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e0f0      	b.n	8002b5c <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0e5      	beq.n	8002954 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0202 	orr.w	r2, r2, #2
 8002996:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002998:	4a72      	ldr	r2, [pc, #456]	; (8002b64 <HAL_FDCAN_Init+0x2a0>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	7c1b      	ldrb	r3, [r3, #16]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d108      	bne.n	80029ba <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699a      	ldr	r2, [r3, #24]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029b6:	619a      	str	r2, [r3, #24]
 80029b8:	e007      	b.n	80029ca <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699a      	ldr	r2, [r3, #24]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7c5b      	ldrb	r3, [r3, #17]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d108      	bne.n	80029e4 <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699a      	ldr	r2, [r3, #24]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029e0:	619a      	str	r2, [r3, #24]
 80029e2:	e007      	b.n	80029f4 <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029f2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	7c9b      	ldrb	r3, [r3, #18]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d108      	bne.n	8002a0e <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699a      	ldr	r2, [r3, #24]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a0a:	619a      	str	r2, [r3, #24]
 8002a0c:	e007      	b.n	8002a1e <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699a      	ldr	r2, [r3, #24]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a1c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002a42:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0210 	bic.w	r2, r2, #16
 8002a52:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d108      	bne.n	8002a6e <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699a      	ldr	r2, [r3, #24]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0204 	orr.w	r2, r2, #4
 8002a6a:	619a      	str	r2, [r3, #24]
 8002a6c:	e02c      	b.n	8002ac8 <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d028      	beq.n	8002ac8 <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d01c      	beq.n	8002ab8 <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699a      	ldr	r2, [r3, #24]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a8c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	691a      	ldr	r2, [r3, #16]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0210 	orr.w	r2, r2, #16
 8002a9c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d110      	bne.n	8002ac8 <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699a      	ldr	r2, [r3, #24]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0220 	orr.w	r2, r2, #32
 8002ab4:	619a      	str	r2, [r3, #24]
 8002ab6:	e007      	b.n	8002ac8 <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0220 	orr.w	r2, r2, #32
 8002ac6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	3b01      	subs	r3, #1
 8002ace:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ad8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002ae0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002af0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002af2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002afc:	d115      	bne.n	8002b2a <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b02:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002b0c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	3b01      	subs	r3, #1
 8002b14:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002b16:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002b26:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002b28:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f811 	bl	8002b68 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	4000a500 	.word	0x4000a500

08002b68 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002b70:	4b27      	ldr	r3, [pc, #156]	; (8002c10 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002b72:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b82:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8a:	041a      	lsls	r2, r3, #16
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ba8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb0:	061a      	lsls	r2, r3, #24
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	e005      	b.n	8002bf6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d3f3      	bcc.n	8002bea <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002c02:	bf00      	nop
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	4000ac00 	.word	0x4000ac00

08002c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c22:	e158      	b.n	8002ed6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	2101      	movs	r1, #1
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	4013      	ands	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 814a 	beq.w	8002ed0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d00b      	beq.n	8002c5c <HAL_GPIO_Init+0x48>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d007      	beq.n	8002c5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c50:	2b11      	cmp	r3, #17
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b12      	cmp	r3, #18
 8002c5a:	d130      	bne.n	8002cbe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	2203      	movs	r2, #3
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c92:	2201      	movs	r2, #1
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f003 0201 	and.w	r2, r3, #1
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	2203      	movs	r2, #3
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d003      	beq.n	8002cfe <HAL_GPIO_Init+0xea>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b12      	cmp	r3, #18
 8002cfc:	d123      	bne.n	8002d46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	08da      	lsrs	r2, r3, #3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3208      	adds	r2, #8
 8002d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	220f      	movs	r2, #15
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	691a      	ldr	r2, [r3, #16]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	08da      	lsrs	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3208      	adds	r2, #8
 8002d40:	6939      	ldr	r1, [r7, #16]
 8002d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	2203      	movs	r2, #3
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0203 	and.w	r2, r3, #3
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 80a4 	beq.w	8002ed0 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8002d88:	4a5a      	ldr	r2, [pc, #360]	; (8002ef4 <HAL_GPIO_Init+0x2e0>)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	089b      	lsrs	r3, r3, #2
 8002d8e:	3318      	adds	r3, #24
 8002d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d94:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	220f      	movs	r2, #15
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4013      	ands	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a52      	ldr	r2, [pc, #328]	; (8002ef8 <HAL_GPIO_Init+0x2e4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d025      	beq.n	8002e00 <HAL_GPIO_Init+0x1ec>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a51      	ldr	r2, [pc, #324]	; (8002efc <HAL_GPIO_Init+0x2e8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d01f      	beq.n	8002dfc <HAL_GPIO_Init+0x1e8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a50      	ldr	r2, [pc, #320]	; (8002f00 <HAL_GPIO_Init+0x2ec>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d019      	beq.n	8002df8 <HAL_GPIO_Init+0x1e4>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a4f      	ldr	r2, [pc, #316]	; (8002f04 <HAL_GPIO_Init+0x2f0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d013      	beq.n	8002df4 <HAL_GPIO_Init+0x1e0>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a4e      	ldr	r2, [pc, #312]	; (8002f08 <HAL_GPIO_Init+0x2f4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d00d      	beq.n	8002df0 <HAL_GPIO_Init+0x1dc>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a4d      	ldr	r2, [pc, #308]	; (8002f0c <HAL_GPIO_Init+0x2f8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d007      	beq.n	8002dec <HAL_GPIO_Init+0x1d8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a4c      	ldr	r2, [pc, #304]	; (8002f10 <HAL_GPIO_Init+0x2fc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d101      	bne.n	8002de8 <HAL_GPIO_Init+0x1d4>
 8002de4:	2306      	movs	r3, #6
 8002de6:	e00c      	b.n	8002e02 <HAL_GPIO_Init+0x1ee>
 8002de8:	2307      	movs	r3, #7
 8002dea:	e00a      	b.n	8002e02 <HAL_GPIO_Init+0x1ee>
 8002dec:	2305      	movs	r3, #5
 8002dee:	e008      	b.n	8002e02 <HAL_GPIO_Init+0x1ee>
 8002df0:	2304      	movs	r3, #4
 8002df2:	e006      	b.n	8002e02 <HAL_GPIO_Init+0x1ee>
 8002df4:	2303      	movs	r3, #3
 8002df6:	e004      	b.n	8002e02 <HAL_GPIO_Init+0x1ee>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e002      	b.n	8002e02 <HAL_GPIO_Init+0x1ee>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e000      	b.n	8002e02 <HAL_GPIO_Init+0x1ee>
 8002e00:	2300      	movs	r3, #0
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	f002 0203 	and.w	r2, r2, #3
 8002e08:	00d2      	lsls	r2, r2, #3
 8002e0a:	4093      	lsls	r3, r2
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002e12:	4938      	ldr	r1, [pc, #224]	; (8002ef4 <HAL_GPIO_Init+0x2e0>)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	3318      	adds	r3, #24
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e20:	4b34      	ldr	r3, [pc, #208]	; (8002ef4 <HAL_GPIO_Init+0x2e0>)
 8002e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e46:	4a2b      	ldr	r2, [pc, #172]	; (8002ef4 <HAL_GPIO_Init+0x2e0>)
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002e4e:	4b29      	ldr	r3, [pc, #164]	; (8002ef4 <HAL_GPIO_Init+0x2e0>)
 8002e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e74:	4a1f      	ldr	r2, [pc, #124]	; (8002ef4 <HAL_GPIO_Init+0x2e0>)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <HAL_GPIO_Init+0x2e0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ea0:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <HAL_GPIO_Init+0x2e0>)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ea6:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <HAL_GPIO_Init+0x2e0>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002eca:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <HAL_GPIO_Init+0x2e0>)
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f47f ae9f 	bne.w	8002c24 <HAL_GPIO_Init+0x10>
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	bf00      	nop
 8002eea:	371c      	adds	r7, #28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	4002f400 	.word	0x4002f400
 8002ef8:	42020000 	.word	0x42020000
 8002efc:	42020400 	.word	0x42020400
 8002f00:	42020800 	.word	0x42020800
 8002f04:	42020c00 	.word	0x42020c00
 8002f08:	42021000 	.word	0x42021000
 8002f0c:	42021400 	.word	0x42021400
 8002f10:	42021800 	.word	0x42021800

08002f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	807b      	strh	r3, [r7, #2]
 8002f20:	4613      	mov	r3, r2
 8002f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f24:	787b      	ldrb	r3, [r7, #1]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f2a:	887a      	ldrh	r2, [r7, #2]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f30:	e002      	b.n	8002f38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f32:	887a      	ldrh	r2, [r7, #2]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
 8002f60:	e007      	b.n	8002f72 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002f62:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 0204 	bic.w	r2, r3, #4
 8002f6a:	4905      	ldr	r1, [pc, #20]	; (8002f80 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	40030400 	.word	0x40030400

08002f84 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002f88:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <HAL_ICACHE_Enable+0x1c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a04      	ldr	r2, [pc, #16]	; (8002fa0 <HAL_ICACHE_Enable+0x1c>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	40030400 	.word	0x40030400

08002fa4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa6:	b08b      	sub	sp, #44	; 0x2c
 8002fa8:	af06      	add	r7, sp, #24
 8002faa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e0d7      	b.n	8003166 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fe f9fa 	bl	80013c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f003 fa25 	bl	800642c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	73fb      	strb	r3, [r7, #15]
 8002fe6:	e04c      	b.n	8003082 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	440b      	add	r3, r1
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	440b      	add	r3, r1
 800300e:	7bfa      	ldrb	r2, [r7, #15]
 8003010:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003012:	7bfa      	ldrb	r2, [r7, #15]
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	b298      	uxth	r0, r3
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	440b      	add	r3, r1
 8003024:	3336      	adds	r3, #54	; 0x36
 8003026:	4602      	mov	r2, r0
 8003028:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	440b      	add	r3, r1
 800303a:	3303      	adds	r3, #3
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003040:	7bfa      	ldrb	r2, [r7, #15]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	440b      	add	r3, r1
 800304e:	3338      	adds	r3, #56	; 0x38
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003054:	7bfa      	ldrb	r2, [r7, #15]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	440b      	add	r3, r1
 8003062:	333c      	adds	r3, #60	; 0x3c
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003068:	7bfa      	ldrb	r2, [r7, #15]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	440b      	add	r3, r1
 8003076:	3340      	adds	r3, #64	; 0x40
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	3301      	adds	r3, #1
 8003080:	73fb      	strb	r3, [r7, #15]
 8003082:	7bfa      	ldrb	r2, [r7, #15]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	429a      	cmp	r2, r3
 800308a:	d3ad      	bcc.n	8002fe8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800308c:	2300      	movs	r3, #0
 800308e:	73fb      	strb	r3, [r7, #15]
 8003090:	e044      	b.n	800311c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003092:	7bfa      	ldrb	r2, [r7, #15]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	440b      	add	r3, r1
 80030a0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80030a4:	2200      	movs	r2, #0
 80030a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030a8:	7bfa      	ldrb	r2, [r7, #15]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	440b      	add	r3, r1
 80030b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030be:	7bfa      	ldrb	r2, [r7, #15]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	440b      	add	r3, r1
 80030cc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030d4:	7bfa      	ldrb	r2, [r7, #15]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	440b      	add	r3, r1
 80030e2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030ea:	7bfa      	ldrb	r2, [r7, #15]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	440b      	add	r3, r1
 80030f8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003100:	7bfa      	ldrb	r2, [r7, #15]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	440b      	add	r3, r1
 800310e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	3301      	adds	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
 800311c:	7bfa      	ldrb	r2, [r7, #15]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	429a      	cmp	r2, r3
 8003124:	d3b5      	bcc.n	8003092 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	687e      	ldr	r6, [r7, #4]
 800312e:	466d      	mov	r5, sp
 8003130:	f106 0410 	add.w	r4, r6, #16
 8003134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003138:	6823      	ldr	r3, [r4, #0]
 800313a:	602b      	str	r3, [r5, #0]
 800313c:	1d33      	adds	r3, r6, #4
 800313e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003140:	6838      	ldr	r0, [r7, #0]
 8003142:	f003 f98e 	bl	8006462 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d102      	bne.n	8003164 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f805 	bl	800316e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800316e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003192:	b29b      	uxth	r3, r3
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	f043 0302 	orr.w	r3, r3, #2
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a04      	ldr	r2, [pc, #16]	; (80031e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d2:	6013      	str	r3, [r2, #0]
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40007000 	.word	0x40007000

080031e4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <HAL_PWREx_GetVoltageRange+0x18>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40007000 	.word	0x40007000

08003200 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003208:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003210:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8003212:	f000 f861 	bl	80032d8 <HAL_PWREx_SMPS_GetEffectiveMode>
 8003216:	4603      	mov	r3, r0
 8003218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800321c:	d101      	bne.n	8003222 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e03e      	b.n	80032a0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8003222:	4b21      	ldr	r3, [pc, #132]	; (80032a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800322a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800322e:	d101      	bne.n	8003234 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e035      	b.n	80032a0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	429a      	cmp	r2, r3
 800323a:	d101      	bne.n	8003240 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	e02f      	b.n	80032a0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003240:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003248:	4917      	ldr	r1, [pc, #92]	; (80032a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4313      	orrs	r3, r2
 800324e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003250:	4b16      	ldr	r3, [pc, #88]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	4a16      	ldr	r2, [pc, #88]	; (80032b0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003258:	fba2 2303 	umull	r2, r3, r2, r3
 800325c:	09db      	lsrs	r3, r3, #7
 800325e:	2232      	movs	r2, #50	; 0x32
 8003260:	fb02 f303 	mul.w	r3, r2, r3
 8003264:	4a13      	ldr	r2, [pc, #76]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	08db      	lsrs	r3, r3, #3
 800326c:	3301      	adds	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003270:	e002      	b.n	8003278 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3b01      	subs	r3, #1
 8003276:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003284:	d102      	bne.n	800328c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f2      	bne.n	8003272 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003298:	d101      	bne.n	800329e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e000      	b.n	80032a0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40007000 	.word	0x40007000
 80032ac:	20000000 	.word	0x20000000
 80032b0:	0a7c5ac5 	.word	0x0a7c5ac5
 80032b4:	cccccccd 	.word	0xcccccccd

080032b8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4a04      	ldr	r2, [pc, #16]	; (80032d4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80032c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032c6:	6053      	str	r3, [r2, #4]
}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40007000 	.word	0x40007000

080032d8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80032de:	4b0f      	ldr	r3, [pc, #60]	; (800331c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80032ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032f2:	607b      	str	r3, [r7, #4]
 80032f4:	e00a      	b.n	800330c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d103      	bne.n	8003308 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8003300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003304:	607b      	str	r3, [r7, #4]
 8003306:	e001      	b.n	800330c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003308:	2300      	movs	r3, #0
 800330a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800330c:	687b      	ldr	r3, [r7, #4]
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40007000 	.word	0x40007000

08003320 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d102      	bne.n	8003334 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	f000 bcd0 	b.w	8003cd4 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003334:	4b99      	ldr	r3, [pc, #612]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 030c 	and.w	r3, r3, #12
 800333c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800333e:	4b97      	ldr	r3, [pc, #604]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 80e9 	beq.w	8003528 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d006      	beq.n	800336a <HAL_RCC_OscConfig+0x4a>
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2b0c      	cmp	r3, #12
 8003360:	f040 8083 	bne.w	800346a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d17f      	bne.n	800346a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800336a:	4b8c      	ldr	r3, [pc, #560]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d006      	beq.n	8003384 <HAL_RCC_OscConfig+0x64>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d102      	bne.n	8003384 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	f000 bca8 	b.w	8003cd4 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003388:	4b84      	ldr	r3, [pc, #528]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d004      	beq.n	800339e <HAL_RCC_OscConfig+0x7e>
 8003394:	4b81      	ldr	r3, [pc, #516]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800339c:	e005      	b.n	80033aa <HAL_RCC_OscConfig+0x8a>
 800339e:	4b7f      	ldr	r3, [pc, #508]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 80033a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d224      	bcs.n	80033f8 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 feca 	bl	800414c <RCC_SetFlashLatencyFromMSIRange>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	f000 bc88 	b.w	8003cd4 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033c4:	4b75      	ldr	r3, [pc, #468]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a74      	ldr	r2, [pc, #464]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 80033ca:	f043 0308 	orr.w	r3, r3, #8
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b72      	ldr	r3, [pc, #456]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	496f      	ldr	r1, [pc, #444]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033e2:	4b6e      	ldr	r3, [pc, #440]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	496a      	ldr	r1, [pc, #424]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	604b      	str	r3, [r1, #4]
 80033f6:	e026      	b.n	8003446 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033f8:	4b68      	ldr	r3, [pc, #416]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a67      	ldr	r2, [pc, #412]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 80033fe:	f043 0308 	orr.w	r3, r3, #8
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	4b65      	ldr	r3, [pc, #404]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	4962      	ldr	r1, [pc, #392]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003416:	4b61      	ldr	r3, [pc, #388]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	021b      	lsls	r3, r3, #8
 8003424:	495d      	ldr	r1, [pc, #372]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 8003426:	4313      	orrs	r3, r2
 8003428:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10a      	bne.n	8003446 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	4618      	mov	r0, r3
 8003436:	f000 fe89 	bl	800414c <RCC_SetFlashLatencyFromMSIRange>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	f000 bc47 	b.w	8003cd4 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003446:	f000 fe13 	bl	8004070 <HAL_RCC_GetHCLKFreq>
 800344a:	4603      	mov	r3, r0
 800344c:	4a54      	ldr	r2, [pc, #336]	; (80035a0 <HAL_RCC_OscConfig+0x280>)
 800344e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003450:	4b54      	ldr	r3, [pc, #336]	; (80035a4 <HAL_RCC_OscConfig+0x284>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe f815 	bl	8001484 <HAL_InitTick>
 800345a:	4603      	mov	r3, r0
 800345c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d060      	beq.n	8003526 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	f000 bc35 	b.w	8003cd4 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d039      	beq.n	80034e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003472:	4b4a      	ldr	r3, [pc, #296]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a49      	ldr	r2, [pc, #292]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800347e:	f7fe f98f 	bl	80017a0 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003484:	e00f      	b.n	80034a6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003486:	f7fe f98b 	bl	80017a0 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d908      	bls.n	80034a6 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003494:	4b41      	ldr	r3, [pc, #260]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	f000 bc17 	b.w	8003cd4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034a6:	4b3d      	ldr	r3, [pc, #244]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0e9      	beq.n	8003486 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034b2:	4b3a      	ldr	r3, [pc, #232]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a39      	ldr	r2, [pc, #228]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 80034b8:	f043 0308 	orr.w	r3, r3, #8
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	4b37      	ldr	r3, [pc, #220]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	4934      	ldr	r1, [pc, #208]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034d0:	4b32      	ldr	r3, [pc, #200]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	492f      	ldr	r1, [pc, #188]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]
 80034e4:	e020      	b.n	8003528 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034e6:	4b2d      	ldr	r3, [pc, #180]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a2c      	ldr	r2, [pc, #176]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034f2:	f7fe f955 	bl	80017a0 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034f8:	e00e      	b.n	8003518 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034fa:	f7fe f951 	bl	80017a0 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d907      	bls.n	8003518 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003508:	4b24      	ldr	r3, [pc, #144]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e3dd      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003518:	4b20      	ldr	r3, [pc, #128]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1ea      	bne.n	80034fa <HAL_RCC_OscConfig+0x1da>
 8003524:	e000      	b.n	8003528 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003526:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d07e      	beq.n	8003632 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	2b08      	cmp	r3, #8
 8003538:	d005      	beq.n	8003546 <HAL_RCC_OscConfig+0x226>
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	2b0c      	cmp	r3, #12
 800353e:	d10e      	bne.n	800355e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2b03      	cmp	r3, #3
 8003544:	d10b      	bne.n	800355e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003546:	4b15      	ldr	r3, [pc, #84]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d06e      	beq.n	8003630 <HAL_RCC_OscConfig+0x310>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d16a      	bne.n	8003630 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e3ba      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003566:	d106      	bne.n	8003576 <HAL_RCC_OscConfig+0x256>
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a0b      	ldr	r2, [pc, #44]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 800356e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	e024      	b.n	80035c0 <HAL_RCC_OscConfig+0x2a0>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800357e:	d113      	bne.n	80035a8 <HAL_RCC_OscConfig+0x288>
 8003580:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a05      	ldr	r2, [pc, #20]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 8003586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	4b03      	ldr	r3, [pc, #12]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a02      	ldr	r2, [pc, #8]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 8003592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	e012      	b.n	80035c0 <HAL_RCC_OscConfig+0x2a0>
 800359a:	bf00      	nop
 800359c:	40021000 	.word	0x40021000
 80035a0:	20000000 	.word	0x20000000
 80035a4:	20000004 	.word	0x20000004
 80035a8:	4b8b      	ldr	r3, [pc, #556]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a8a      	ldr	r2, [pc, #552]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80035ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4b88      	ldr	r3, [pc, #544]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a87      	ldr	r2, [pc, #540]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80035ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d019      	beq.n	80035fc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fe f8ea 	bl	80017a0 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ce:	e00e      	b.n	80035ee <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fe f8e6 	bl	80017a0 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d907      	bls.n	80035ee <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035de:	4b7e      	ldr	r3, [pc, #504]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e372      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ee:	4b7a      	ldr	r3, [pc, #488]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0ea      	beq.n	80035d0 <HAL_RCC_OscConfig+0x2b0>
 80035fa:	e01a      	b.n	8003632 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fc:	f7fe f8d0 	bl	80017a0 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003602:	e00e      	b.n	8003622 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003604:	f7fe f8cc 	bl	80017a0 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	; 0x64
 8003610:	d907      	bls.n	8003622 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003612:	4b71      	ldr	r3, [pc, #452]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e358      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003622:	4b6d      	ldr	r3, [pc, #436]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1ea      	bne.n	8003604 <HAL_RCC_OscConfig+0x2e4>
 800362e:	e000      	b.n	8003632 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d06c      	beq.n	8003718 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	2b04      	cmp	r3, #4
 8003642:	d005      	beq.n	8003650 <HAL_RCC_OscConfig+0x330>
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b0c      	cmp	r3, #12
 8003648:	d119      	bne.n	800367e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b02      	cmp	r3, #2
 800364e:	d116      	bne.n	800367e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003650:	4b61      	ldr	r3, [pc, #388]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_RCC_OscConfig+0x348>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e335      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003668:	4b5b      	ldr	r3, [pc, #364]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	061b      	lsls	r3, r3, #24
 8003676:	4958      	ldr	r1, [pc, #352]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 8003678:	4313      	orrs	r3, r2
 800367a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800367c:	e04c      	b.n	8003718 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d029      	beq.n	80036da <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003686:	4b54      	ldr	r3, [pc, #336]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a53      	ldr	r2, [pc, #332]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 800368c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003692:	f7fe f885 	bl	80017a0 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003698:	e00e      	b.n	80036b8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800369a:	f7fe f881 	bl	80017a0 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d907      	bls.n	80036b8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a8:	4b4b      	ldr	r3, [pc, #300]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e30d      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b8:	4b47      	ldr	r3, [pc, #284]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0ea      	beq.n	800369a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c4:	4b44      	ldr	r3, [pc, #272]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	061b      	lsls	r3, r3, #24
 80036d2:	4941      	ldr	r1, [pc, #260]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	604b      	str	r3, [r1, #4]
 80036d8:	e01e      	b.n	8003718 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036da:	4b3f      	ldr	r3, [pc, #252]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a3e      	ldr	r2, [pc, #248]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80036e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e6:	f7fe f85b 	bl	80017a0 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036ec:	e00e      	b.n	800370c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ee:	f7fe f857 	bl	80017a0 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d907      	bls.n	800370c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036fc:	4b36      	ldr	r3, [pc, #216]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e2e3      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800370c:	4b32      	ldr	r3, [pc, #200]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ea      	bne.n	80036ee <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b00      	cmp	r3, #0
 8003722:	d062      	beq.n	80037ea <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d038      	beq.n	800379e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d108      	bne.n	8003746 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003734:	4b28      	ldr	r3, [pc, #160]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 8003736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373a:	4a27      	ldr	r2, [pc, #156]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 800373c:	f023 0310 	bic.w	r3, r3, #16
 8003740:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003744:	e007      	b.n	8003756 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003746:	4b24      	ldr	r3, [pc, #144]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 8003748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800374c:	4a22      	ldr	r2, [pc, #136]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 800374e:	f043 0310 	orr.w	r3, r3, #16
 8003752:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003756:	4b20      	ldr	r3, [pc, #128]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 8003758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800375c:	4a1e      	ldr	r2, [pc, #120]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003766:	f7fe f81b 	bl	80017a0 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800376c:	e00f      	b.n	800378e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800376e:	f7fe f817 	bl	80017a0 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b07      	cmp	r3, #7
 800377a:	d908      	bls.n	800378e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800377c:	4b16      	ldr	r3, [pc, #88]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 800377e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e2a2      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800378e:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 8003790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0e8      	beq.n	800376e <HAL_RCC_OscConfig+0x44e>
 800379c:	e025      	b.n	80037ea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800379e:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80037a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037a4:	4a0c      	ldr	r2, [pc, #48]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ae:	f7fd fff7 	bl	80017a0 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037b4:	e012      	b.n	80037dc <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b6:	f7fd fff3 	bl	80017a0 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b07      	cmp	r3, #7
 80037c2:	d90b      	bls.n	80037dc <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037c4:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <HAL_RCC_OscConfig+0x4b8>)
 80037c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d004      	beq.n	80037dc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e27e      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
 80037d6:	bf00      	nop
 80037d8:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037dc:	4ba8      	ldr	r3, [pc, #672]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 80037de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1e5      	bne.n	80037b6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 812d 	beq.w	8003a52 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037f8:	2300      	movs	r3, #0
 80037fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037fc:	4ba0      	ldr	r3, [pc, #640]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 80037fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10d      	bne.n	8003824 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003808:	4b9d      	ldr	r3, [pc, #628]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 800380a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380c:	4a9c      	ldr	r2, [pc, #624]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 800380e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003812:	6593      	str	r3, [r2, #88]	; 0x58
 8003814:	4b9a      	ldr	r3, [pc, #616]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 8003816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381c:	60bb      	str	r3, [r7, #8]
 800381e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003820:	2301      	movs	r3, #1
 8003822:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003824:	4b97      	ldr	r3, [pc, #604]	; (8003a84 <HAL_RCC_OscConfig+0x764>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d11e      	bne.n	800386e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003830:	4b94      	ldr	r3, [pc, #592]	; (8003a84 <HAL_RCC_OscConfig+0x764>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a93      	ldr	r2, [pc, #588]	; (8003a84 <HAL_RCC_OscConfig+0x764>)
 8003836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800383a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800383c:	f7fd ffb0 	bl	80017a0 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003842:	e00e      	b.n	8003862 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003844:	f7fd ffac 	bl	80017a0 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d907      	bls.n	8003862 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003852:	4b8c      	ldr	r3, [pc, #560]	; (8003a84 <HAL_RCC_OscConfig+0x764>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e238      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003862:	4b88      	ldr	r3, [pc, #544]	; (8003a84 <HAL_RCC_OscConfig+0x764>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0ea      	beq.n	8003844 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d01f      	beq.n	80038ba <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b00      	cmp	r3, #0
 8003884:	d010      	beq.n	80038a8 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003886:	4b7e      	ldr	r3, [pc, #504]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 8003888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388c:	4a7c      	ldr	r2, [pc, #496]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 800388e:	f043 0304 	orr.w	r3, r3, #4
 8003892:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003896:	4b7a      	ldr	r3, [pc, #488]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 8003898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389c:	4a78      	ldr	r2, [pc, #480]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038a6:	e018      	b.n	80038da <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038a8:	4b75      	ldr	r3, [pc, #468]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ae:	4a74      	ldr	r2, [pc, #464]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038b8:	e00f      	b.n	80038da <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038ba:	4b71      	ldr	r3, [pc, #452]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 80038bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c0:	4a6f      	ldr	r2, [pc, #444]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 80038c2:	f023 0301 	bic.w	r3, r3, #1
 80038c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80038ca:	4b6d      	ldr	r3, [pc, #436]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 80038cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d0:	4a6b      	ldr	r2, [pc, #428]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 80038d2:	f023 0304 	bic.w	r3, r3, #4
 80038d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d068      	beq.n	80039b4 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e2:	f7fd ff5d 	bl	80017a0 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e8:	e011      	b.n	800390e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ea:	f7fd ff59 	bl	80017a0 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d908      	bls.n	800390e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038fc:	4b60      	ldr	r3, [pc, #384]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e1e2      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800390e:	4b5c      	ldr	r3, [pc, #368]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 8003910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0e6      	beq.n	80038ea <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003924:	2b00      	cmp	r3, #0
 8003926:	d022      	beq.n	800396e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003928:	4b55      	ldr	r3, [pc, #340]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392e:	4a54      	ldr	r2, [pc, #336]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 8003930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003938:	e011      	b.n	800395e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393a:	f7fd ff31 	bl	80017a0 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	f241 3288 	movw	r2, #5000	; 0x1388
 8003948:	4293      	cmp	r3, r2
 800394a:	d908      	bls.n	800395e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800394c:	4b4c      	ldr	r3, [pc, #304]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 800394e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e1ba      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800395e:	4b48      	ldr	r3, [pc, #288]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 8003960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0e6      	beq.n	800393a <HAL_RCC_OscConfig+0x61a>
 800396c:	e068      	b.n	8003a40 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800396e:	4b44      	ldr	r3, [pc, #272]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 8003970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003974:	4a42      	ldr	r2, [pc, #264]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 8003976:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800397a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800397e:	e011      	b.n	80039a4 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003980:	f7fd ff0e 	bl	80017a0 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	; 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d908      	bls.n	80039a4 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003992:	4b3b      	ldr	r3, [pc, #236]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e197      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80039a4:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 80039a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1e6      	bne.n	8003980 <HAL_RCC_OscConfig+0x660>
 80039b2:	e045      	b.n	8003a40 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b4:	f7fd fef4 	bl	80017a0 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039ba:	e011      	b.n	80039e0 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039bc:	f7fd fef0 	bl	80017a0 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d908      	bls.n	80039e0 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039ce:	4b2c      	ldr	r3, [pc, #176]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 80039d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e179      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039e0:	4b27      	ldr	r3, [pc, #156]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 80039e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1e6      	bne.n	80039bc <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80039ee:	4b24      	ldr	r3, [pc, #144]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 80039f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d021      	beq.n	8003a40 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80039fc:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a02:	4a1f      	ldr	r2, [pc, #124]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 8003a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a0c:	e011      	b.n	8003a32 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0e:	f7fd fec7 	bl	80017a0 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d908      	bls.n	8003a32 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a20:	4b17      	ldr	r3, [pc, #92]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 8003a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e150      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a32:	4b13      	ldr	r3, [pc, #76]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 8003a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e6      	bne.n	8003a0e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a40:	7ffb      	ldrb	r3, [r7, #31]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d105      	bne.n	8003a52 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a46:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 8003a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4a:	4a0d      	ldr	r2, [pc, #52]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 8003a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d04f      	beq.n	8003afe <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d028      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 8003a68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a6c:	4a04      	ldr	r2, [pc, #16]	; (8003a80 <HAL_RCC_OscConfig+0x760>)
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a76:	f7fd fe93 	bl	80017a0 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a7c:	e014      	b.n	8003aa8 <HAL_RCC_OscConfig+0x788>
 8003a7e:	bf00      	nop
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a88:	f7fd fe8a 	bl	80017a0 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d908      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a96:	4b91      	ldr	r3, [pc, #580]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003a98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e115      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003aa8:	4b8c      	ldr	r3, [pc, #560]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003aaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0e8      	beq.n	8003a88 <HAL_RCC_OscConfig+0x768>
 8003ab6:	e022      	b.n	8003afe <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ab8:	4b88      	ldr	r3, [pc, #544]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003aba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003abe:	4a87      	ldr	r2, [pc, #540]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003ac0:	f023 0301 	bic.w	r3, r3, #1
 8003ac4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac8:	f7fd fe6a 	bl	80017a0 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ace:	e00f      	b.n	8003af0 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ad0:	f7fd fe66 	bl	80017a0 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d908      	bls.n	8003af0 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ade:	4b7f      	ldr	r3, [pc, #508]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003ae0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e0f1      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003af0:	4b7a      	ldr	r3, [pc, #488]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e8      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 80e5 	beq.w	8003cd2 <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b08:	4b74      	ldr	r3, [pc, #464]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 030c 	and.w	r3, r3, #12
 8003b10:	2b0c      	cmp	r3, #12
 8003b12:	f000 809f 	beq.w	8003c54 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d166      	bne.n	8003bec <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1e:	4b6f      	ldr	r3, [pc, #444]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a6e      	ldr	r2, [pc, #440]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003b24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2a:	f7fd fe39 	bl	80017a0 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b30:	e00e      	b.n	8003b50 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b32:	f7fd fe35 	bl	80017a0 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d907      	bls.n	8003b50 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b40:	4b66      	ldr	r3, [pc, #408]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e0c1      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b50:	4b62      	ldr	r3, [pc, #392]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1ea      	bne.n	8003b32 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b5c:	4b5f      	ldr	r3, [pc, #380]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	4b5f      	ldr	r3, [pc, #380]	; (8003ce0 <HAL_RCC_OscConfig+0x9c0>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b6c:	3a01      	subs	r2, #1
 8003b6e:	0112      	lsls	r2, r2, #4
 8003b70:	4311      	orrs	r1, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b76:	0212      	lsls	r2, r2, #8
 8003b78:	4311      	orrs	r1, r2
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b7e:	0852      	lsrs	r2, r2, #1
 8003b80:	3a01      	subs	r2, #1
 8003b82:	0552      	lsls	r2, r2, #21
 8003b84:	4311      	orrs	r1, r2
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003b8a:	0852      	lsrs	r2, r2, #1
 8003b8c:	3a01      	subs	r2, #1
 8003b8e:	0652      	lsls	r2, r2, #25
 8003b90:	4311      	orrs	r1, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b96:	06d2      	lsls	r2, r2, #27
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	4950      	ldr	r1, [pc, #320]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ba0:	4b4e      	ldr	r3, [pc, #312]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a4d      	ldr	r2, [pc, #308]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003baa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bac:	4b4b      	ldr	r3, [pc, #300]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	4a4a      	ldr	r2, [pc, #296]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bb6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb8:	f7fd fdf2 	bl	80017a0 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bbe:	e00e      	b.n	8003bde <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc0:	f7fd fdee 	bl	80017a0 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d907      	bls.n	8003bde <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bce:	4b43      	ldr	r3, [pc, #268]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e07a      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bde:	4b3f      	ldr	r3, [pc, #252]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0ea      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x8a0>
 8003bea:	e072      	b.n	8003cd2 <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bec:	4b3b      	ldr	r3, [pc, #236]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a3a      	ldr	r2, [pc, #232]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bf6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003bf8:	4b38      	ldr	r3, [pc, #224]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d105      	bne.n	8003c10 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c04:	4b35      	ldr	r3, [pc, #212]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4a34      	ldr	r2, [pc, #208]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003c0a:	f023 0303 	bic.w	r3, r3, #3
 8003c0e:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c10:	4b32      	ldr	r3, [pc, #200]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4a31      	ldr	r2, [pc, #196]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003c16:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c20:	f7fd fdbe 	bl	80017a0 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c26:	e00e      	b.n	8003c46 <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c28:	f7fd fdba 	bl	80017a0 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d907      	bls.n	8003c46 <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c36:	4b29      	ldr	r3, [pc, #164]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e046      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c46:	4b25      	ldr	r3, [pc, #148]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1ea      	bne.n	8003c28 <HAL_RCC_OscConfig+0x908>
 8003c52:	e03e      	b.n	8003cd2 <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e039      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003c60:	4b1e      	ldr	r3, [pc, #120]	; (8003cdc <HAL_RCC_OscConfig+0x9bc>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f003 0203 	and.w	r2, r3, #3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d12c      	bne.n	8003cce <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d123      	bne.n	8003cce <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c90:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d11b      	bne.n	8003cce <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca0:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d113      	bne.n	8003cce <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	085b      	lsrs	r3, r3, #1
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d109      	bne.n	8003cce <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc4:	085b      	lsrs	r3, r3, #1
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d001      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3720      	adds	r7, #32
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	019f800c 	.word	0x019f800c

08003ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e10d      	b.n	8003f18 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cfc:	4b88      	ldr	r3, [pc, #544]	; (8003f20 <HAL_RCC_ClockConfig+0x23c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 030f 	and.w	r3, r3, #15
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d910      	bls.n	8003d2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0a:	4b85      	ldr	r3, [pc, #532]	; (8003f20 <HAL_RCC_ClockConfig+0x23c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f023 020f 	bic.w	r2, r3, #15
 8003d12:	4983      	ldr	r1, [pc, #524]	; (8003f20 <HAL_RCC_ClockConfig+0x23c>)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1a:	4b81      	ldr	r3, [pc, #516]	; (8003f20 <HAL_RCC_ClockConfig+0x23c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0f5      	b.n	8003f18 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8094 	beq.w	8003e62 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d134      	bne.n	8003dac <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d42:	4b78      	ldr	r3, [pc, #480]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e0e2      	b.n	8003f18 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003d52:	f000 fa5f 	bl	8004214 <RCC_GetSysClockFreqFromPLLSource>
 8003d56:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	4a73      	ldr	r2, [pc, #460]	; (8003f28 <HAL_RCC_ClockConfig+0x244>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d956      	bls.n	8003e0e <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003d60:	4b70      	ldr	r3, [pc, #448]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10a      	bne.n	8003d82 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d6c:	4b6d      	ldr	r3, [pc, #436]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d74:	4a6b      	ldr	r2, [pc, #428]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d7a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d7c:	2380      	movs	r3, #128	; 0x80
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	e045      	b.n	8003e0e <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d03f      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d13b      	bne.n	8003e0e <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d96:	4b63      	ldr	r3, [pc, #396]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d9e:	4a61      	ldr	r2, [pc, #388]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003da6:	2380      	movs	r3, #128	; 0x80
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	e030      	b.n	8003e0e <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d107      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003db4:	4b5b      	ldr	r3, [pc, #364]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d115      	bne.n	8003dec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0a9      	b.n	8003f18 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d107      	bne.n	8003ddc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dcc:	4b55      	ldr	r3, [pc, #340]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d109      	bne.n	8003dec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e09d      	b.n	8003f18 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ddc:	4b51      	ldr	r3, [pc, #324]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e095      	b.n	8003f18 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003dec:	f000 f8a2 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 8003df0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4a4c      	ldr	r2, [pc, #304]	; (8003f28 <HAL_RCC_ClockConfig+0x244>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d909      	bls.n	8003e0e <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003dfa:	4b4a      	ldr	r3, [pc, #296]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e02:	4a48      	ldr	r2, [pc, #288]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e0a:	2380      	movs	r3, #128	; 0x80
 8003e0c:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e0e:	4b45      	ldr	r3, [pc, #276]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f023 0203 	bic.w	r2, r3, #3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4942      	ldr	r1, [pc, #264]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e20:	f7fd fcbe 	bl	80017a0 <HAL_GetTick>
 8003e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	e013      	b.n	8003e50 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e28:	f7fd fcba 	bl	80017a0 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d90a      	bls.n	8003e50 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3a:	4b3a      	ldr	r3, [pc, #232]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 020c 	and.w	r2, r3, #12
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d001      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e063      	b.n	8003f18 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e50:	4b34      	ldr	r3, [pc, #208]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 020c 	and.w	r2, r3, #12
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d1e2      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d009      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e6e:	4b2d      	ldr	r3, [pc, #180]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	492a      	ldr	r1, [pc, #168]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	608b      	str	r3, [r1, #8]
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b80      	cmp	r3, #128	; 0x80
 8003e86:	d105      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003e88:	4b26      	ldr	r3, [pc, #152]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4a25      	ldr	r2, [pc, #148]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e92:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e94:	4b22      	ldr	r3, [pc, #136]	; (8003f20 <HAL_RCC_ClockConfig+0x23c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d210      	bcs.n	8003ec4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea2:	4b1f      	ldr	r3, [pc, #124]	; (8003f20 <HAL_RCC_ClockConfig+0x23c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 020f 	bic.w	r2, r3, #15
 8003eaa:	491d      	ldr	r1, [pc, #116]	; (8003f20 <HAL_RCC_ClockConfig+0x23c>)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb2:	4b1b      	ldr	r3, [pc, #108]	; (8003f20 <HAL_RCC_ClockConfig+0x23c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d001      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e029      	b.n	8003f18 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d008      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed0:	4b14      	ldr	r3, [pc, #80]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	4911      	ldr	r1, [pc, #68]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d009      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eee:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4909      	ldr	r1, [pc, #36]	; (8003f24 <HAL_RCC_ClockConfig+0x240>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003f02:	f000 f8b5 	bl	8004070 <HAL_RCC_GetHCLKFreq>
 8003f06:	4603      	mov	r3, r0
 8003f08:	4a08      	ldr	r2, [pc, #32]	; (8003f2c <HAL_RCC_ClockConfig+0x248>)
 8003f0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f0c:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <HAL_RCC_ClockConfig+0x24c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fd fab7 	bl	8001484 <HAL_InitTick>
 8003f16:	4603      	mov	r3, r0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40022000 	.word	0x40022000
 8003f24:	40021000 	.word	0x40021000
 8003f28:	04c4b400 	.word	0x04c4b400
 8003f2c:	20000000 	.word	0x20000000
 8003f30:	20000004 	.word	0x20000004

08003f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b089      	sub	sp, #36	; 0x24
 8003f38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f42:	4b47      	ldr	r3, [pc, #284]	; (8004060 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 030c 	and.w	r3, r3, #12
 8003f4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f4c:	4b44      	ldr	r3, [pc, #272]	; (8004060 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_RCC_GetSysClockFreq+0x34>
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b0c      	cmp	r3, #12
 8003f60:	d121      	bne.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d11e      	bne.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f68:	4b3d      	ldr	r3, [pc, #244]	; (8004060 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d107      	bne.n	8003f84 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f74:	4b3a      	ldr	r3, [pc, #232]	; (8004060 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f7a:	0a1b      	lsrs	r3, r3, #8
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	e005      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f84:	4b36      	ldr	r3, [pc, #216]	; (8004060 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	091b      	lsrs	r3, r3, #4
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003f90:	4a34      	ldr	r2, [pc, #208]	; (8004064 <HAL_RCC_GetSysClockFreq+0x130>)
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f98:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10d      	bne.n	8003fbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003fa4:	e00a      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d102      	bne.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fac:	4b2e      	ldr	r3, [pc, #184]	; (8004068 <HAL_RCC_GetSysClockFreq+0x134>)
 8003fae:	61bb      	str	r3, [r7, #24]
 8003fb0:	e004      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fb8:	4b2c      	ldr	r3, [pc, #176]	; (800406c <HAL_RCC_GetSysClockFreq+0x138>)
 8003fba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	2b0c      	cmp	r3, #12
 8003fc0:	d146      	bne.n	8004050 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003fc2:	4b27      	ldr	r3, [pc, #156]	; (8004060 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fcc:	4b24      	ldr	r3, [pc, #144]	; (8004060 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d003      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0xb4>
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d00d      	beq.n	8004002 <HAL_RCC_GetSysClockFreq+0xce>
 8003fe6:	e019      	b.n	800401c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fe8:	4a1f      	ldr	r2, [pc, #124]	; (8004068 <HAL_RCC_GetSysClockFreq+0x134>)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff0:	4a1b      	ldr	r2, [pc, #108]	; (8004060 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003ff2:	68d2      	ldr	r2, [r2, #12]
 8003ff4:	0a12      	lsrs	r2, r2, #8
 8003ff6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ffa:	fb02 f303 	mul.w	r3, r2, r3
 8003ffe:	617b      	str	r3, [r7, #20]
        break;
 8004000:	e019      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004002:	4a1a      	ldr	r2, [pc, #104]	; (800406c <HAL_RCC_GetSysClockFreq+0x138>)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	fbb2 f3f3 	udiv	r3, r2, r3
 800400a:	4a15      	ldr	r2, [pc, #84]	; (8004060 <HAL_RCC_GetSysClockFreq+0x12c>)
 800400c:	68d2      	ldr	r2, [r2, #12]
 800400e:	0a12      	lsrs	r2, r2, #8
 8004010:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004014:	fb02 f303 	mul.w	r3, r2, r3
 8004018:	617b      	str	r3, [r7, #20]
        break;
 800401a:	e00c      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	fbb2 f3f3 	udiv	r3, r2, r3
 8004024:	4a0e      	ldr	r2, [pc, #56]	; (8004060 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004026:	68d2      	ldr	r2, [r2, #12]
 8004028:	0a12      	lsrs	r2, r2, #8
 800402a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800402e:	fb02 f303 	mul.w	r3, r2, r3
 8004032:	617b      	str	r3, [r7, #20]
        break;
 8004034:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004036:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	0e5b      	lsrs	r3, r3, #25
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	3301      	adds	r3, #1
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	fbb2 f3f3 	udiv	r3, r2, r3
 800404e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004050:	69bb      	ldr	r3, [r7, #24]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3724      	adds	r7, #36	; 0x24
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40021000 	.word	0x40021000
 8004064:	080077ec 	.word	0x080077ec
 8004068:	00f42400 	.word	0x00f42400
 800406c:	007a1200 	.word	0x007a1200

08004070 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004074:	f7ff ff5e 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 8004078:	4602      	mov	r2, r0
 800407a:	4b05      	ldr	r3, [pc, #20]	; (8004090 <HAL_RCC_GetHCLKFreq+0x20>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	091b      	lsrs	r3, r3, #4
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	4903      	ldr	r1, [pc, #12]	; (8004094 <HAL_RCC_GetHCLKFreq+0x24>)
 8004086:	5ccb      	ldrb	r3, [r1, r3]
 8004088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800408c:	4618      	mov	r0, r3
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40021000 	.word	0x40021000
 8004094:	080077d4 	.word	0x080077d4

08004098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800409c:	f7ff ffe8 	bl	8004070 <HAL_RCC_GetHCLKFreq>
 80040a0:	4602      	mov	r2, r0
 80040a2:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	0a1b      	lsrs	r3, r3, #8
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	4903      	ldr	r1, [pc, #12]	; (80040bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ae:	5ccb      	ldrb	r3, [r1, r3]
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40021000 	.word	0x40021000
 80040bc:	080077e4 	.word	0x080077e4

080040c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040c4:	f7ff ffd4 	bl	8004070 <HAL_RCC_GetHCLKFreq>
 80040c8:	4602      	mov	r2, r0
 80040ca:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	0adb      	lsrs	r3, r3, #11
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	4903      	ldr	r1, [pc, #12]	; (80040e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040d6:	5ccb      	ldrb	r3, [r1, r3]
 80040d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040dc:	4618      	mov	r0, r3
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40021000 	.word	0x40021000
 80040e4:	080077e4 	.word	0x080077e4

080040e8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	220f      	movs	r2, #15
 80040f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80040f8:	4b12      	ldr	r3, [pc, #72]	; (8004144 <HAL_RCC_GetClockConfig+0x5c>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 0203 	and.w	r2, r3, #3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004104:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <HAL_RCC_GetClockConfig+0x5c>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004110:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <HAL_RCC_GetClockConfig+0x5c>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800411c:	4b09      	ldr	r3, [pc, #36]	; (8004144 <HAL_RCC_GetClockConfig+0x5c>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	08db      	lsrs	r3, r3, #3
 8004122:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800412a:	4b07      	ldr	r3, [pc, #28]	; (8004148 <HAL_RCC_GetClockConfig+0x60>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 020f 	and.w	r2, r3, #15
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	601a      	str	r2, [r3, #0]
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40021000 	.word	0x40021000
 8004148:	40022000 	.word	0x40022000

0800414c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004158:	4b2c      	ldr	r3, [pc, #176]	; (800420c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800415a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004164:	f7ff f83e 	bl	80031e4 <HAL_PWREx_GetVoltageRange>
 8004168:	6138      	str	r0, [r7, #16]
 800416a:	e014      	b.n	8004196 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800416c:	4b27      	ldr	r3, [pc, #156]	; (800420c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800416e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004170:	4a26      	ldr	r2, [pc, #152]	; (800420c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004176:	6593      	str	r3, [r2, #88]	; 0x58
 8004178:	4b24      	ldr	r3, [pc, #144]	; (800420c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800417a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004184:	f7ff f82e 	bl	80031e4 <HAL_PWREx_GetVoltageRange>
 8004188:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800418a:	4b20      	ldr	r3, [pc, #128]	; (800420c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418e:	4a1f      	ldr	r2, [pc, #124]	; (800420c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004194:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <RCC_SetFlashLatencyFromMSIRange+0x58>
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a2:	d10b      	bne.n	80041bc <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b80      	cmp	r3, #128	; 0x80
 80041a8:	d919      	bls.n	80041de <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2ba0      	cmp	r3, #160	; 0xa0
 80041ae:	d902      	bls.n	80041b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041b0:	2302      	movs	r3, #2
 80041b2:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80041b4:	e013      	b.n	80041de <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041b6:	2301      	movs	r3, #1
 80041b8:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80041ba:	e010      	b.n	80041de <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b80      	cmp	r3, #128	; 0x80
 80041c0:	d902      	bls.n	80041c8 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041c2:	2303      	movs	r3, #3
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	e00a      	b.n	80041de <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b80      	cmp	r3, #128	; 0x80
 80041cc:	d102      	bne.n	80041d4 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041ce:	2302      	movs	r3, #2
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	e004      	b.n	80041de <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b70      	cmp	r3, #112	; 0x70
 80041d8:	d101      	bne.n	80041de <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041da:	2301      	movs	r3, #1
 80041dc:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041de:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 020f 	bic.w	r2, r3, #15
 80041e6:	490a      	ldr	r1, [pc, #40]	; (8004210 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80041ee:	4b08      	ldr	r3, [pc, #32]	; (8004210 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e000      	b.n	8004202 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	40021000 	.word	0x40021000
 8004210:	40022000 	.word	0x40022000

08004214 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800421e:	4b36      	ldr	r3, [pc, #216]	; (80042f8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	2b01      	cmp	r3, #1
 8004228:	d118      	bne.n	800425c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800422a:	4b33      	ldr	r3, [pc, #204]	; (80042f8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d107      	bne.n	8004246 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004236:	4b30      	ldr	r3, [pc, #192]	; (80042f8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800423c:	0a1b      	lsrs	r3, r3, #8
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	e005      	b.n	8004252 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004246:	4b2c      	ldr	r3, [pc, #176]	; (80042f8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	091b      	lsrs	r3, r3, #4
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004252:	4a2a      	ldr	r2, [pc, #168]	; (80042fc <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800425a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800425c:	4b26      	ldr	r3, [pc, #152]	; (80042f8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0303 	and.w	r3, r3, #3
 8004264:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004266:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	091b      	lsrs	r3, r3, #4
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	3301      	adds	r3, #1
 8004272:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d003      	beq.n	8004282 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b03      	cmp	r3, #3
 800427e:	d00d      	beq.n	800429c <RCC_GetSysClockFreqFromPLLSource+0x88>
 8004280:	e019      	b.n	80042b6 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004282:	4a1f      	ldr	r2, [pc, #124]	; (8004300 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	fbb2 f3f3 	udiv	r3, r2, r3
 800428a:	4a1b      	ldr	r2, [pc, #108]	; (80042f8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800428c:	68d2      	ldr	r2, [r2, #12]
 800428e:	0a12      	lsrs	r2, r2, #8
 8004290:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004294:	fb02 f303 	mul.w	r3, r2, r3
 8004298:	613b      	str	r3, [r7, #16]
      break;
 800429a:	e019      	b.n	80042d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800429c:	4a19      	ldr	r2, [pc, #100]	; (8004304 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a4:	4a14      	ldr	r2, [pc, #80]	; (80042f8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80042a6:	68d2      	ldr	r2, [r2, #12]
 80042a8:	0a12      	lsrs	r2, r2, #8
 80042aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042ae:	fb02 f303 	mul.w	r3, r2, r3
 80042b2:	613b      	str	r3, [r7, #16]
      break;
 80042b4:	e00c      	b.n	80042d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80042be:	4a0e      	ldr	r2, [pc, #56]	; (80042f8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80042c0:	68d2      	ldr	r2, [r2, #12]
 80042c2:	0a12      	lsrs	r2, r2, #8
 80042c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042c8:	fb02 f303 	mul.w	r3, r2, r3
 80042cc:	613b      	str	r3, [r7, #16]
      break;
 80042ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80042d0:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	0e5b      	lsrs	r3, r3, #25
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	3301      	adds	r3, #1
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80042ea:	683b      	ldr	r3, [r7, #0]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	40021000 	.word	0x40021000
 80042fc:	080077ec 	.word	0x080077ec
 8004300:	00f42400 	.word	0x00f42400
 8004304:	007a1200 	.word	0x007a1200

08004308 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004310:	2300      	movs	r3, #0
 8004312:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004314:	2300      	movs	r3, #0
 8004316:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004320:	2b00      	cmp	r3, #0
 8004322:	d040      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004328:	2b80      	cmp	r3, #128	; 0x80
 800432a:	d02a      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800432c:	2b80      	cmp	r3, #128	; 0x80
 800432e:	d825      	bhi.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004330:	2b60      	cmp	r3, #96	; 0x60
 8004332:	d026      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004334:	2b60      	cmp	r3, #96	; 0x60
 8004336:	d821      	bhi.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004338:	2b40      	cmp	r3, #64	; 0x40
 800433a:	d006      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800433c:	2b40      	cmp	r3, #64	; 0x40
 800433e:	d81d      	bhi.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d009      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004344:	2b20      	cmp	r3, #32
 8004346:	d010      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004348:	e018      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800434a:	4b8f      	ldr	r3, [pc, #572]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	4a8e      	ldr	r2, [pc, #568]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004354:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004356:	e015      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3304      	adds	r3, #4
 800435c:	2100      	movs	r1, #0
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fb56 	bl	8004a10 <RCCEx_PLLSAI1_Config>
 8004364:	4603      	mov	r3, r0
 8004366:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004368:	e00c      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3320      	adds	r3, #32
 800436e:	2100      	movs	r1, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fc33 	bl	8004bdc <RCCEx_PLLSAI2_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800437a:	e003      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	77fb      	strb	r3, [r7, #31]
        break;
 8004380:	e000      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8004382:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004384:	7ffb      	ldrb	r3, [r7, #31]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10b      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800438a:	4b7f      	ldr	r3, [pc, #508]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800438c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004390:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004398:	497b      	ldr	r1, [pc, #492]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80043a0:	e001      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a2:	7ffb      	ldrb	r3, [r7, #31]
 80043a4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d047      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ba:	d030      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80043bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c0:	d82a      	bhi.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80043c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043c6:	d02a      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80043c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043cc:	d824      	bhi.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80043ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043d2:	d008      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80043d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043d8:	d81e      	bhi.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80043de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e2:	d010      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80043e4:	e018      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043e6:	4b68      	ldr	r3, [pc, #416]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	4a67      	ldr	r2, [pc, #412]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f0:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80043f2:	e015      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3304      	adds	r3, #4
 80043f8:	2100      	movs	r1, #0
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fb08 	bl	8004a10 <RCCEx_PLLSAI1_Config>
 8004400:	4603      	mov	r3, r0
 8004402:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004404:	e00c      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3320      	adds	r3, #32
 800440a:	2100      	movs	r1, #0
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fbe5 	bl	8004bdc <RCCEx_PLLSAI2_Config>
 8004412:	4603      	mov	r3, r0
 8004414:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004416:	e003      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	77fb      	strb	r3, [r7, #31]
        break;
 800441c:	e000      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800441e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004420:	7ffb      	ldrb	r3, [r7, #31]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10b      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004426:	4b58      	ldr	r3, [pc, #352]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004428:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800442c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004434:	4954      	ldr	r1, [pc, #336]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800443c:	e001      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443e:	7ffb      	ldrb	r3, [r7, #31]
 8004440:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 80ab 	beq.w	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004450:	2300      	movs	r3, #0
 8004452:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004454:	4b4c      	ldr	r3, [pc, #304]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10d      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004460:	4b49      	ldr	r3, [pc, #292]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004464:	4a48      	ldr	r2, [pc, #288]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446a:	6593      	str	r3, [r2, #88]	; 0x58
 800446c:	4b46      	ldr	r3, [pc, #280]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800446e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004478:	2301      	movs	r3, #1
 800447a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800447c:	4b43      	ldr	r3, [pc, #268]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a42      	ldr	r2, [pc, #264]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004486:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004488:	f7fd f98a 	bl	80017a0 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800448e:	e00f      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004490:	f7fd f986 	bl	80017a0 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d908      	bls.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800449e:	4b3b      	ldr	r3, [pc, #236]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80044ae:	e006      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044b0:	4b36      	ldr	r3, [pc, #216]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0e9      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80044bc:	e000      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80044be:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 80044c0:	7ffb      	ldrb	r3, [r7, #31]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d164      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044c6:	4b30      	ldr	r3, [pc, #192]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d0:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01f      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d019      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044e4:	4b28      	ldr	r3, [pc, #160]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ee:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044f0:	4b25      	ldr	r3, [pc, #148]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f6:	4a24      	ldr	r2, [pc, #144]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004500:	4b21      	ldr	r3, [pc, #132]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004506:	4a20      	ldr	r2, [pc, #128]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800450c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004510:	4a1d      	ldr	r2, [pc, #116]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d01f      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004522:	f7fd f93d 	bl	80017a0 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004528:	e012      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452a:	f7fd f939 	bl	80017a0 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	f241 3288 	movw	r2, #5000	; 0x1388
 8004538:	4293      	cmp	r3, r2
 800453a:	d909      	bls.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800453c:	4b12      	ldr	r3, [pc, #72]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10a      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800454e:	e007      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004550:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0e5      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x222>
 800455e:	e000      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8004560:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8004562:	7ffb      	ldrb	r3, [r7, #31]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10c      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004568:	4b07      	ldr	r3, [pc, #28]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004578:	4903      	ldr	r1, [pc, #12]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004580:	e008      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004582:	7ffb      	ldrb	r3, [r7, #31]
 8004584:	77bb      	strb	r3, [r7, #30]
 8004586:	e005      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8004588:	40021000 	.word	0x40021000
 800458c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004590:	7ffb      	ldrb	r3, [r7, #31]
 8004592:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004594:	7dfb      	ldrb	r3, [r7, #23]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d105      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800459a:	4b9c      	ldr	r3, [pc, #624]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800459c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459e:	4a9b      	ldr	r2, [pc, #620]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045b2:	4b96      	ldr	r3, [pc, #600]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b8:	f023 0203 	bic.w	r2, r3, #3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c0:	4992      	ldr	r1, [pc, #584]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045d4:	4b8d      	ldr	r3, [pc, #564]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045da:	f023 020c 	bic.w	r2, r3, #12
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e2:	498a      	ldr	r1, [pc, #552]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045f6:	4b85      	ldr	r3, [pc, #532]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004604:	4981      	ldr	r1, [pc, #516]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004618:	4b7c      	ldr	r3, [pc, #496]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	4979      	ldr	r1, [pc, #484]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0310 	and.w	r3, r3, #16
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800463a:	4b74      	ldr	r3, [pc, #464]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004648:	4970      	ldr	r1, [pc, #448]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800465c:	4b6b      	ldr	r3, [pc, #428]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004662:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800466a:	4968      	ldr	r1, [pc, #416]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800467e:	4b63      	ldr	r3, [pc, #396]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468c:	495f      	ldr	r1, [pc, #380]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046a0:	4b5a      	ldr	r3, [pc, #360]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ae:	4957      	ldr	r1, [pc, #348]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80046c2:	4b52      	ldr	r3, [pc, #328]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046d0:	494e      	ldr	r1, [pc, #312]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d031      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046ec:	d00e      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x404>
 80046ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046f2:	d814      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d015      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80046f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046fc:	d10f      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046fe:	4b43      	ldr	r3, [pc, #268]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	4a42      	ldr	r2, [pc, #264]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004704:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004708:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800470a:	e00c      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3304      	adds	r3, #4
 8004710:	2100      	movs	r1, #0
 8004712:	4618      	mov	r0, r3
 8004714:	f000 f97c 	bl	8004a10 <RCCEx_PLLSAI1_Config>
 8004718:	4603      	mov	r3, r0
 800471a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800471c:	e003      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	77fb      	strb	r3, [r7, #31]
        break;
 8004722:	e000      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8004724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004726:	7ffb      	ldrb	r3, [r7, #31]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10b      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800472c:	4b37      	ldr	r3, [pc, #220]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800472e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004732:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800473a:	4934      	ldr	r1, [pc, #208]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004742:	e001      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004744:	7ffb      	ldrb	r3, [r7, #31]
 8004746:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004754:	4b2d      	ldr	r3, [pc, #180]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004762:	492a      	ldr	r1, [pc, #168]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004776:	4b25      	ldr	r3, [pc, #148]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004784:	4921      	ldr	r1, [pc, #132]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004798:	4b1c      	ldr	r3, [pc, #112]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a6:	4919      	ldr	r1, [pc, #100]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047ba:	4b14      	ldr	r3, [pc, #80]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047c0:	f023 0203 	bic.w	r2, r3, #3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c8:	4910      	ldr	r1, [pc, #64]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d02b      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047dc:	4b0b      	ldr	r3, [pc, #44]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ea:	4908      	ldr	r1, [pc, #32]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047fa:	d109      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047fc:	4b03      	ldr	r3, [pc, #12]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4a02      	ldr	r2, [pc, #8]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004806:	60d3      	str	r3, [r2, #12]
 8004808:	e014      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800480a:	bf00      	nop
 800480c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004814:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004818:	d10c      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	3304      	adds	r3, #4
 800481e:	2101      	movs	r1, #1
 8004820:	4618      	mov	r0, r3
 8004822:	f000 f8f5 	bl	8004a10 <RCCEx_PLLSAI1_Config>
 8004826:	4603      	mov	r3, r0
 8004828:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800482a:	7ffb      	ldrb	r3, [r7, #31]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8004830:	7ffb      	ldrb	r3, [r7, #31]
 8004832:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d04a      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004848:	d108      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x554>
 800484a:	4b70      	ldr	r3, [pc, #448]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800484c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004850:	4a6e      	ldr	r2, [pc, #440]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004856:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800485a:	e012      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800485c:	4b6b      	ldr	r3, [pc, #428]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004862:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800486a:	4968      	ldr	r1, [pc, #416]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004872:	4b66      	ldr	r3, [pc, #408]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004874:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004878:	4a64      	ldr	r2, [pc, #400]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800487a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800487e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004886:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800488a:	d10d      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3304      	adds	r3, #4
 8004890:	2101      	movs	r1, #1
 8004892:	4618      	mov	r0, r3
 8004894:	f000 f8bc 	bl	8004a10 <RCCEx_PLLSAI1_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800489c:	7ffb      	ldrb	r3, [r7, #31]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d019      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80048a2:	7ffb      	ldrb	r3, [r7, #31]
 80048a4:	77bb      	strb	r3, [r7, #30]
 80048a6:	e016      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048b0:	d106      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048b2:	4b56      	ldr	r3, [pc, #344]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	4a55      	ldr	r2, [pc, #340]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048bc:	60d3      	str	r3, [r2, #12]
 80048be:	e00a      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048c8:	d105      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048ca:	4b50      	ldr	r3, [pc, #320]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	4a4f      	ldr	r2, [pc, #316]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d4:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d028      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048e2:	4b4a      	ldr	r3, [pc, #296]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048f0:	4946      	ldr	r1, [pc, #280]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004900:	d106      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004902:	4b42      	ldr	r3, [pc, #264]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	4a41      	ldr	r2, [pc, #260]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800490c:	60d3      	str	r3, [r2, #12]
 800490e:	e011      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004914:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004918:	d10c      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	3304      	adds	r3, #4
 800491e:	2101      	movs	r1, #1
 8004920:	4618      	mov	r0, r3
 8004922:	f000 f875 	bl	8004a10 <RCCEx_PLLSAI1_Config>
 8004926:	4603      	mov	r3, r0
 8004928:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800492a:	7ffb      	ldrb	r3, [r7, #31]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004930:	7ffb      	ldrb	r3, [r7, #31]
 8004932:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01e      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004940:	4b32      	ldr	r3, [pc, #200]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004946:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004950:	492e      	ldr	r1, [pc, #184]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800495e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004962:	d10c      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3304      	adds	r3, #4
 8004968:	2102      	movs	r1, #2
 800496a:	4618      	mov	r0, r3
 800496c:	f000 f850 	bl	8004a10 <RCCEx_PLLSAI1_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004974:	7ffb      	ldrb	r3, [r7, #31]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800497a:	7ffb      	ldrb	r3, [r7, #31]
 800497c:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800498a:	4b20      	ldr	r3, [pc, #128]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800498c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004990:	f023 0204 	bic.w	r2, r3, #4
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800499a:	491c      	ldr	r1, [pc, #112]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00b      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80049ae:	4b17      	ldr	r3, [pc, #92]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049b4:	f023 0218 	bic.w	r2, r3, #24
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049be:	4913      	ldr	r1, [pc, #76]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d017      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80049d2:	4b0e      	ldr	r3, [pc, #56]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049e2:	490a      	ldr	r1, [pc, #40]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049f4:	d105      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049f6:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	4a04      	ldr	r2, [pc, #16]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a00:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004a02:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40021000 	.word	0x40021000

08004a10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b03      	cmp	r3, #3
 8004a24:	d018      	beq.n	8004a58 <RCCEx_PLLSAI1_Config+0x48>
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d81f      	bhi.n	8004a6a <RCCEx_PLLSAI1_Config+0x5a>
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d002      	beq.n	8004a34 <RCCEx_PLLSAI1_Config+0x24>
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d009      	beq.n	8004a46 <RCCEx_PLLSAI1_Config+0x36>
 8004a32:	e01a      	b.n	8004a6a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a34:	4b65      	ldr	r3, [pc, #404]	; (8004bcc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d117      	bne.n	8004a70 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a44:	e014      	b.n	8004a70 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a46:	4b61      	ldr	r3, [pc, #388]	; (8004bcc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d110      	bne.n	8004a74 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a56:	e00d      	b.n	8004a74 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004a58:	4b5c      	ldr	r3, [pc, #368]	; (8004bcc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d109      	bne.n	8004a78 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a68:	e006      	b.n	8004a78 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8004a6e:	e004      	b.n	8004a7a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004a70:	bf00      	nop
 8004a72:	e002      	b.n	8004a7a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004a74:	bf00      	nop
 8004a76:	e000      	b.n	8004a7a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004a78:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f040 809f 	bne.w	8004bc0 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a82:	4b52      	ldr	r3, [pc, #328]	; (8004bcc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a51      	ldr	r2, [pc, #324]	; (8004bcc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004a88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8e:	f7fc fe87 	bl	80017a0 <HAL_GetTick>
 8004a92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a94:	e00f      	b.n	8004ab6 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a96:	f7fc fe83 	bl	80017a0 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d908      	bls.n	8004ab6 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004aa4:	4b49      	ldr	r3, [pc, #292]	; (8004bcc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d009      	beq.n	8004ac4 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ab4:	e006      	b.n	8004ac4 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ab6:	4b45      	ldr	r3, [pc, #276]	; (8004bcc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1e9      	bne.n	8004a96 <RCCEx_PLLSAI1_Config+0x86>
 8004ac2:	e000      	b.n	8004ac6 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004ac4:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d179      	bne.n	8004bc0 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d116      	bne.n	8004b00 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ad2:	4b3e      	ldr	r3, [pc, #248]	; (8004bcc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ad4:	691a      	ldr	r2, [r3, #16]
 8004ad6:	4b3e      	ldr	r3, [pc, #248]	; (8004bd0 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6892      	ldr	r2, [r2, #8]
 8004ade:	0211      	lsls	r1, r2, #8
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	68d2      	ldr	r2, [r2, #12]
 8004ae4:	06d2      	lsls	r2, r2, #27
 8004ae6:	4311      	orrs	r1, r2
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6852      	ldr	r2, [r2, #4]
 8004aec:	3a01      	subs	r2, #1
 8004aee:	0112      	lsls	r2, r2, #4
 8004af0:	4311      	orrs	r1, r2
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6812      	ldr	r2, [r2, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	4934      	ldr	r1, [pc, #208]	; (8004bcc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	610b      	str	r3, [r1, #16]
 8004afe:	e033      	b.n	8004b68 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d118      	bne.n	8004b38 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b06:	4b31      	ldr	r3, [pc, #196]	; (8004bcc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b08:	691a      	ldr	r2, [r3, #16]
 8004b0a:	4b32      	ldr	r3, [pc, #200]	; (8004bd4 <RCCEx_PLLSAI1_Config+0x1c4>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6892      	ldr	r2, [r2, #8]
 8004b12:	0211      	lsls	r1, r2, #8
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6912      	ldr	r2, [r2, #16]
 8004b18:	0852      	lsrs	r2, r2, #1
 8004b1a:	3a01      	subs	r2, #1
 8004b1c:	0552      	lsls	r2, r2, #21
 8004b1e:	4311      	orrs	r1, r2
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6852      	ldr	r2, [r2, #4]
 8004b24:	3a01      	subs	r2, #1
 8004b26:	0112      	lsls	r2, r2, #4
 8004b28:	4311      	orrs	r1, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6812      	ldr	r2, [r2, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	4926      	ldr	r1, [pc, #152]	; (8004bcc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	610b      	str	r3, [r1, #16]
 8004b36:	e017      	b.n	8004b68 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b38:	4b24      	ldr	r3, [pc, #144]	; (8004bcc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	4b26      	ldr	r3, [pc, #152]	; (8004bd8 <RCCEx_PLLSAI1_Config+0x1c8>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6892      	ldr	r2, [r2, #8]
 8004b44:	0211      	lsls	r1, r2, #8
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6952      	ldr	r2, [r2, #20]
 8004b4a:	0852      	lsrs	r2, r2, #1
 8004b4c:	3a01      	subs	r2, #1
 8004b4e:	0652      	lsls	r2, r2, #25
 8004b50:	4311      	orrs	r1, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6852      	ldr	r2, [r2, #4]
 8004b56:	3a01      	subs	r2, #1
 8004b58:	0112      	lsls	r2, r2, #4
 8004b5a:	4311      	orrs	r1, r2
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	491a      	ldr	r1, [pc, #104]	; (8004bcc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b68:	4b18      	ldr	r3, [pc, #96]	; (8004bcc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a17      	ldr	r2, [pc, #92]	; (8004bcc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b74:	f7fc fe14 	bl	80017a0 <HAL_GetTick>
 8004b78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b7a:	e00f      	b.n	8004b9c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b7c:	f7fc fe10 	bl	80017a0 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d908      	bls.n	8004b9c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b8a:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d109      	bne.n	8004baa <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004b9a:	e006      	b.n	8004baa <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0e9      	beq.n	8004b7c <RCCEx_PLLSAI1_Config+0x16c>
 8004ba8:	e000      	b.n	8004bac <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004baa:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8004bb2:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bb4:	691a      	ldr	r2, [r3, #16]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	4904      	ldr	r1, [pc, #16]	; (8004bcc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	07ff800c 	.word	0x07ff800c
 8004bd4:	ff9f800c 	.word	0xff9f800c
 8004bd8:	f9ff800c 	.word	0xf9ff800c

08004bdc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d018      	beq.n	8004c24 <RCCEx_PLLSAI2_Config+0x48>
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d81f      	bhi.n	8004c36 <RCCEx_PLLSAI2_Config+0x5a>
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d002      	beq.n	8004c00 <RCCEx_PLLSAI2_Config+0x24>
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d009      	beq.n	8004c12 <RCCEx_PLLSAI2_Config+0x36>
 8004bfe:	e01a      	b.n	8004c36 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c00:	4b4a      	ldr	r3, [pc, #296]	; (8004d2c <RCCEx_PLLSAI2_Config+0x150>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d117      	bne.n	8004c3c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c10:	e014      	b.n	8004c3c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c12:	4b46      	ldr	r3, [pc, #280]	; (8004d2c <RCCEx_PLLSAI2_Config+0x150>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d110      	bne.n	8004c40 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c22:	e00d      	b.n	8004c40 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004c24:	4b41      	ldr	r3, [pc, #260]	; (8004d2c <RCCEx_PLLSAI2_Config+0x150>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d109      	bne.n	8004c44 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c34:	e006      	b.n	8004c44 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	73fb      	strb	r3, [r7, #15]
      break;
 8004c3a:	e004      	b.n	8004c46 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004c3c:	bf00      	nop
 8004c3e:	e002      	b.n	8004c46 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004c40:	bf00      	nop
 8004c42:	e000      	b.n	8004c46 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004c44:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d169      	bne.n	8004d20 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c4c:	4b37      	ldr	r3, [pc, #220]	; (8004d2c <RCCEx_PLLSAI2_Config+0x150>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a36      	ldr	r2, [pc, #216]	; (8004d2c <RCCEx_PLLSAI2_Config+0x150>)
 8004c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c58:	f7fc fda2 	bl	80017a0 <HAL_GetTick>
 8004c5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c5e:	e00f      	b.n	8004c80 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c60:	f7fc fd9e 	bl	80017a0 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d908      	bls.n	8004c80 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c6e:	4b2f      	ldr	r3, [pc, #188]	; (8004d2c <RCCEx_PLLSAI2_Config+0x150>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d009      	beq.n	8004c8e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c7e:	e006      	b.n	8004c8e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c80:	4b2a      	ldr	r3, [pc, #168]	; (8004d2c <RCCEx_PLLSAI2_Config+0x150>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1e9      	bne.n	8004c60 <RCCEx_PLLSAI2_Config+0x84>
 8004c8c:	e000      	b.n	8004c90 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8004c8e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d144      	bne.n	8004d20 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d115      	bne.n	8004cc8 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c9c:	4b23      	ldr	r3, [pc, #140]	; (8004d2c <RCCEx_PLLSAI2_Config+0x150>)
 8004c9e:	695a      	ldr	r2, [r3, #20]
 8004ca0:	4b23      	ldr	r3, [pc, #140]	; (8004d30 <RCCEx_PLLSAI2_Config+0x154>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6892      	ldr	r2, [r2, #8]
 8004ca8:	0211      	lsls	r1, r2, #8
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	68d2      	ldr	r2, [r2, #12]
 8004cae:	06d2      	lsls	r2, r2, #27
 8004cb0:	4311      	orrs	r1, r2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6852      	ldr	r2, [r2, #4]
 8004cb6:	3a01      	subs	r2, #1
 8004cb8:	0112      	lsls	r2, r2, #4
 8004cba:	4311      	orrs	r1, r2
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6812      	ldr	r2, [r2, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	491a      	ldr	r1, [pc, #104]	; (8004d2c <RCCEx_PLLSAI2_Config+0x150>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004cc8:	4b18      	ldr	r3, [pc, #96]	; (8004d2c <RCCEx_PLLSAI2_Config+0x150>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a17      	ldr	r2, [pc, #92]	; (8004d2c <RCCEx_PLLSAI2_Config+0x150>)
 8004cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd4:	f7fc fd64 	bl	80017a0 <HAL_GetTick>
 8004cd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cda:	e00f      	b.n	8004cfc <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cdc:	f7fc fd60 	bl	80017a0 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d908      	bls.n	8004cfc <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cea:	4b10      	ldr	r3, [pc, #64]	; (8004d2c <RCCEx_PLLSAI2_Config+0x150>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d109      	bne.n	8004d0a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004cfa:	e006      	b.n	8004d0a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cfc:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <RCCEx_PLLSAI2_Config+0x150>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0e9      	beq.n	8004cdc <RCCEx_PLLSAI2_Config+0x100>
 8004d08:	e000      	b.n	8004d0c <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004d0a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d106      	bne.n	8004d20 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004d12:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <RCCEx_PLLSAI2_Config+0x150>)
 8004d14:	695a      	ldr	r2, [r3, #20]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	4904      	ldr	r1, [pc, #16]	; (8004d2c <RCCEx_PLLSAI2_Config+0x150>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	07ff800c 	.word	0x07ff800c

08004d34 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d05c      	beq.n	8004e00 <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fc faf4 	bl	8001348 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d68:	4b28      	ldr	r3, [pc, #160]	; (8004e0c <HAL_RTC_Init+0xd8>)
 8004d6a:	22ca      	movs	r2, #202	; 0xca
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24
 8004d6e:	4b27      	ldr	r3, [pc, #156]	; (8004e0c <HAL_RTC_Init+0xd8>)
 8004d70:	2253      	movs	r2, #83	; 0x53
 8004d72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f871 	bl	8004e5c <RTC_EnterInitMode>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d133      	bne.n	8004dec <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004d84:	4b21      	ldr	r3, [pc, #132]	; (8004e0c <HAL_RTC_Init+0xd8>)
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	4a20      	ldr	r2, [pc, #128]	; (8004e0c <HAL_RTC_Init+0xd8>)
 8004d8a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d92:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004d94:	4b1d      	ldr	r3, [pc, #116]	; (8004e0c <HAL_RTC_Init+0xd8>)
 8004d96:	699a      	ldr	r2, [r3, #24]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6859      	ldr	r1, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	4319      	orrs	r1, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	430b      	orrs	r3, r1
 8004da8:	4918      	ldr	r1, [pc, #96]	; (8004e0c <HAL_RTC_Init+0xd8>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	041b      	lsls	r3, r3, #16
 8004db8:	4914      	ldr	r1, [pc, #80]	; (8004e0c <HAL_RTC_Init+0xd8>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f880 	bl	8004ec4 <RTC_ExitInitMode>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10e      	bne.n	8004dec <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 8004dce:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <HAL_RTC_Init+0xd8>)
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a19      	ldr	r1, [r3, #32]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	4319      	orrs	r1, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	430b      	orrs	r3, r1
 8004de6:	4909      	ldr	r1, [pc, #36]	; (8004e0c <HAL_RTC_Init+0xd8>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dec:	4b07      	ldr	r3, [pc, #28]	; (8004e0c <HAL_RTC_Init+0xd8>)
 8004dee:	22ff      	movs	r2, #255	; 0xff
 8004df0:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d103      	bne.n	8004e00 <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40002800 	.word	0x40002800

08004e10 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004e18:	4b0f      	ldr	r3, [pc, #60]	; (8004e58 <HAL_RTC_WaitForSynchro+0x48>)
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	4a0e      	ldr	r2, [pc, #56]	; (8004e58 <HAL_RTC_WaitForSynchro+0x48>)
 8004e1e:	f023 0320 	bic.w	r3, r3, #32
 8004e22:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004e24:	f7fc fcbc 	bl	80017a0 <HAL_GetTick>
 8004e28:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004e2a:	e009      	b.n	8004e40 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e2c:	f7fc fcb8 	bl	80017a0 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e3a:	d901      	bls.n	8004e40 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e006      	b.n	8004e4e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <HAL_RTC_WaitForSynchro+0x48>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f003 0320 	and.w	r3, r3, #32
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0ef      	beq.n	8004e2c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	40002800 	.word	0x40002800

08004e5c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e64:	2300      	movs	r3, #0
 8004e66:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004e68:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <RTC_EnterInitMode+0x64>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d120      	bne.n	8004eb6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004e74:	4b12      	ldr	r3, [pc, #72]	; (8004ec0 <RTC_EnterInitMode+0x64>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	4a11      	ldr	r2, [pc, #68]	; (8004ec0 <RTC_EnterInitMode+0x64>)
 8004e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004e80:	f7fc fc8e 	bl	80017a0 <HAL_GetTick>
 8004e84:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004e86:	e00d      	b.n	8004ea4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004e88:	f7fc fc8a 	bl	80017a0 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e96:	d905      	bls.n	8004ea4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2203      	movs	r2, #3
 8004ea0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004ea4:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <RTC_EnterInitMode+0x64>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d102      	bne.n	8004eb6 <RTC_EnterInitMode+0x5a>
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d1e8      	bne.n	8004e88 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40002800 	.word	0x40002800

08004ec4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004ed0:	4b1a      	ldr	r3, [pc, #104]	; (8004f3c <RTC_ExitInitMode+0x78>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	4a19      	ldr	r2, [pc, #100]	; (8004f3c <RTC_ExitInitMode+0x78>)
 8004ed6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eda:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004edc:	4b17      	ldr	r3, [pc, #92]	; (8004f3c <RTC_ExitInitMode+0x78>)
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	f003 0320 	and.w	r3, r3, #32
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10c      	bne.n	8004f02 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7ff ff91 	bl	8004e10 <HAL_RTC_WaitForSynchro>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01e      	beq.n	8004f32 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2203      	movs	r2, #3
 8004ef8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	73fb      	strb	r3, [r7, #15]
 8004f00:	e017      	b.n	8004f32 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f02:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <RTC_ExitInitMode+0x78>)
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	4a0d      	ldr	r2, [pc, #52]	; (8004f3c <RTC_ExitInitMode+0x78>)
 8004f08:	f023 0320 	bic.w	r3, r3, #32
 8004f0c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7ff ff7e 	bl	8004e10 <HAL_RTC_WaitForSynchro>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d005      	beq.n	8004f26 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2203      	movs	r2, #3
 8004f1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f26:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <RTC_ExitInitMode+0x78>)
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	4a04      	ldr	r2, [pc, #16]	; (8004f3c <RTC_ExitInitMode+0x78>)
 8004f2c:	f043 0320 	orr.w	r3, r3, #32
 8004f30:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40002800 	.word	0x40002800

08004f40 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	490f      	ldr	r1, [pc, #60]	; (8004f90 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	490c      	ldr	r1, [pc, #48]	; (8004f94 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8004f66:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6919      	ldr	r1, [r3, #16]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	041b      	lsls	r3, r3, #16
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	4906      	ldr	r1, [pc, #24]	; (8004f94 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40002800 	.word	0x40002800
 8004f94:	40003400 	.word	0x40003400

08004f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e049      	b.n	800503e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f841 	bl	8005046 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	f000 f9f8 	bl	80053cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
	...

0800505c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b01      	cmp	r3, #1
 800506e:	d001      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e04f      	b.n	8005114 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a23      	ldr	r2, [pc, #140]	; (8005120 <HAL_TIM_Base_Start_IT+0xc4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d01d      	beq.n	80050d2 <HAL_TIM_Base_Start_IT+0x76>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509e:	d018      	beq.n	80050d2 <HAL_TIM_Base_Start_IT+0x76>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1f      	ldr	r2, [pc, #124]	; (8005124 <HAL_TIM_Base_Start_IT+0xc8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d013      	beq.n	80050d2 <HAL_TIM_Base_Start_IT+0x76>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a1e      	ldr	r2, [pc, #120]	; (8005128 <HAL_TIM_Base_Start_IT+0xcc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d00e      	beq.n	80050d2 <HAL_TIM_Base_Start_IT+0x76>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1c      	ldr	r2, [pc, #112]	; (800512c <HAL_TIM_Base_Start_IT+0xd0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d009      	beq.n	80050d2 <HAL_TIM_Base_Start_IT+0x76>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1b      	ldr	r2, [pc, #108]	; (8005130 <HAL_TIM_Base_Start_IT+0xd4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d004      	beq.n	80050d2 <HAL_TIM_Base_Start_IT+0x76>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a19      	ldr	r2, [pc, #100]	; (8005134 <HAL_TIM_Base_Start_IT+0xd8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d115      	bne.n	80050fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	4b17      	ldr	r3, [pc, #92]	; (8005138 <HAL_TIM_Base_Start_IT+0xdc>)
 80050da:	4013      	ands	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2b06      	cmp	r3, #6
 80050e2:	d015      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0xb4>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ea:	d011      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fc:	e008      	b.n	8005110 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 0201 	orr.w	r2, r2, #1
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	e000      	b.n	8005112 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005110:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	40012c00 	.word	0x40012c00
 8005124:	40000400 	.word	0x40000400
 8005128:	40000800 	.word	0x40000800
 800512c:	40000c00 	.word	0x40000c00
 8005130:	40013400 	.word	0x40013400
 8005134:	40014000 	.word	0x40014000
 8005138:	00010007 	.word	0x00010007

0800513c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b02      	cmp	r3, #2
 8005150:	d122      	bne.n	8005198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b02      	cmp	r3, #2
 800515e:	d11b      	bne.n	8005198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f06f 0202 	mvn.w	r2, #2
 8005168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f905 	bl	800538e <HAL_TIM_IC_CaptureCallback>
 8005184:	e005      	b.n	8005192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f8f7 	bl	800537a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f908 	bl	80053a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d122      	bne.n	80051ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d11b      	bne.n	80051ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0204 	mvn.w	r2, #4
 80051bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2202      	movs	r2, #2
 80051c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f8db 	bl	800538e <HAL_TIM_IC_CaptureCallback>
 80051d8:	e005      	b.n	80051e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f8cd 	bl	800537a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f8de 	bl	80053a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b08      	cmp	r3, #8
 80051f8:	d122      	bne.n	8005240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b08      	cmp	r3, #8
 8005206:	d11b      	bne.n	8005240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0208 	mvn.w	r2, #8
 8005210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2204      	movs	r2, #4
 8005216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f8b1 	bl	800538e <HAL_TIM_IC_CaptureCallback>
 800522c:	e005      	b.n	800523a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f8a3 	bl	800537a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f8b4 	bl	80053a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0310 	and.w	r3, r3, #16
 800524a:	2b10      	cmp	r3, #16
 800524c:	d122      	bne.n	8005294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b10      	cmp	r3, #16
 800525a:	d11b      	bne.n	8005294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0210 	mvn.w	r2, #16
 8005264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2208      	movs	r2, #8
 800526a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f887 	bl	800538e <HAL_TIM_IC_CaptureCallback>
 8005280:	e005      	b.n	800528e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f879 	bl	800537a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f88a 	bl	80053a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d10e      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d107      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0201 	mvn.w	r2, #1
 80052b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7fb fea8 	bl	8001010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ca:	2b80      	cmp	r3, #128	; 0x80
 80052cc:	d10e      	bne.n	80052ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d8:	2b80      	cmp	r3, #128	; 0x80
 80052da:	d107      	bne.n	80052ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f914 	bl	8005514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fa:	d10e      	bne.n	800531a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005306:	2b80      	cmp	r3, #128	; 0x80
 8005308:	d107      	bne.n	800531a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f907 	bl	8005528 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005324:	2b40      	cmp	r3, #64	; 0x40
 8005326:	d10e      	bne.n	8005346 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005332:	2b40      	cmp	r3, #64	; 0x40
 8005334:	d107      	bne.n	8005346 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800533e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f838 	bl	80053b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b20      	cmp	r3, #32
 8005352:	d10e      	bne.n	8005372 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f003 0320 	and.w	r3, r3, #32
 800535e:	2b20      	cmp	r3, #32
 8005360:	d107      	bne.n	8005372 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f06f 0220 	mvn.w	r2, #32
 800536a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f8c7 	bl	8005500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005372:	bf00      	nop
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
	...

080053cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a40      	ldr	r2, [pc, #256]	; (80054e0 <TIM_Base_SetConfig+0x114>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d013      	beq.n	800540c <TIM_Base_SetConfig+0x40>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ea:	d00f      	beq.n	800540c <TIM_Base_SetConfig+0x40>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a3d      	ldr	r2, [pc, #244]	; (80054e4 <TIM_Base_SetConfig+0x118>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00b      	beq.n	800540c <TIM_Base_SetConfig+0x40>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a3c      	ldr	r2, [pc, #240]	; (80054e8 <TIM_Base_SetConfig+0x11c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d007      	beq.n	800540c <TIM_Base_SetConfig+0x40>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a3b      	ldr	r2, [pc, #236]	; (80054ec <TIM_Base_SetConfig+0x120>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d003      	beq.n	800540c <TIM_Base_SetConfig+0x40>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a3a      	ldr	r2, [pc, #232]	; (80054f0 <TIM_Base_SetConfig+0x124>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d108      	bne.n	800541e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a2f      	ldr	r2, [pc, #188]	; (80054e0 <TIM_Base_SetConfig+0x114>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d01f      	beq.n	8005466 <TIM_Base_SetConfig+0x9a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542c:	d01b      	beq.n	8005466 <TIM_Base_SetConfig+0x9a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a2c      	ldr	r2, [pc, #176]	; (80054e4 <TIM_Base_SetConfig+0x118>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d017      	beq.n	8005466 <TIM_Base_SetConfig+0x9a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a2b      	ldr	r2, [pc, #172]	; (80054e8 <TIM_Base_SetConfig+0x11c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d013      	beq.n	8005466 <TIM_Base_SetConfig+0x9a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a2a      	ldr	r2, [pc, #168]	; (80054ec <TIM_Base_SetConfig+0x120>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00f      	beq.n	8005466 <TIM_Base_SetConfig+0x9a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a29      	ldr	r2, [pc, #164]	; (80054f0 <TIM_Base_SetConfig+0x124>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00b      	beq.n	8005466 <TIM_Base_SetConfig+0x9a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a28      	ldr	r2, [pc, #160]	; (80054f4 <TIM_Base_SetConfig+0x128>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d007      	beq.n	8005466 <TIM_Base_SetConfig+0x9a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a27      	ldr	r2, [pc, #156]	; (80054f8 <TIM_Base_SetConfig+0x12c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d003      	beq.n	8005466 <TIM_Base_SetConfig+0x9a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a26      	ldr	r2, [pc, #152]	; (80054fc <TIM_Base_SetConfig+0x130>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d108      	bne.n	8005478 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800546c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4313      	orrs	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a10      	ldr	r2, [pc, #64]	; (80054e0 <TIM_Base_SetConfig+0x114>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00f      	beq.n	80054c4 <TIM_Base_SetConfig+0xf8>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a12      	ldr	r2, [pc, #72]	; (80054f0 <TIM_Base_SetConfig+0x124>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00b      	beq.n	80054c4 <TIM_Base_SetConfig+0xf8>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a11      	ldr	r2, [pc, #68]	; (80054f4 <TIM_Base_SetConfig+0x128>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d007      	beq.n	80054c4 <TIM_Base_SetConfig+0xf8>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a10      	ldr	r2, [pc, #64]	; (80054f8 <TIM_Base_SetConfig+0x12c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d003      	beq.n	80054c4 <TIM_Base_SetConfig+0xf8>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a0f      	ldr	r2, [pc, #60]	; (80054fc <TIM_Base_SetConfig+0x130>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d103      	bne.n	80054cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	615a      	str	r2, [r3, #20]
}
 80054d2:	bf00      	nop
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40012c00 	.word	0x40012c00
 80054e4:	40000400 	.word	0x40000400
 80054e8:	40000800 	.word	0x40000800
 80054ec:	40000c00 	.word	0x40000c00
 80054f0:	40013400 	.word	0x40013400
 80054f4:	40014000 	.word	0x40014000
 80054f8:	40014400 	.word	0x40014400
 80054fc:	40014800 	.word	0x40014800

08005500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e042      	b.n	80055d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005554:	2b00      	cmp	r3, #0
 8005556:	d106      	bne.n	8005566 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7fb fe4b 	bl	80011fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2224      	movs	r2, #36	; 0x24
 800556a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0201 	bic.w	r2, r2, #1
 800557c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f82c 	bl	80055dc <UART_SetConfig>
 8005584:	4603      	mov	r3, r0
 8005586:	2b01      	cmp	r3, #1
 8005588:	d101      	bne.n	800558e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e022      	b.n	80055d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fb20 	bl	8005bdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0201 	orr.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 fba7 	bl	8005d20 <UART_CheckIdleState>
 80055d2:	4603      	mov	r3, r0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055e0:	b08c      	sub	sp, #48	; 0x30
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	431a      	orrs	r2, r3
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	4313      	orrs	r3, r2
 8005602:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	4baa      	ldr	r3, [pc, #680]	; (80058b4 <UART_SetConfig+0x2d8>)
 800560c:	4013      	ands	r3, r2
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	6812      	ldr	r2, [r2, #0]
 8005612:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005614:	430b      	orrs	r3, r1
 8005616:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a9f      	ldr	r2, [pc, #636]	; (80058b8 <UART_SetConfig+0x2dc>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d004      	beq.n	8005648 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005644:	4313      	orrs	r3, r2
 8005646:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005652:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	6812      	ldr	r2, [r2, #0]
 800565a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800565c:	430b      	orrs	r3, r1
 800565e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005666:	f023 010f 	bic.w	r1, r3, #15
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a90      	ldr	r2, [pc, #576]	; (80058bc <UART_SetConfig+0x2e0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d125      	bne.n	80056cc <UART_SetConfig+0xf0>
 8005680:	4b8f      	ldr	r3, [pc, #572]	; (80058c0 <UART_SetConfig+0x2e4>)
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b03      	cmp	r3, #3
 800568c:	d81a      	bhi.n	80056c4 <UART_SetConfig+0xe8>
 800568e:	a201      	add	r2, pc, #4	; (adr r2, 8005694 <UART_SetConfig+0xb8>)
 8005690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005694:	080056a5 	.word	0x080056a5
 8005698:	080056b5 	.word	0x080056b5
 800569c:	080056ad 	.word	0x080056ad
 80056a0:	080056bd 	.word	0x080056bd
 80056a4:	2301      	movs	r3, #1
 80056a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056aa:	e116      	b.n	80058da <UART_SetConfig+0x2fe>
 80056ac:	2302      	movs	r3, #2
 80056ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056b2:	e112      	b.n	80058da <UART_SetConfig+0x2fe>
 80056b4:	2304      	movs	r3, #4
 80056b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ba:	e10e      	b.n	80058da <UART_SetConfig+0x2fe>
 80056bc:	2308      	movs	r3, #8
 80056be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056c2:	e10a      	b.n	80058da <UART_SetConfig+0x2fe>
 80056c4:	2310      	movs	r3, #16
 80056c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ca:	e106      	b.n	80058da <UART_SetConfig+0x2fe>
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a7c      	ldr	r2, [pc, #496]	; (80058c4 <UART_SetConfig+0x2e8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d138      	bne.n	8005748 <UART_SetConfig+0x16c>
 80056d6:	4b7a      	ldr	r3, [pc, #488]	; (80058c0 <UART_SetConfig+0x2e4>)
 80056d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056dc:	f003 030c 	and.w	r3, r3, #12
 80056e0:	2b0c      	cmp	r3, #12
 80056e2:	d82d      	bhi.n	8005740 <UART_SetConfig+0x164>
 80056e4:	a201      	add	r2, pc, #4	; (adr r2, 80056ec <UART_SetConfig+0x110>)
 80056e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ea:	bf00      	nop
 80056ec:	08005721 	.word	0x08005721
 80056f0:	08005741 	.word	0x08005741
 80056f4:	08005741 	.word	0x08005741
 80056f8:	08005741 	.word	0x08005741
 80056fc:	08005731 	.word	0x08005731
 8005700:	08005741 	.word	0x08005741
 8005704:	08005741 	.word	0x08005741
 8005708:	08005741 	.word	0x08005741
 800570c:	08005729 	.word	0x08005729
 8005710:	08005741 	.word	0x08005741
 8005714:	08005741 	.word	0x08005741
 8005718:	08005741 	.word	0x08005741
 800571c:	08005739 	.word	0x08005739
 8005720:	2300      	movs	r3, #0
 8005722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005726:	e0d8      	b.n	80058da <UART_SetConfig+0x2fe>
 8005728:	2302      	movs	r3, #2
 800572a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800572e:	e0d4      	b.n	80058da <UART_SetConfig+0x2fe>
 8005730:	2304      	movs	r3, #4
 8005732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005736:	e0d0      	b.n	80058da <UART_SetConfig+0x2fe>
 8005738:	2308      	movs	r3, #8
 800573a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800573e:	e0cc      	b.n	80058da <UART_SetConfig+0x2fe>
 8005740:	2310      	movs	r3, #16
 8005742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005746:	e0c8      	b.n	80058da <UART_SetConfig+0x2fe>
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a5e      	ldr	r2, [pc, #376]	; (80058c8 <UART_SetConfig+0x2ec>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d125      	bne.n	800579e <UART_SetConfig+0x1c2>
 8005752:	4b5b      	ldr	r3, [pc, #364]	; (80058c0 <UART_SetConfig+0x2e4>)
 8005754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005758:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800575c:	2b30      	cmp	r3, #48	; 0x30
 800575e:	d016      	beq.n	800578e <UART_SetConfig+0x1b2>
 8005760:	2b30      	cmp	r3, #48	; 0x30
 8005762:	d818      	bhi.n	8005796 <UART_SetConfig+0x1ba>
 8005764:	2b20      	cmp	r3, #32
 8005766:	d00a      	beq.n	800577e <UART_SetConfig+0x1a2>
 8005768:	2b20      	cmp	r3, #32
 800576a:	d814      	bhi.n	8005796 <UART_SetConfig+0x1ba>
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <UART_SetConfig+0x19a>
 8005770:	2b10      	cmp	r3, #16
 8005772:	d008      	beq.n	8005786 <UART_SetConfig+0x1aa>
 8005774:	e00f      	b.n	8005796 <UART_SetConfig+0x1ba>
 8005776:	2300      	movs	r3, #0
 8005778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800577c:	e0ad      	b.n	80058da <UART_SetConfig+0x2fe>
 800577e:	2302      	movs	r3, #2
 8005780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005784:	e0a9      	b.n	80058da <UART_SetConfig+0x2fe>
 8005786:	2304      	movs	r3, #4
 8005788:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800578c:	e0a5      	b.n	80058da <UART_SetConfig+0x2fe>
 800578e:	2308      	movs	r3, #8
 8005790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005794:	e0a1      	b.n	80058da <UART_SetConfig+0x2fe>
 8005796:	2310      	movs	r3, #16
 8005798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800579c:	e09d      	b.n	80058da <UART_SetConfig+0x2fe>
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a4a      	ldr	r2, [pc, #296]	; (80058cc <UART_SetConfig+0x2f0>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d125      	bne.n	80057f4 <UART_SetConfig+0x218>
 80057a8:	4b45      	ldr	r3, [pc, #276]	; (80058c0 <UART_SetConfig+0x2e4>)
 80057aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80057b2:	2bc0      	cmp	r3, #192	; 0xc0
 80057b4:	d016      	beq.n	80057e4 <UART_SetConfig+0x208>
 80057b6:	2bc0      	cmp	r3, #192	; 0xc0
 80057b8:	d818      	bhi.n	80057ec <UART_SetConfig+0x210>
 80057ba:	2b80      	cmp	r3, #128	; 0x80
 80057bc:	d00a      	beq.n	80057d4 <UART_SetConfig+0x1f8>
 80057be:	2b80      	cmp	r3, #128	; 0x80
 80057c0:	d814      	bhi.n	80057ec <UART_SetConfig+0x210>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <UART_SetConfig+0x1f0>
 80057c6:	2b40      	cmp	r3, #64	; 0x40
 80057c8:	d008      	beq.n	80057dc <UART_SetConfig+0x200>
 80057ca:	e00f      	b.n	80057ec <UART_SetConfig+0x210>
 80057cc:	2300      	movs	r3, #0
 80057ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057d2:	e082      	b.n	80058da <UART_SetConfig+0x2fe>
 80057d4:	2302      	movs	r3, #2
 80057d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057da:	e07e      	b.n	80058da <UART_SetConfig+0x2fe>
 80057dc:	2304      	movs	r3, #4
 80057de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057e2:	e07a      	b.n	80058da <UART_SetConfig+0x2fe>
 80057e4:	2308      	movs	r3, #8
 80057e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ea:	e076      	b.n	80058da <UART_SetConfig+0x2fe>
 80057ec:	2310      	movs	r3, #16
 80057ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057f2:	e072      	b.n	80058da <UART_SetConfig+0x2fe>
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a35      	ldr	r2, [pc, #212]	; (80058d0 <UART_SetConfig+0x2f4>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d12a      	bne.n	8005854 <UART_SetConfig+0x278>
 80057fe:	4b30      	ldr	r3, [pc, #192]	; (80058c0 <UART_SetConfig+0x2e4>)
 8005800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800580c:	d01a      	beq.n	8005844 <UART_SetConfig+0x268>
 800580e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005812:	d81b      	bhi.n	800584c <UART_SetConfig+0x270>
 8005814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005818:	d00c      	beq.n	8005834 <UART_SetConfig+0x258>
 800581a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800581e:	d815      	bhi.n	800584c <UART_SetConfig+0x270>
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <UART_SetConfig+0x250>
 8005824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005828:	d008      	beq.n	800583c <UART_SetConfig+0x260>
 800582a:	e00f      	b.n	800584c <UART_SetConfig+0x270>
 800582c:	2300      	movs	r3, #0
 800582e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005832:	e052      	b.n	80058da <UART_SetConfig+0x2fe>
 8005834:	2302      	movs	r3, #2
 8005836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800583a:	e04e      	b.n	80058da <UART_SetConfig+0x2fe>
 800583c:	2304      	movs	r3, #4
 800583e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005842:	e04a      	b.n	80058da <UART_SetConfig+0x2fe>
 8005844:	2308      	movs	r3, #8
 8005846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800584a:	e046      	b.n	80058da <UART_SetConfig+0x2fe>
 800584c:	2310      	movs	r3, #16
 800584e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005852:	e042      	b.n	80058da <UART_SetConfig+0x2fe>
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a17      	ldr	r2, [pc, #92]	; (80058b8 <UART_SetConfig+0x2dc>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d13a      	bne.n	80058d4 <UART_SetConfig+0x2f8>
 800585e:	4b18      	ldr	r3, [pc, #96]	; (80058c0 <UART_SetConfig+0x2e4>)
 8005860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005864:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005868:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800586c:	d01a      	beq.n	80058a4 <UART_SetConfig+0x2c8>
 800586e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005872:	d81b      	bhi.n	80058ac <UART_SetConfig+0x2d0>
 8005874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005878:	d00c      	beq.n	8005894 <UART_SetConfig+0x2b8>
 800587a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800587e:	d815      	bhi.n	80058ac <UART_SetConfig+0x2d0>
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <UART_SetConfig+0x2b0>
 8005884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005888:	d008      	beq.n	800589c <UART_SetConfig+0x2c0>
 800588a:	e00f      	b.n	80058ac <UART_SetConfig+0x2d0>
 800588c:	2300      	movs	r3, #0
 800588e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005892:	e022      	b.n	80058da <UART_SetConfig+0x2fe>
 8005894:	2302      	movs	r3, #2
 8005896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800589a:	e01e      	b.n	80058da <UART_SetConfig+0x2fe>
 800589c:	2304      	movs	r3, #4
 800589e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058a2:	e01a      	b.n	80058da <UART_SetConfig+0x2fe>
 80058a4:	2308      	movs	r3, #8
 80058a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058aa:	e016      	b.n	80058da <UART_SetConfig+0x2fe>
 80058ac:	2310      	movs	r3, #16
 80058ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058b2:	e012      	b.n	80058da <UART_SetConfig+0x2fe>
 80058b4:	cfff69f3 	.word	0xcfff69f3
 80058b8:	40008000 	.word	0x40008000
 80058bc:	40013800 	.word	0x40013800
 80058c0:	40021000 	.word	0x40021000
 80058c4:	40004400 	.word	0x40004400
 80058c8:	40004800 	.word	0x40004800
 80058cc:	40004c00 	.word	0x40004c00
 80058d0:	40005000 	.word	0x40005000
 80058d4:	2310      	movs	r3, #16
 80058d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4ab0      	ldr	r2, [pc, #704]	; (8005ba0 <UART_SetConfig+0x5c4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	f040 809b 	bne.w	8005a1c <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d827      	bhi.n	800593e <UART_SetConfig+0x362>
 80058ee:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <UART_SetConfig+0x318>)
 80058f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f4:	08005919 	.word	0x08005919
 80058f8:	08005921 	.word	0x08005921
 80058fc:	08005929 	.word	0x08005929
 8005900:	0800593f 	.word	0x0800593f
 8005904:	0800592f 	.word	0x0800592f
 8005908:	0800593f 	.word	0x0800593f
 800590c:	0800593f 	.word	0x0800593f
 8005910:	0800593f 	.word	0x0800593f
 8005914:	08005937 	.word	0x08005937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005918:	f7fe fbbe 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 800591c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800591e:	e014      	b.n	800594a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005920:	f7fe fbce 	bl	80040c0 <HAL_RCC_GetPCLK2Freq>
 8005924:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005926:	e010      	b.n	800594a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005928:	4b9e      	ldr	r3, [pc, #632]	; (8005ba4 <UART_SetConfig+0x5c8>)
 800592a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800592c:	e00d      	b.n	800594a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800592e:	f7fe fb01 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 8005932:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005934:	e009      	b.n	800594a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800593c:	e005      	b.n	800594a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005948:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 8130 	beq.w	8005bb2 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	4a94      	ldr	r2, [pc, #592]	; (8005ba8 <UART_SetConfig+0x5cc>)
 8005958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800595c:	461a      	mov	r2, r3
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	fbb3 f3f2 	udiv	r3, r3, r2
 8005964:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	4613      	mov	r3, r2
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	4413      	add	r3, r2
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	429a      	cmp	r2, r3
 8005974:	d305      	bcc.n	8005982 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	429a      	cmp	r2, r3
 8005980:	d903      	bls.n	800598a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005988:	e113      	b.n	8005bb2 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	2200      	movs	r2, #0
 800598e:	60bb      	str	r3, [r7, #8]
 8005990:	60fa      	str	r2, [r7, #12]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	4a84      	ldr	r2, [pc, #528]	; (8005ba8 <UART_SetConfig+0x5cc>)
 8005998:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800599c:	b29b      	uxth	r3, r3
 800599e:	2200      	movs	r2, #0
 80059a0:	603b      	str	r3, [r7, #0]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059ac:	f7fa fd68 	bl	8000480 <__aeabi_uldivmod>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	4610      	mov	r0, r2
 80059b6:	4619      	mov	r1, r3
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	020b      	lsls	r3, r1, #8
 80059c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059c6:	0202      	lsls	r2, r0, #8
 80059c8:	6979      	ldr	r1, [r7, #20]
 80059ca:	6849      	ldr	r1, [r1, #4]
 80059cc:	0849      	lsrs	r1, r1, #1
 80059ce:	2000      	movs	r0, #0
 80059d0:	460c      	mov	r4, r1
 80059d2:	4605      	mov	r5, r0
 80059d4:	eb12 0804 	adds.w	r8, r2, r4
 80059d8:	eb43 0905 	adc.w	r9, r3, r5
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	469a      	mov	sl, r3
 80059e4:	4693      	mov	fp, r2
 80059e6:	4652      	mov	r2, sl
 80059e8:	465b      	mov	r3, fp
 80059ea:	4640      	mov	r0, r8
 80059ec:	4649      	mov	r1, r9
 80059ee:	f7fa fd47 	bl	8000480 <__aeabi_uldivmod>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	4613      	mov	r3, r2
 80059f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a00:	d308      	bcc.n	8005a14 <UART_SetConfig+0x438>
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a08:	d204      	bcs.n	8005a14 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6a3a      	ldr	r2, [r7, #32]
 8005a10:	60da      	str	r2, [r3, #12]
 8005a12:	e0ce      	b.n	8005bb2 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a1a:	e0ca      	b.n	8005bb2 <UART_SetConfig+0x5d6>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a24:	d167      	bne.n	8005af6 <UART_SetConfig+0x51a>
  {
    switch (clocksource)
 8005a26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a2a:	2b08      	cmp	r3, #8
 8005a2c:	d827      	bhi.n	8005a7e <UART_SetConfig+0x4a2>
 8005a2e:	a201      	add	r2, pc, #4	; (adr r2, 8005a34 <UART_SetConfig+0x458>)
 8005a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a34:	08005a59 	.word	0x08005a59
 8005a38:	08005a61 	.word	0x08005a61
 8005a3c:	08005a69 	.word	0x08005a69
 8005a40:	08005a7f 	.word	0x08005a7f
 8005a44:	08005a6f 	.word	0x08005a6f
 8005a48:	08005a7f 	.word	0x08005a7f
 8005a4c:	08005a7f 	.word	0x08005a7f
 8005a50:	08005a7f 	.word	0x08005a7f
 8005a54:	08005a77 	.word	0x08005a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a58:	f7fe fb1e 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 8005a5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a5e:	e014      	b.n	8005a8a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a60:	f7fe fb2e 	bl	80040c0 <HAL_RCC_GetPCLK2Freq>
 8005a64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a66:	e010      	b.n	8005a8a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a68:	4b4e      	ldr	r3, [pc, #312]	; (8005ba4 <UART_SetConfig+0x5c8>)
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a6c:	e00d      	b.n	8005a8a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a6e:	f7fe fa61 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 8005a72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a74:	e009      	b.n	8005a8a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a7c:	e005      	b.n	8005a8a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 8090 	beq.w	8005bb2 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a96:	4a44      	ldr	r2, [pc, #272]	; (8005ba8 <UART_SetConfig+0x5cc>)
 8005a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aa4:	005a      	lsls	r2, r3, #1
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	085b      	lsrs	r3, r3, #1
 8005aac:	441a      	add	r2, r3
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	2b0f      	cmp	r3, #15
 8005abe:	d916      	bls.n	8005aee <UART_SetConfig+0x512>
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac6:	d212      	bcs.n	8005aee <UART_SetConfig+0x512>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	f023 030f 	bic.w	r3, r3, #15
 8005ad0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	085b      	lsrs	r3, r3, #1
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	8bfb      	ldrh	r3, [r7, #30]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	8bfa      	ldrh	r2, [r7, #30]
 8005aea:	60da      	str	r2, [r3, #12]
 8005aec:	e061      	b.n	8005bb2 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005af4:	e05d      	b.n	8005bb2 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005af6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d827      	bhi.n	8005b4e <UART_SetConfig+0x572>
 8005afe:	a201      	add	r2, pc, #4	; (adr r2, 8005b04 <UART_SetConfig+0x528>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b29 	.word	0x08005b29
 8005b08:	08005b31 	.word	0x08005b31
 8005b0c:	08005b39 	.word	0x08005b39
 8005b10:	08005b4f 	.word	0x08005b4f
 8005b14:	08005b3f 	.word	0x08005b3f
 8005b18:	08005b4f 	.word	0x08005b4f
 8005b1c:	08005b4f 	.word	0x08005b4f
 8005b20:	08005b4f 	.word	0x08005b4f
 8005b24:	08005b47 	.word	0x08005b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b28:	f7fe fab6 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 8005b2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b2e:	e014      	b.n	8005b5a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b30:	f7fe fac6 	bl	80040c0 <HAL_RCC_GetPCLK2Freq>
 8005b34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b36:	e010      	b.n	8005b5a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b38:	4b1a      	ldr	r3, [pc, #104]	; (8005ba4 <UART_SetConfig+0x5c8>)
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b3c:	e00d      	b.n	8005b5a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b3e:	f7fe f9f9 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 8005b42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b44:	e009      	b.n	8005b5a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b4c:	e005      	b.n	8005b5a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b58:	bf00      	nop
    }

    if (pclk != 0U)
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d028      	beq.n	8005bb2 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	4a10      	ldr	r2, [pc, #64]	; (8005ba8 <UART_SetConfig+0x5cc>)
 8005b66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	085b      	lsrs	r3, r3, #1
 8005b78:	441a      	add	r2, r3
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	2b0f      	cmp	r3, #15
 8005b8a:	d90f      	bls.n	8005bac <UART_SetConfig+0x5d0>
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b92:	d20b      	bcs.n	8005bac <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = usartdiv;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6a3a      	ldr	r2, [r7, #32]
 8005b9a:	60da      	str	r2, [r3, #12]
 8005b9c:	e009      	b.n	8005bb2 <UART_SetConfig+0x5d6>
 8005b9e:	bf00      	nop
 8005ba0:	40008000 	.word	0x40008000
 8005ba4:	00f42400 	.word	0x00f42400
 8005ba8:	0800782c 	.word	0x0800782c
      }
      else
      {
        ret = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005bce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3730      	adds	r7, #48	; 0x30
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005bdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00a      	beq.n	8005c06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00a      	beq.n	8005c28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	430a      	orrs	r2, r1
 8005c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00a      	beq.n	8005c4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4e:	f003 0308 	and.w	r3, r3, #8
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00a      	beq.n	8005c6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c70:	f003 0310 	and.w	r3, r3, #16
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00a      	beq.n	8005c8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00a      	beq.n	8005cb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01a      	beq.n	8005cf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cda:	d10a      	bne.n	8005cf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00a      	beq.n	8005d14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	605a      	str	r2, [r3, #4]
  }
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af02      	add	r7, sp, #8
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d30:	f7fb fd36 	bl	80017a0 <HAL_GetTick>
 8005d34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0308 	and.w	r3, r3, #8
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d10e      	bne.n	8005d62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f82f 	bl	8005db6 <UART_WaitOnFlagUntilTimeout>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e025      	b.n	8005dae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d10e      	bne.n	8005d8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f819 	bl	8005db6 <UART_WaitOnFlagUntilTimeout>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e00f      	b.n	8005dae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	603b      	str	r3, [r7, #0]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dc6:	e062      	b.n	8005e8e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dce:	d05e      	beq.n	8005e8e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd0:	f7fb fce6 	bl	80017a0 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d302      	bcc.n	8005de6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d11d      	bne.n	8005e22 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005df4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0201 	bic.w	r2, r2, #1
 8005e04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2220      	movs	r2, #32
 8005e12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e045      	b.n	8005eae <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d02e      	beq.n	8005e8e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e3e:	d126      	bne.n	8005e8e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e58:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0201 	bic.w	r2, r2, #1
 8005e68:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e00f      	b.n	8005eae <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69da      	ldr	r2, [r3, #28]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4013      	ands	r3, r2
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	bf0c      	ite	eq
 8005e9e:	2301      	moveq	r3, #1
 8005ea0:	2300      	movne	r3, #0
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	79fb      	ldrb	r3, [r7, #7]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d08d      	beq.n	8005dc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <HAL_UARTEx_DisableFifoMode+0x16>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e027      	b.n	8005f1c <HAL_UARTEx_DisableFifoMode+0x66>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2224      	movs	r2, #36	; 0x24
 8005ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0201 	bic.w	r2, r2, #1
 8005ef2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005efa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e02d      	b.n	8005f9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2224      	movs	r2, #36	; 0x24
 8005f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0201 	bic.w	r2, r2, #1
 8005f66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f84f 	bl	8006020 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e02d      	b.n	8006018 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2224      	movs	r2, #36	; 0x24
 8005fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0201 	bic.w	r2, r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f811 	bl	8006020 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2220      	movs	r2, #32
 800600a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800602c:	2b00      	cmp	r3, #0
 800602e:	d108      	bne.n	8006042 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006040:	e031      	b.n	80060a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006042:	2308      	movs	r3, #8
 8006044:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006046:	2308      	movs	r3, #8
 8006048:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	0e5b      	lsrs	r3, r3, #25
 8006052:	b2db      	uxtb	r3, r3
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	0f5b      	lsrs	r3, r3, #29
 8006062:	b2db      	uxtb	r3, r3
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800606a:	7bbb      	ldrb	r3, [r7, #14]
 800606c:	7b3a      	ldrb	r2, [r7, #12]
 800606e:	4911      	ldr	r1, [pc, #68]	; (80060b4 <UARTEx_SetNbDataToProcess+0x94>)
 8006070:	5c8a      	ldrb	r2, [r1, r2]
 8006072:	fb02 f303 	mul.w	r3, r2, r3
 8006076:	7b3a      	ldrb	r2, [r7, #12]
 8006078:	490f      	ldr	r1, [pc, #60]	; (80060b8 <UARTEx_SetNbDataToProcess+0x98>)
 800607a:	5c8a      	ldrb	r2, [r1, r2]
 800607c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006080:	b29a      	uxth	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006088:	7bfb      	ldrb	r3, [r7, #15]
 800608a:	7b7a      	ldrb	r2, [r7, #13]
 800608c:	4909      	ldr	r1, [pc, #36]	; (80060b4 <UARTEx_SetNbDataToProcess+0x94>)
 800608e:	5c8a      	ldrb	r2, [r1, r2]
 8006090:	fb02 f303 	mul.w	r3, r2, r3
 8006094:	7b7a      	ldrb	r2, [r7, #13]
 8006096:	4908      	ldr	r1, [pc, #32]	; (80060b8 <UARTEx_SetNbDataToProcess+0x98>)
 8006098:	5c8a      	ldrb	r2, [r1, r2]
 800609a:	fb93 f3f2 	sdiv	r3, r3, r2
 800609e:	b29a      	uxth	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	08007844 	.word	0x08007844
 80060b8:	0800784c 	.word	0x0800784c

080060bc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80060bc:	b480      	push	{r7}
 80060be:	b08b      	sub	sp, #44	; 0x2c
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	fa93 f3a3 	rbit	r3, r3
 80060d6:	613b      	str	r3, [r7, #16]
  return result;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80060e2:	2320      	movs	r3, #32
 80060e4:	e003      	b.n	80060ee <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	fab3 f383 	clz	r3, r3
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	2103      	movs	r1, #3
 80060f2:	fa01 f303 	lsl.w	r3, r1, r3
 80060f6:	43db      	mvns	r3, r3
 80060f8:	401a      	ands	r2, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	fa93 f3a3 	rbit	r3, r3
 8006104:	61fb      	str	r3, [r7, #28]
  return result;
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006110:	2320      	movs	r3, #32
 8006112:	e003      	b.n	800611c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	fab3 f383 	clz	r3, r3
 800611a:	b2db      	uxtb	r3, r3
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	6879      	ldr	r1, [r7, #4]
 8006120:	fa01 f303 	lsl.w	r3, r1, r3
 8006124:	431a      	orrs	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	601a      	str	r2, [r3, #0]
}
 800612a:	bf00      	nop
 800612c:	372c      	adds	r7, #44	; 0x2c
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006136:	b480      	push	{r7}
 8006138:	b085      	sub	sp, #20
 800613a:	af00      	add	r7, sp, #0
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	43db      	mvns	r3, r3
 800614a:	401a      	ands	r2, r3
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	fb01 f303 	mul.w	r3, r1, r3
 8006154:	431a      	orrs	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	605a      	str	r2, [r3, #4]
}
 800615a:	bf00      	nop
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006166:	b480      	push	{r7}
 8006168:	b08b      	sub	sp, #44	; 0x2c
 800616a:	af00      	add	r7, sp, #0
 800616c:	60f8      	str	r0, [r7, #12]
 800616e:	60b9      	str	r1, [r7, #8]
 8006170:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	fa93 f3a3 	rbit	r3, r3
 8006180:	613b      	str	r3, [r7, #16]
  return result;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800618c:	2320      	movs	r3, #32
 800618e:	e003      	b.n	8006198 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	fab3 f383 	clz	r3, r3
 8006196:	b2db      	uxtb	r3, r3
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	2103      	movs	r1, #3
 800619c:	fa01 f303 	lsl.w	r3, r1, r3
 80061a0:	43db      	mvns	r3, r3
 80061a2:	401a      	ands	r2, r3
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	fa93 f3a3 	rbit	r3, r3
 80061ae:	61fb      	str	r3, [r7, #28]
  return result;
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80061ba:	2320      	movs	r3, #32
 80061bc:	e003      	b.n	80061c6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	fab3 f383 	clz	r3, r3
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	fa01 f303 	lsl.w	r3, r1, r3
 80061ce:	431a      	orrs	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80061d4:	bf00      	nop
 80061d6:	372c      	adds	r7, #44	; 0x2c
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b08b      	sub	sp, #44	; 0x2c
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	68da      	ldr	r2, [r3, #12]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	fa93 f3a3 	rbit	r3, r3
 80061fa:	613b      	str	r3, [r7, #16]
  return result;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006206:	2320      	movs	r3, #32
 8006208:	e003      	b.n	8006212 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	fab3 f383 	clz	r3, r3
 8006210:	b2db      	uxtb	r3, r3
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	2103      	movs	r1, #3
 8006216:	fa01 f303 	lsl.w	r3, r1, r3
 800621a:	43db      	mvns	r3, r3
 800621c:	401a      	ands	r2, r3
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	fa93 f3a3 	rbit	r3, r3
 8006228:	61fb      	str	r3, [r7, #28]
  return result;
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006234:	2320      	movs	r3, #32
 8006236:	e003      	b.n	8006240 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	fab3 f383 	clz	r3, r3
 800623e:	b2db      	uxtb	r3, r3
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	fa01 f303 	lsl.w	r3, r1, r3
 8006248:	431a      	orrs	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	60da      	str	r2, [r3, #12]
}
 800624e:	bf00      	nop
 8006250:	372c      	adds	r7, #44	; 0x2c
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800625a:	b480      	push	{r7}
 800625c:	b08b      	sub	sp, #44	; 0x2c
 800625e:	af00      	add	r7, sp, #0
 8006260:	60f8      	str	r0, [r7, #12]
 8006262:	60b9      	str	r1, [r7, #8]
 8006264:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6a1a      	ldr	r2, [r3, #32]
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	fa93 f3a3 	rbit	r3, r3
 8006274:	613b      	str	r3, [r7, #16]
  return result;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006280:	2320      	movs	r3, #32
 8006282:	e003      	b.n	800628c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	fab3 f383 	clz	r3, r3
 800628a:	b2db      	uxtb	r3, r3
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	210f      	movs	r1, #15
 8006290:	fa01 f303 	lsl.w	r3, r1, r3
 8006294:	43db      	mvns	r3, r3
 8006296:	401a      	ands	r2, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	fa93 f3a3 	rbit	r3, r3
 80062a2:	61fb      	str	r3, [r7, #28]
  return result;
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80062ae:	2320      	movs	r3, #32
 80062b0:	e003      	b.n	80062ba <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	fab3 f383 	clz	r3, r3
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	fa01 f303 	lsl.w	r3, r1, r3
 80062c2:	431a      	orrs	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80062c8:	bf00      	nop
 80062ca:	372c      	adds	r7, #44	; 0x2c
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b08b      	sub	sp, #44	; 0x2c
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	0a1b      	lsrs	r3, r3, #8
 80062e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	fa93 f3a3 	rbit	r3, r3
 80062f0:	613b      	str	r3, [r7, #16]
  return result;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80062fc:	2320      	movs	r3, #32
 80062fe:	e003      	b.n	8006308 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	fab3 f383 	clz	r3, r3
 8006306:	b2db      	uxtb	r3, r3
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	210f      	movs	r1, #15
 800630c:	fa01 f303 	lsl.w	r3, r1, r3
 8006310:	43db      	mvns	r3, r3
 8006312:	401a      	ands	r2, r3
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	0a1b      	lsrs	r3, r3, #8
 8006318:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	fa93 f3a3 	rbit	r3, r3
 8006320:	61fb      	str	r3, [r7, #28]
  return result;
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800632c:	2320      	movs	r3, #32
 800632e:	e003      	b.n	8006338 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	fab3 f383 	clz	r3, r3
 8006336:	b2db      	uxtb	r3, r3
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	6879      	ldr	r1, [r7, #4]
 800633c:	fa01 f303 	lsl.w	r3, r1, r3
 8006340:	431a      	orrs	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006346:	bf00      	nop
 8006348:	372c      	adds	r7, #44	; 0x2c
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b088      	sub	sp, #32
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	fa93 f3a3 	rbit	r3, r3
 8006368:	60fb      	str	r3, [r7, #12]
  return result;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <LL_GPIO_Init+0x26>
    return 32U;
 8006374:	2320      	movs	r3, #32
 8006376:	e003      	b.n	8006380 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	fab3 f383 	clz	r3, r3
 800637e:	b2db      	uxtb	r3, r3
 8006380:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006382:	e047      	b.n	8006414 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	2101      	movs	r1, #1
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	fa01 f303 	lsl.w	r3, r1, r3
 8006390:	4013      	ands	r3, r2
 8006392:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d039      	beq.n	800640e <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d003      	beq.n	80063aa <LL_GPIO_Init+0x58>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d10d      	bne.n	80063c6 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	461a      	mov	r2, r3
 80063b0:	69b9      	ldr	r1, [r7, #24]
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7ff fed7 	bl	8006166 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	461a      	mov	r2, r3
 80063be:	69b9      	ldr	r1, [r7, #24]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7ff feb8 	bl	8006136 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	461a      	mov	r2, r3
 80063cc:	69b9      	ldr	r1, [r7, #24]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7ff ff06 	bl	80061e0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d111      	bne.n	8006400 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	2bff      	cmp	r3, #255	; 0xff
 80063e0:	d807      	bhi.n	80063f2 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	461a      	mov	r2, r3
 80063e8:	69b9      	ldr	r1, [r7, #24]
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7ff ff35 	bl	800625a <LL_GPIO_SetAFPin_0_7>
 80063f0:	e006      	b.n	8006400 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	461a      	mov	r2, r3
 80063f8:	69b9      	ldr	r1, [r7, #24]
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7ff ff6a 	bl	80062d4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	461a      	mov	r2, r3
 8006406:	69b9      	ldr	r1, [r7, #24]
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7ff fe57 	bl	80060bc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	3301      	adds	r3, #1
 8006412:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	fa22 f303 	lsr.w	r3, r2, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1b0      	bne.n	8006384 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3720      	adds	r7, #32
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006434:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006438:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006440:	b29a      	uxth	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	b29b      	uxth	r3, r3
 8006446:	43db      	mvns	r3, r3
 8006448:	b29b      	uxth	r3, r3
 800644a:	4013      	ands	r3, r2
 800644c:	b29a      	uxth	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006462:	b084      	sub	sp, #16
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	f107 0014 	add.w	r0, r7, #20
 8006470:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	b004      	add	sp, #16
 80064a2:	4770      	bx	lr

080064a4 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b08e      	sub	sp, #56	; 0x38
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80064b2:	2234      	movs	r2, #52	; 0x34
 80064b4:	2100      	movs	r1, #0
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f001 f964 	bl	8007784 <memset>

    /* Round the pool size down to something that is evenly divisible by 
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	f023 0303 	bic.w	r3, r3, #3
 80064c2:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the 
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	f1a3 0208 	sub.w	r2, r3, #8
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2202      	movs	r2, #2
 80064f0:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */
    
    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80064f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	4413      	add	r3, r2
 80064fc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 80064fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006500:	3b04      	subs	r3, #4
 8006502:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800650c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006510:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8006512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006514:	3b04      	subs	r3, #4
 8006516:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800652a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800652e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8006534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006536:	3304      	adds	r3, #4
 8006538:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800653a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653c:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	4a1e      	ldr	r2, [pc, #120]	; (80065bc <_tx_byte_pool_create+0x118>)
 8006542:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	621a      	str	r2, [r3, #32]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800654a:	f3ef 8310 	mrs	r3, PRIMASK
 800654e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006550:	b672      	cpsid	i
    return(primask_value);
 8006552:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8006554:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	4a19      	ldr	r2, [pc, #100]	; (80065c0 <_tx_byte_pool_create+0x11c>)
 800655a:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800655c:	4b19      	ldr	r3, [pc, #100]	; (80065c4 <_tx_byte_pool_create+0x120>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d109      	bne.n	8006578 <_tx_byte_pool_create+0xd4>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8006564:	4a18      	ldr	r2, [pc, #96]	; (80065c8 <_tx_byte_pool_create+0x124>)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	631a      	str	r2, [r3, #48]	; 0x30
 8006576:	e011      	b.n	800659c <_tx_byte_pool_create+0xf8>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8006578:	4b13      	ldr	r3, [pc, #76]	; (80065c8 <_tx_byte_pool_create+0x124>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006582:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	69fa      	ldr	r2, [r7, #28]
 8006594:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6a3a      	ldr	r2, [r7, #32]
 800659a:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800659c:	4b09      	ldr	r3, [pc, #36]	; (80065c4 <_tx_byte_pool_create+0x120>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3301      	adds	r3, #1
 80065a2:	4a08      	ldr	r2, [pc, #32]	; (80065c4 <_tx_byte_pool_create+0x120>)
 80065a4:	6013      	str	r3, [r2, #0]
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	617b      	str	r3, [r7, #20]
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f383 8810 	msr	PRIMASK, r3
}
 80065b0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3738      	adds	r7, #56	; 0x38
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	ffffeeee 	.word	0xffffeeee
 80065c0:	42595445 	.word	0x42595445
 80065c4:	200009e4 	.word	0x200009e4
 80065c8:	200009e0 	.word	0x200009e0

080065cc <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80065d0:	f000 f96a 	bl	80068a8 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80065d4:	f000 fd1c 	bl	8007010 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80065d8:	4b12      	ldr	r3, [pc, #72]	; (8006624 <_tx_initialize_high_level+0x58>)
 80065da:	2200      	movs	r2, #0
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	4b12      	ldr	r3, [pc, #72]	; (8006628 <_tx_initialize_high_level+0x5c>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80065e4:	4b11      	ldr	r3, [pc, #68]	; (800662c <_tx_initialize_high_level+0x60>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	4b11      	ldr	r3, [pc, #68]	; (8006630 <_tx_initialize_high_level+0x64>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80065f0:	4b10      	ldr	r3, [pc, #64]	; (8006634 <_tx_initialize_high_level+0x68>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	4b10      	ldr	r3, [pc, #64]	; (8006638 <_tx_initialize_high_level+0x6c>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80065fc:	4b0f      	ldr	r3, [pc, #60]	; (800663c <_tx_initialize_high_level+0x70>)
 80065fe:	2200      	movs	r2, #0
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	4b0f      	ldr	r3, [pc, #60]	; (8006640 <_tx_initialize_high_level+0x74>)
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8006608:	4b0e      	ldr	r3, [pc, #56]	; (8006644 <_tx_initialize_high_level+0x78>)
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	4b0e      	ldr	r3, [pc, #56]	; (8006648 <_tx_initialize_high_level+0x7c>)
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8006614:	4b0d      	ldr	r3, [pc, #52]	; (800664c <_tx_initialize_high_level+0x80>)
 8006616:	2200      	movs	r2, #0
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	4b0d      	ldr	r3, [pc, #52]	; (8006650 <_tx_initialize_high_level+0x84>)
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]
#endif
}
 8006620:	bf00      	nop
 8006622:	bd80      	pop	{r7, pc}
 8006624:	200009b8 	.word	0x200009b8
 8006628:	200009bc 	.word	0x200009bc
 800662c:	200009c0 	.word	0x200009c0
 8006630:	200009c4 	.word	0x200009c4
 8006634:	200009c8 	.word	0x200009c8
 8006638:	200009cc 	.word	0x200009cc
 800663c:	200009d8 	.word	0x200009d8
 8006640:	200009dc 	.word	0x200009dc
 8006644:	200009e0 	.word	0x200009e0
 8006648:	200009e4 	.word	0x200009e4
 800664c:	200009d0 	.word	0x200009d0
 8006650:	200009d4 	.word	0x200009d4

08006654 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8006658:	4b10      	ldr	r3, [pc, #64]	; (800669c <_tx_initialize_kernel_enter+0x48>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8006660:	d00c      	beq.n	800667c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate 
           initialization is in progress.  Note that this variable is 
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8006662:	4b0e      	ldr	r3, [pc, #56]	; (800669c <_tx_initialize_kernel_enter+0x48>)
 8006664:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8006668:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800666a:	f7f9 fde3 	bl	8000234 <_tx_initialize_low_level>
    
        /* Invoke the high-level initialization to exercise all of the 
           ThreadX components and the application's initialization 
           function.  */
        _tx_initialize_high_level();
 800666e:	f7ff ffad 	bl	80065cc <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8006672:	4b0b      	ldr	r3, [pc, #44]	; (80066a0 <_tx_initialize_kernel_enter+0x4c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3301      	adds	r3, #1
 8006678:	4a09      	ldr	r2, [pc, #36]	; (80066a0 <_tx_initialize_kernel_enter+0x4c>)
 800667a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate 
       initialization is in progress.  Note that this variable is 
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800667c:	4b07      	ldr	r3, [pc, #28]	; (800669c <_tx_initialize_kernel_enter+0x48>)
 800667e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8006682:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8006684:	4b07      	ldr	r3, [pc, #28]	; (80066a4 <_tx_initialize_kernel_enter+0x50>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4618      	mov	r0, r3
 800668a:	f7fa f889 	bl	80007a0 <tx_application_define>

    /* Set the system state in preparation for entering the thread 
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800668e:	4b03      	ldr	r3, [pc, #12]	; (800669c <_tx_initialize_kernel_enter+0x48>)
 8006690:	2200      	movs	r2, #0
 8006692:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8006694:	f7f9 fe0a 	bl	80002ac <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8006698:	bf00      	nop
 800669a:	bd80      	pop	{r7, pc}
 800669c:	2000000c 	.word	0x2000000c
 80066a0:	20000a88 	.word	0x20000a88
 80066a4:	200009e8 	.word	0x200009e8

080066a8 <_get_ipsr>:
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 80066ae:	f3ef 8305 	mrs	r3, IPSR
 80066b2:	607b      	str	r3, [r7, #4]
    return _ipsr;
 80066b4:	687b      	ldr	r3, [r7, #4]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
	...

080066c4 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b090      	sub	sp, #64	; 0x40
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80066d2:	2300      	movs	r3, #0
 80066d4:	63bb      	str	r3, [r7, #56]	; 0x38
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80066d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066d8:	21ef      	movs	r1, #239	; 0xef
 80066da:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80066dc:	f001 f852 	bl	8007784 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80066e0:	22b0      	movs	r2, #176	; 0xb0
 80066e2:	2100      	movs	r1, #0
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f001 f84d 	bl	8007784 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006700:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006706:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800670c:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006712:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800671a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006720:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2220      	movs	r2, #32
 8006726:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800672a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800672c:	637b      	str	r3, [r7, #52]	; 0x34
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800672e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006730:	3b01      	subs	r3, #1
 8006732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006734:	4413      	add	r3, r2
 8006736:	637b      	str	r3, [r7, #52]	; 0x34
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800673c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800673e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006742:	429a      	cmp	r2, r3
 8006744:	d007      	beq.n	8006756 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8006754:	e006      	b.n	8006764 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800675a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006760:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2203      	movs	r2, #3
 8006768:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4a46      	ldr	r2, [pc, #280]	; (8006888 <_tx_thread_create+0x1c4>)
 800676e:	655a      	str	r2, [r3, #84]	; 0x54
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8006776:	4945      	ldr	r1, [pc, #276]	; (800688c <_tx_thread_create+0x1c8>)
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f7f9 fe05 	bl	8000388 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800677e:	f3ef 8310 	mrs	r3, PRIMASK
 8006782:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006784:	b672      	cpsid	i
    return(primask_value);
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8006788:	633b      	str	r3, [r7, #48]	; 0x30

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4a40      	ldr	r2, [pc, #256]	; (8006890 <_tx_thread_create+0x1cc>)
 800678e:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8006790:	4b40      	ldr	r3, [pc, #256]	; (8006894 <_tx_thread_create+0x1d0>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10b      	bne.n	80067b0 <_tx_thread_create+0xec>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8006798:	4a3f      	ldr	r2, [pc, #252]	; (8006898 <_tx_thread_create+0x1d4>)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80067ae:	e016      	b.n	80067de <_tx_thread_create+0x11a>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80067b0:	4b39      	ldr	r3, [pc, #228]	; (8006898 <_tx_thread_create+0x1d4>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        previous_thread =  next_thread -> tx_thread_created_previous;
 80067b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067bc:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80067be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80067c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }
    
    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80067de:	4b2d      	ldr	r3, [pc, #180]	; (8006894 <_tx_thread_create+0x1d0>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3301      	adds	r3, #1
 80067e4:	4a2b      	ldr	r2, [pc, #172]	; (8006894 <_tx_thread_create+0x1d0>)
 80067e6:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80067e8:	4b2c      	ldr	r3, [pc, #176]	; (800689c <_tx_thread_create+0x1d8>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3301      	adds	r3, #1
 80067ee:	4a2b      	ldr	r2, [pc, #172]	; (800689c <_tx_thread_create+0x1d8>)
 80067f0:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80067f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d128      	bne.n	800684a <_tx_thread_create+0x186>
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80067f8:	f7ff ff56 	bl	80066a8 <_get_ipsr>
 80067fc:	4602      	mov	r2, r0
 80067fe:	4b28      	ldr	r3, [pc, #160]	; (80068a0 <_tx_thread_create+0x1dc>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4313      	orrs	r3, r2
 8006804:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006808:	d30d      	bcc.n	8006826 <_tx_thread_create+0x162>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800680a:	4b26      	ldr	r3, [pc, #152]	; (80068a4 <_tx_thread_create+0x1e0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8006810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006812:	2b00      	cmp	r3, #0
 8006814:	d009      	beq.n	800682a <_tx_thread_create+0x166>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8006816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800681a:	63bb      	str	r3, [r7, #56]	; 0x38

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800681c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006822:	63da      	str	r2, [r3, #60]	; 0x3c
 8006824:	e001      	b.n	800682a <_tx_thread_create+0x166>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8006826:	2300      	movs	r3, #0
 8006828:	63fb      	str	r3, [r7, #60]	; 0x3c
 800682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682c:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	f383 8810 	msr	PRIMASK, r3
}
 8006834:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 f924 	bl	8006a84 <_tx_thread_system_resume>
#endif
 
        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800683c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d01c      	beq.n	800687c <_tx_thread_create+0x1b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8006842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006846:	63da      	str	r2, [r3, #60]	; 0x3c
 8006848:	e018      	b.n	800687c <_tx_thread_create+0x1b8>
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f383 8810 	msr	PRIMASK, r3
}
 8006854:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006856:	f3ef 8310 	mrs	r3, PRIMASK
 800685a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800685c:	b672      	cpsid	i
    return(primask_value);
 800685e:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8006860:	633b      	str	r3, [r7, #48]	; 0x30

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8006862:	4b0e      	ldr	r3, [pc, #56]	; (800689c <_tx_thread_create+0x1d8>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3b01      	subs	r3, #1
 8006868:	4a0c      	ldr	r2, [pc, #48]	; (800689c <_tx_thread_create+0x1d8>)
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	f383 8810 	msr	PRIMASK, r3
}
 8006876:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8006878:	f000 f8c0 	bl	80069fc <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3740      	adds	r7, #64	; 0x40
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	08006f5d 	.word	0x08006f5d
 800688c:	08006955 	.word	0x08006955
 8006890:	54485244 	.word	0x54485244
 8006894:	200009fc 	.word	0x200009fc
 8006898:	200009f8 	.word	0x200009f8
 800689c:	20000a88 	.word	0x20000a88
 80068a0:	2000000c 	.word	0x2000000c
 80068a4:	200009f4 	.word	0x200009f4

080068a8 <_tx_thread_initialize>:
/*                                            Execution Profile support,  */
/*                                            resulting in version 6.1.7  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80068ac:	4b12      	ldr	r3, [pc, #72]	; (80068f8 <_tx_thread_initialize+0x50>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80068b2:	4b12      	ldr	r3, [pc, #72]	; (80068fc <_tx_thread_initialize+0x54>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	4b11      	ldr	r3, [pc, #68]	; (8006900 <_tx_thread_initialize+0x58>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80068be:	4b11      	ldr	r3, [pc, #68]	; (8006904 <_tx_thread_initialize+0x5c>)
 80068c0:	2220      	movs	r2, #32
 80068c2:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80068c4:	2280      	movs	r2, #128	; 0x80
 80068c6:	2100      	movs	r1, #0
 80068c8:	480f      	ldr	r0, [pc, #60]	; (8006908 <_tx_thread_initialize+0x60>)
 80068ca:	f000 ff5b 	bl	8007784 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80068ce:	4b0f      	ldr	r3, [pc, #60]	; (800690c <_tx_thread_initialize+0x64>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80068d4:	4b0e      	ldr	r3, [pc, #56]	; (8006910 <_tx_thread_initialize+0x68>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80068da:	4b0e      	ldr	r3, [pc, #56]	; (8006914 <_tx_thread_initialize+0x6c>)
 80068dc:	2200      	movs	r2, #0
 80068de:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80068e0:	4b0d      	ldr	r3, [pc, #52]	; (8006918 <_tx_thread_initialize+0x70>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80068e6:	4b0d      	ldr	r3, [pc, #52]	; (800691c <_tx_thread_initialize+0x74>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 80068ee:	4a0b      	ldr	r2, [pc, #44]	; (800691c <_tx_thread_initialize+0x74>)
 80068f0:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80068f2:	bf00      	nop
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	200009f0 	.word	0x200009f0
 80068fc:	200009f4 	.word	0x200009f4
 8006900:	20000a00 	.word	0x20000a00
 8006904:	20000a04 	.word	0x20000a04
 8006908:	20000a08 	.word	0x20000a08
 800690c:	200009f8 	.word	0x200009f8
 8006910:	200009fc 	.word	0x200009fc
 8006914:	20000a88 	.word	0x20000a88
 8006918:	20000a8c 	.word	0x20000a8c
 800691c:	20000a90 	.word	0x20000a90

08006920 <_get_control>:
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
    __asm("MRS %[result], control" : [result] "=r" (_control) : );
 8006926:	f3ef 8314 	mrs	r3, CONTROL
 800692a:	607b      	str	r3, [r7, #4]
    return _control;
 800692c:	687b      	ldr	r3, [r7, #4]
}
 800692e:	4618      	mov	r0, r3
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <_set_control>:
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
    __asm("MSR control, %[input]" : : [input] "r" (_control));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f383 8814 	msr	CONTROL, r3
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800695a:	4b1e      	ldr	r3, [pc, #120]	; (80069d4 <_tx_thread_shell_entry+0x80>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	617b      	str	r3, [r7, #20]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006968:	4610      	mov	r0, r2
 800696a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800696c:	4b1a      	ldr	r3, [pc, #104]	; (80069d8 <_tx_thread_shell_entry+0x84>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8006974:	4b18      	ldr	r3, [pc, #96]	; (80069d8 <_tx_thread_shell_entry+0x84>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6978      	ldr	r0, [r7, #20]
 800697a:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800697c:	f3ef 8310 	mrs	r3, PRIMASK
 8006980:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006982:	b672      	cpsid	i
    return(primask_value);
 8006984:	687b      	ldr	r3, [r7, #4]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8006986:	613b      	str	r3, [r7, #16]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	2201      	movs	r2, #1
 800698c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2201      	movs	r2, #1
 8006992:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	2200      	movs	r2, #0
 8006998:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800699a:	4b10      	ldr	r3, [pc, #64]	; (80069dc <_tx_thread_shell_entry+0x88>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3301      	adds	r3, #1
 80069a0:	4a0e      	ldr	r2, [pc, #56]	; (80069dc <_tx_thread_shell_entry+0x88>)
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f383 8810 	msr	PRIMASK, r3
}
 80069ae:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80069b0:	f7ff ffb6 	bl	8006920 <_get_control>
 80069b4:	60f8      	str	r0, [r7, #12]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f023 0304 	bic.w	r3, r3, #4
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f7ff ffbb 	bl	800693a <_set_control>
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80069c4:	6978      	ldr	r0, [r7, #20]
 80069c6:	f000 f967 	bl	8006c98 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80069ca:	bf00      	nop
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	200009f0 	.word	0x200009f0
 80069d8:	20000a8c 	.word	0x20000a8c
 80069dc:	20000a88 	.word	0x20000a88

080069e0 <_get_ipsr>:
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 80069e6:	f3ef 8305 	mrs	r3, IPSR
 80069ea:	607b      	str	r3, [r7, #4]
    return _ipsr;
 80069ec:	687b      	ldr	r3, [r7, #4]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
	...

080069fc <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006a02:	4b15      	ldr	r3, [pc, #84]	; (8006a58 <_tx_thread_system_preempt_check+0x5c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	617b      	str	r3, [r7, #20]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d120      	bne.n	8006a50 <_tx_thread_system_preempt_check+0x54>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8006a0e:	4b13      	ldr	r3, [pc, #76]	; (8006a5c <_tx_thread_system_preempt_check+0x60>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	613b      	str	r3, [r7, #16]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8006a14:	4b12      	ldr	r3, [pc, #72]	; (8006a60 <_tx_thread_system_preempt_check+0x64>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60fb      	str	r3, [r7, #12]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d016      	beq.n	8006a50 <_tx_thread_system_preempt_check+0x54>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006a22:	4b10      	ldr	r3, [pc, #64]	; (8006a64 <_tx_thread_system_preempt_check+0x68>)
 8006a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a28:	601a      	str	r2, [r3, #0]
    if (_get_ipsr() == 0)
 8006a2a:	f7ff ffd9 	bl	80069e0 <_get_ipsr>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10c      	bne.n	8006a4e <_tx_thread_system_preempt_check+0x52>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006a34:	f3ef 8310 	mrs	r3, PRIMASK
 8006a38:	60bb      	str	r3, [r7, #8]
    return(primask_value);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
    {
        interrupt_save = __get_primask_value();
 8006a3c:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8006a3e:	b662      	cpsie	i
}
 8006a40:	bf00      	nop
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	f383 8810 	msr	PRIMASK, r3
}
 8006a4c:	bf00      	nop
        __enable_interrupts();
        __restore_interrupts(interrupt_save);
    }
}
 8006a4e:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8006a50:	bf00      	nop
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	20000a88 	.word	0x20000a88
 8006a5c:	200009f0 	.word	0x200009f0
 8006a60:	200009f4 	.word	0x200009f4
 8006a64:	e000ed04 	.word	0xe000ed04

08006a68 <_get_ipsr>:
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 8006a6e:	f3ef 8305 	mrs	r3, IPSR
 8006a72:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8006a74:	687b      	ldr	r3, [r7, #4]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
	...

08006a84 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b094      	sub	sp, #80	; 0x50
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006a8c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006a92:	b672      	cpsid	i
    return(primask_value);
 8006a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8006a96:	64fb      	str	r3, [r7, #76]	; 0x4c

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d005      	beq.n	8006aac <_tx_thread_system_resume+0x28>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	334c      	adds	r3, #76	; 0x4c
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 fb91 	bl	80071cc <_tx_timer_system_deactivate>
 8006aaa:	e002      	b.n	8006ab2 <_tx_thread_system_resume+0x2e>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8006ab2:	4b6b      	ldr	r3, [pc, #428]	; (8006c60 <_tx_thread_system_resume+0x1dc>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	4a69      	ldr	r2, [pc, #420]	; (8006c60 <_tx_thread_system_resume+0x1dc>)
 8006aba:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f040 8082 	bne.w	8006bca <_tx_thread_system_resume+0x146>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 8096 	beq.w	8006bfc <_tx_thread_system_resume+0x178>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d171      	bne.n	8006bbc <_tx_thread_system_resume+0x138>
                /* Resume the thread!  */
                
                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae2:	64bb      	str	r3, [r7, #72]	; 0x48
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8006ae4:	4a5f      	ldr	r2, [pc, #380]	; (8006c64 <_tx_thread_system_resume+0x1e0>)
 8006ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aec:	647b      	str	r3, [r7, #68]	; 0x44
                if (head_ptr == TX_NULL)
 8006aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d153      	bne.n	8006b9c <_tx_thread_system_resume+0x118>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8006af4:	495b      	ldr	r1, [pc, #364]	; (8006c64 <_tx_thread_system_resume+0x1e0>)
 8006af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b12:	63fb      	str	r3, [r7, #60]	; 0x3c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8006b14:	4b54      	ldr	r3, [pc, #336]	; (8006c68 <_tx_thread_system_resume+0x1e4>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	4a52      	ldr	r2, [pc, #328]	; (8006c68 <_tx_thread_system_resume+0x1e4>)
 8006b1e:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8006b20:	4b52      	ldr	r3, [pc, #328]	; (8006c6c <_tx_thread_system_resume+0x1e8>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d268      	bcs.n	8006bfc <_tx_thread_system_resume+0x178>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8006b2a:	4a50      	ldr	r2, [pc, #320]	; (8006c6c <_tx_thread_system_resume+0x1e8>)
 8006b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b2e:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8006b30:	4b4f      	ldr	r3, [pc, #316]	; (8006c70 <_tx_thread_system_resume+0x1ec>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	63bb      	str	r3, [r7, #56]	; 0x38
                        
                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8006b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d103      	bne.n	8006b44 <_tx_thread_system_resume+0xc0>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8006b3c:	4a4c      	ldr	r2, [pc, #304]	; (8006c70 <_tx_thread_system_resume+0x1ec>)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6013      	str	r3, [r2, #0]
 8006b42:	e05b      	b.n	8006bfc <_tx_thread_system_resume+0x178>
                        {
                        
                            /* Another thread has been scheduled for execution.  */
               
                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8006b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d256      	bcs.n	8006bfc <_tx_thread_system_resume+0x178>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8006b4e:	4a48      	ldr	r2, [pc, #288]	; (8006c70 <_tx_thread_system_resume+0x1ec>)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b56:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5a:	f383 8810 	msr	PRIMASK, r3
}
 8006b5e:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006b60:	4b3f      	ldr	r3, [pc, #252]	; (8006c60 <_tx_thread_system_resume+0x1dc>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	637b      	str	r3, [r7, #52]	; 0x34
                                if (combined_flags == ((ULONG) 0))
 8006b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d172      	bne.n	8006c52 <_tx_thread_system_resume+0x1ce>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006b6c:	4b41      	ldr	r3, [pc, #260]	; (8006c74 <_tx_thread_system_resume+0x1f0>)
 8006b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b72:	601a      	str	r2, [r3, #0]
    if (_get_ipsr() == 0)
 8006b74:	f7ff ff78 	bl	8006a68 <_get_ipsr>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10c      	bne.n	8006b98 <_tx_thread_system_resume+0x114>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8006b82:	627b      	str	r3, [r7, #36]	; 0x24
    return(primask_value);
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_primask_value();
 8006b86:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8006b88:	b662      	cpsie	i
}
 8006b8a:	bf00      	nop
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	f383 8810 	msr	PRIMASK, r3
}
 8006b96:	bf00      	nop
}
 8006b98:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8006b9a:	e05a      	b.n	8006c52 <_tx_thread_system_resume+0x1ce>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8006b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba0:	643b      	str	r3, [r7, #64]	; 0x40
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8006ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8006ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bb2:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bb8:	621a      	str	r2, [r3, #32]
 8006bba:	e01f      	b.n	8006bfc <_tx_thread_system_resume+0x178>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2203      	movs	r2, #3
 8006bc6:	631a      	str	r2, [r3, #48]	; 0x30
 8006bc8:	e018      	b.n	8006bfc <_tx_thread_system_resume+0x178>
        /* A resumption occurred in the middle of a previous thread suspension.  */
        
        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the 
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d014      	beq.n	8006bfc <_tx_thread_system_resume+0x178>
        {
            
            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d010      	beq.n	8006bfc <_tx_thread_system_resume+0x178>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d106      	bne.n	8006bf0 <_tx_thread_system_resume+0x16c>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	631a      	str	r2, [r3, #48]	; 0x30
 8006bee:	e005      	b.n	8006bfc <_tx_thread_system_resume+0x178>
                }
                else
                {
                
                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2203      	movs	r2, #3
 8006bfa:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8006bfc:	4b1e      	ldr	r3, [pc, #120]	; (8006c78 <_tx_thread_system_resume+0x1f4>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	633b      	str	r3, [r7, #48]	; 0x30
 8006c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c04:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	f383 8810 	msr	PRIMASK, r3
}
 8006c0c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8006c0e:	4b18      	ldr	r3, [pc, #96]	; (8006c70 <_tx_thread_system_resume+0x1ec>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d01f      	beq.n	8006c58 <_tx_thread_system_resume+0x1d4>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006c18:	4b11      	ldr	r3, [pc, #68]	; (8006c60 <_tx_thread_system_resume+0x1dc>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	637b      	str	r3, [r7, #52]	; 0x34
        if (combined_flags == ((ULONG) 0))
 8006c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d119      	bne.n	8006c58 <_tx_thread_system_resume+0x1d4>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006c24:	4b13      	ldr	r3, [pc, #76]	; (8006c74 <_tx_thread_system_resume+0x1f0>)
 8006c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2a:	601a      	str	r2, [r3, #0]
    if (_get_ipsr() == 0)
 8006c2c:	f7ff ff1c 	bl	8006a68 <_get_ipsr>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10f      	bne.n	8006c56 <_tx_thread_system_resume+0x1d2>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006c36:	f3ef 8310 	mrs	r3, PRIMASK
 8006c3a:	617b      	str	r3, [r7, #20]
    return(primask_value);
 8006c3c:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_primask_value();
 8006c3e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8006c40:	b662      	cpsie	i
}
 8006c42:	bf00      	nop
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f383 8810 	msr	PRIMASK, r3
}
 8006c4e:	bf00      	nop
}
 8006c50:	e001      	b.n	8006c56 <_tx_thread_system_resume+0x1d2>
                                return;
 8006c52:	bf00      	nop
 8006c54:	e000      	b.n	8006c58 <_tx_thread_system_resume+0x1d4>
 8006c56:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8006c58:	3750      	adds	r7, #80	; 0x50
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	20000a88 	.word	0x20000a88
 8006c64:	20000a08 	.word	0x20000a08
 8006c68:	20000a00 	.word	0x20000a00
 8006c6c:	20000a04 	.word	0x20000a04
 8006c70:	200009f4 	.word	0x200009f4
 8006c74:	e000ed04 	.word	0xe000ed04
 8006c78:	200009f0 	.word	0x200009f0

08006c7c <_get_ipsr>:
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 8006c82:	f3ef 8305 	mrs	r3, IPSR
 8006c86:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8006c88:	687b      	ldr	r3, [r7, #4]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
	...

08006c98 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b09a      	sub	sp, #104	; 0x68
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8006ca0:	4b7e      	ldr	r3, [pc, #504]	; (8006e9c <_tx_thread_system_suspend+0x204>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	667b      	str	r3, [r7, #100]	; 0x64
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8006caa:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006cac:	b672      	cpsid	i
    return(primask_value);
 8006cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8006cb0:	663b      	str	r3, [r7, #96]	; 0x60

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d112      	bne.n	8006ce0 <_tx_thread_system_suspend+0x48>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cbe:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8006cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d008      	beq.n	8006cd8 <_tx_thread_system_suspend+0x40>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8006cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ccc:	d004      	beq.n	8006cd8 <_tx_thread_system_suspend+0x40>
            {
            
                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	334c      	adds	r3, #76	; 0x4c
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 fa18 	bl	8007108 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	4a70      	ldr	r2, [pc, #448]	; (8006ea0 <_tx_thread_system_suspend+0x208>)
 8006cde:	6013      	str	r3, [r2, #0]
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8006ce0:	4b70      	ldr	r3, [pc, #448]	; (8006ea4 <_tx_thread_system_suspend+0x20c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	4a6f      	ldr	r2, [pc, #444]	; (8006ea4 <_tx_thread_system_suspend+0x20c>)
 8006ce8:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	f040 80a3 	bne.w	8006e3a <_tx_thread_system_suspend+0x1a2>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfe:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8006d06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d015      	beq.n	8006d3a <_tx_thread_system_suspend+0xa2>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d12:	643b      	str	r3, [r7, #64]	; 0x40

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8006d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d18:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8006d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d1e:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8006d20:	4a61      	ldr	r2, [pc, #388]	; (8006ea8 <_tx_thread_system_suspend+0x210>)
 8006d22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d155      	bne.n	8006dda <_tx_thread_system_suspend+0x142>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8006d2e:	495e      	ldr	r1, [pc, #376]	; (8006ea8 <_tx_thread_system_suspend+0x210>)
 8006d30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006d38:	e04f      	b.n	8006dda <_tx_thread_system_suspend+0x142>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head 
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8006d3a:	4a5b      	ldr	r2, [pc, #364]	; (8006ea8 <_tx_thread_system_suspend+0x210>)
 8006d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d3e:	2100      	movs	r1, #0
 8006d40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8006d44:	2201      	movs	r2, #1
 8006d46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d48:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4c:	653b      	str	r3, [r7, #80]	; 0x50
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8006d4e:	4b57      	ldr	r3, [pc, #348]	; (8006eac <_tx_thread_system_suspend+0x214>)
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d54:	43db      	mvns	r3, r3
 8006d56:	4013      	ands	r3, r2
 8006d58:	4a54      	ldr	r2, [pc, #336]	; (8006eac <_tx_thread_system_suspend+0x214>)
 8006d5a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8006d60:	4b52      	ldr	r3, [pc, #328]	; (8006eac <_tx_thread_system_suspend+0x214>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8006d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d129      	bne.n	8006dc0 <_tx_thread_system_suspend+0x128>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8006d6c:	4b50      	ldr	r3, [pc, #320]	; (8006eb0 <_tx_thread_system_suspend+0x218>)
 8006d6e:	2220      	movs	r2, #32
 8006d70:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8006d72:	4b50      	ldr	r3, [pc, #320]	; (8006eb4 <_tx_thread_system_suspend+0x21c>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d7a:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7e:	f383 8810 	msr	PRIMASK, r3
}
 8006d82:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006d84:	4b47      	ldr	r3, [pc, #284]	; (8006ea4 <_tx_thread_system_suspend+0x20c>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	647b      	str	r3, [r7, #68]	; 0x44
                if (combined_flags == ((ULONG) 0))
 8006d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d17d      	bne.n	8006e8c <_tx_thread_system_suspend+0x1f4>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006d90:	4b49      	ldr	r3, [pc, #292]	; (8006eb8 <_tx_thread_system_suspend+0x220>)
 8006d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d96:	601a      	str	r2, [r3, #0]
    if (_get_ipsr() == 0)
 8006d98:	f7ff ff70 	bl	8006c7c <_get_ipsr>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10c      	bne.n	8006dbc <_tx_thread_system_suspend+0x124>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006da2:	f3ef 8310 	mrs	r3, PRIMASK
 8006da6:	637b      	str	r3, [r7, #52]	; 0x34
    return(primask_value);
 8006da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        interrupt_save = __get_primask_value();
 8006daa:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8006dac:	b662      	cpsie	i
}
 8006dae:	bf00      	nop
 8006db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db6:	f383 8810 	msr	PRIMASK, r3
}
 8006dba:	bf00      	nop
}
 8006dbc:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8006dbe:	e065      	b.n	8006e8c <_tx_thread_system_suspend+0x1f4>
            {
            
                /* Other threads at different priority levels are ready to run.  */
            
                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8006dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dc2:	fa93 f3a3 	rbit	r3, r3
 8006dc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dca:	fab3 f383 	clz	r3, r3
 8006dce:	653b      	str	r3, [r7, #80]	; 0x50

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8006dd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dd4:	4413      	add	r3, r2
 8006dd6:	4a36      	ldr	r2, [pc, #216]	; (8006eb0 <_tx_thread_system_suspend+0x218>)
 8006dd8:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8006dda:	4b36      	ldr	r3, [pc, #216]	; (8006eb4 <_tx_thread_system_suspend+0x21c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d12a      	bne.n	8006e3a <_tx_thread_system_suspend+0x1a2>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8006de4:	4b32      	ldr	r3, [pc, #200]	; (8006eb0 <_tx_thread_system_suspend+0x218>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a2f      	ldr	r2, [pc, #188]	; (8006ea8 <_tx_thread_system_suspend+0x210>)
 8006dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dee:	4a31      	ldr	r2, [pc, #196]	; (8006eb4 <_tx_thread_system_suspend+0x21c>)
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006df4:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df8:	f383 8810 	msr	PRIMASK, r3
}
 8006dfc:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006dfe:	4b29      	ldr	r3, [pc, #164]	; (8006ea4 <_tx_thread_system_suspend+0x20c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	647b      	str	r3, [r7, #68]	; 0x44
            if (combined_flags == ((ULONG) 0))
 8006e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d142      	bne.n	8006e90 <_tx_thread_system_suspend+0x1f8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006e0a:	4b2b      	ldr	r3, [pc, #172]	; (8006eb8 <_tx_thread_system_suspend+0x220>)
 8006e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e10:	601a      	str	r2, [r3, #0]
    if (_get_ipsr() == 0)
 8006e12:	f7ff ff33 	bl	8006c7c <_get_ipsr>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10c      	bne.n	8006e36 <_tx_thread_system_suspend+0x19e>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
    return(primask_value);
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_primask_value();
 8006e24:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8006e26:	b662      	cpsie	i
}
 8006e28:	bf00      	nop
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	f383 8810 	msr	PRIMASK, r3
}
 8006e34:	bf00      	nop
}
 8006e36:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8006e38:	e02a      	b.n	8006e90 <_tx_thread_system_suspend+0x1f8>
 8006e3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e3c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	f383 8810 	msr	PRIMASK, r3
}
 8006e44:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8006e46:	4b1b      	ldr	r3, [pc, #108]	; (8006eb4 <_tx_thread_system_suspend+0x21c>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d021      	beq.n	8006e94 <_tx_thread_system_suspend+0x1fc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006e50:	4b14      	ldr	r3, [pc, #80]	; (8006ea4 <_tx_thread_system_suspend+0x20c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	647b      	str	r3, [r7, #68]	; 0x44
        if (combined_flags == ((ULONG) 0))
 8006e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d11b      	bne.n	8006e94 <_tx_thread_system_suspend+0x1fc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006e5c:	4b16      	ldr	r3, [pc, #88]	; (8006eb8 <_tx_thread_system_suspend+0x220>)
 8006e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e62:	601a      	str	r2, [r3, #0]
    if (_get_ipsr() == 0)
 8006e64:	f7ff ff0a 	bl	8006c7c <_get_ipsr>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10c      	bne.n	8006e88 <_tx_thread_system_suspend+0x1f0>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e72:	617b      	str	r3, [r7, #20]
    return(primask_value);
 8006e74:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_primask_value();
 8006e76:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8006e78:	b662      	cpsie	i
}
 8006e7a:	bf00      	nop
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f383 8810 	msr	PRIMASK, r3
}
 8006e86:	bf00      	nop
}
 8006e88:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8006e8a:	e003      	b.n	8006e94 <_tx_thread_system_suspend+0x1fc>
                return;
 8006e8c:	bf00      	nop
 8006e8e:	e002      	b.n	8006e96 <_tx_thread_system_suspend+0x1fe>
            return;
 8006e90:	bf00      	nop
 8006e92:	e000      	b.n	8006e96 <_tx_thread_system_suspend+0x1fe>
    return;
 8006e94:	bf00      	nop
}
 8006e96:	3768      	adds	r7, #104	; 0x68
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	200009f0 	.word	0x200009f0
 8006ea0:	20000ff4 	.word	0x20000ff4
 8006ea4:	20000a88 	.word	0x20000a88
 8006ea8:	20000a08 	.word	0x20000a08
 8006eac:	20000a00 	.word	0x20000a00
 8006eb0:	20000a04 	.word	0x20000a04
 8006eb4:	200009f4 	.word	0x200009f4
 8006eb8:	e000ed04 	.word	0xe000ed04

08006ebc <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8006ec2:	4b20      	ldr	r3, [pc, #128]	; (8006f44 <_tx_thread_time_slice+0x88>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8006ecc:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006ece:	b672      	cpsid	i
    return(primask_value);
 8006ed0:	687b      	ldr	r3, [r7, #4]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8006ed2:	60bb      	str	r3, [r7, #8]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8006ed4:	4b1c      	ldr	r3, [pc, #112]	; (8006f48 <_tx_thread_time_slice+0x8c>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d024      	beq.n	8006f2a <_tx_thread_time_slice+0x6e>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d120      	bne.n	8006f2a <_tx_thread_time_slice+0x6e>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	69da      	ldr	r2, [r3, #28]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	4a15      	ldr	r2, [pc, #84]	; (8006f4c <_tx_thread_time_slice+0x90>)
 8006ef6:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d013      	beq.n	8006f2a <_tx_thread_time_slice+0x6e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d10d      	bne.n	8006f2a <_tx_thread_time_slice+0x6e>
                
                    /* Preemption-threshold is not being used by this thread.  */
        
                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	6a12      	ldr	r2, [r2, #32]
 8006f16:	490e      	ldr	r1, [pc, #56]	; (8006f50 <_tx_thread_time_slice+0x94>)
 8006f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
                    /* Designate the highest priority thread as the one to execute.  Don't use this 
                       thread's priority as an index just in case a higher priority thread is now 
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8006f1c:	4b0d      	ldr	r3, [pc, #52]	; (8006f54 <_tx_thread_time_slice+0x98>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a0b      	ldr	r2, [pc, #44]	; (8006f50 <_tx_thread_time_slice+0x94>)
 8006f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f26:	4a0c      	ldr	r2, [pc, #48]	; (8006f58 <_tx_thread_time_slice+0x9c>)
 8006f28:	6013      	str	r3, [r2, #0]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	f383 8810 	msr	PRIMASK, r3
}
 8006f34:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8006f36:	bf00      	nop
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	200009f0 	.word	0x200009f0
 8006f48:	20000a98 	.word	0x20000a98
 8006f4c:	20000ff4 	.word	0x20000ff4
 8006f50:	20000a08 	.word	0x20000a08
 8006f54:	20000a04 	.word	0x20000a04
 8006f58:	200009f4 	.word	0x200009f4

08006f5c <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b08a      	sub	sp, #40	; 0x28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006f68:	f3ef 8310 	mrs	r3, PRIMASK
 8006f6c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006f6e:	b672      	cpsid	i
    return(primask_value);
 8006f70:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts.  */
    TX_DISABLE
 8006f72:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f78:	2b04      	cmp	r3, #4
 8006f7a:	d10e      	bne.n	8006f9a <_tx_thread_timeout+0x3e>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8006f7c:	4b13      	ldr	r3, [pc, #76]	; (8006fcc <_tx_thread_timeout+0x70>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3301      	adds	r3, #1
 8006f82:	4a12      	ldr	r2, [pc, #72]	; (8006fcc <_tx_thread_timeout+0x70>)
 8006f84:	6013      	str	r3, [r2, #0]
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	f383 8810 	msr	PRIMASK, r3
}
 8006f90:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8006f92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f94:	f7ff fd76 	bl	8006a84 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8006f98:	e013      	b.n	8006fc2 <_tx_thread_timeout+0x66>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f9e:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006fa6:	61bb      	str	r3, [r7, #24]
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f383 8810 	msr	PRIMASK, r3
}
 8006fb2:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <_tx_thread_timeout+0x66>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	69b9      	ldr	r1, [r7, #24]
 8006fbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fc0:	4798      	blx	r3
}
 8006fc2:	bf00      	nop
 8006fc4:	3728      	adds	r7, #40	; 0x28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000a88 	.word	0x20000a88

08006fd0 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8006fda:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006fdc:	b672      	cpsid	i
    return(primask_value);
 8006fde:	687b      	ldr	r3, [r7, #4]

    /* Don't process in the ISR, wakeup the system timer thread to process the 
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8006fe0:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8006fe2:	4b09      	ldr	r3, [pc, #36]	; (8007008 <_tx_timer_expiration_process+0x38>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	4a07      	ldr	r2, [pc, #28]	; (8007008 <_tx_timer_expiration_process+0x38>)
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f383 8810 	msr	PRIMASK, r3
}
 8006ff6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8006ff8:	4804      	ldr	r0, [pc, #16]	; (800700c <_tx_timer_expiration_process+0x3c>)
 8006ffa:	f7ff fd43 	bl	8006a84 <_tx_thread_system_resume>
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8006ffe:	bf00      	nop
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20000a88 	.word	0x20000a88
 800700c:	20000b38 	.word	0x20000b38

08007010 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8007010:	b590      	push	{r4, r7, lr}
 8007012:	b089      	sub	sp, #36	; 0x24
 8007014:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8007016:	4b28      	ldr	r3, [pc, #160]	; (80070b8 <_tx_timer_initialize+0xa8>)
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800701c:	4b27      	ldr	r3, [pc, #156]	; (80070bc <_tx_timer_initialize+0xac>)
 800701e:	2200      	movs	r2, #0
 8007020:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8007022:	4b27      	ldr	r3, [pc, #156]	; (80070c0 <_tx_timer_initialize+0xb0>)
 8007024:	2200      	movs	r2, #0
 8007026:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8007028:	4b26      	ldr	r3, [pc, #152]	; (80070c4 <_tx_timer_initialize+0xb4>)
 800702a:	2200      	movs	r2, #0
 800702c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800702e:	4b26      	ldr	r3, [pc, #152]	; (80070c8 <_tx_timer_initialize+0xb8>)
 8007030:	2200      	movs	r2, #0
 8007032:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8007034:	2280      	movs	r2, #128	; 0x80
 8007036:	2100      	movs	r1, #0
 8007038:	4824      	ldr	r0, [pc, #144]	; (80070cc <_tx_timer_initialize+0xbc>)
 800703a:	f000 fba3 	bl	8007784 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800703e:	4b24      	ldr	r3, [pc, #144]	; (80070d0 <_tx_timer_initialize+0xc0>)
 8007040:	4a22      	ldr	r2, [pc, #136]	; (80070cc <_tx_timer_initialize+0xbc>)
 8007042:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8007044:	4b23      	ldr	r3, [pc, #140]	; (80070d4 <_tx_timer_initialize+0xc4>)
 8007046:	4a21      	ldr	r2, [pc, #132]	; (80070cc <_tx_timer_initialize+0xbc>)
 8007048:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800704a:	4b23      	ldr	r3, [pc, #140]	; (80070d8 <_tx_timer_initialize+0xc8>)
 800704c:	4a23      	ldr	r2, [pc, #140]	; (80070dc <_tx_timer_initialize+0xcc>)
 800704e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8007050:	4b21      	ldr	r3, [pc, #132]	; (80070d8 <_tx_timer_initialize+0xc8>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3304      	adds	r3, #4
 8007056:	4a20      	ldr	r2, [pc, #128]	; (80070d8 <_tx_timer_initialize+0xc8>)
 8007058:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800705a:	4b21      	ldr	r3, [pc, #132]	; (80070e0 <_tx_timer_initialize+0xd0>)
 800705c:	4a21      	ldr	r2, [pc, #132]	; (80070e4 <_tx_timer_initialize+0xd4>)
 800705e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8007060:	4b21      	ldr	r3, [pc, #132]	; (80070e8 <_tx_timer_initialize+0xd8>)
 8007062:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007066:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8007068:	4b20      	ldr	r3, [pc, #128]	; (80070ec <_tx_timer_initialize+0xdc>)
 800706a:	2200      	movs	r2, #0
 800706c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 800706e:	4b1c      	ldr	r3, [pc, #112]	; (80070e0 <_tx_timer_initialize+0xd0>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a1d      	ldr	r2, [pc, #116]	; (80070e8 <_tx_timer_initialize+0xd8>)
 8007074:	6812      	ldr	r2, [r2, #0]
 8007076:	491d      	ldr	r1, [pc, #116]	; (80070ec <_tx_timer_initialize+0xdc>)
 8007078:	6809      	ldr	r1, [r1, #0]
 800707a:	481c      	ldr	r0, [pc, #112]	; (80070ec <_tx_timer_initialize+0xdc>)
 800707c:	6800      	ldr	r0, [r0, #0]
 800707e:	2400      	movs	r4, #0
 8007080:	9405      	str	r4, [sp, #20]
 8007082:	2400      	movs	r4, #0
 8007084:	9404      	str	r4, [sp, #16]
 8007086:	9003      	str	r0, [sp, #12]
 8007088:	9102      	str	r1, [sp, #8]
 800708a:	9201      	str	r2, [sp, #4]
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	4b18      	ldr	r3, [pc, #96]	; (80070f0 <_tx_timer_initialize+0xe0>)
 8007090:	4a18      	ldr	r2, [pc, #96]	; (80070f4 <_tx_timer_initialize+0xe4>)
 8007092:	4919      	ldr	r1, [pc, #100]	; (80070f8 <_tx_timer_initialize+0xe8>)
 8007094:	4819      	ldr	r0, [pc, #100]	; (80070fc <_tx_timer_initialize+0xec>)
 8007096:	f7ff fb15 	bl	80066c4 <_tx_thread_create>
 800709a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e5      	bne.n	800706e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80070a2:	4b17      	ldr	r3, [pc, #92]	; (8007100 <_tx_timer_initialize+0xf0>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80070a8:	4b16      	ldr	r3, [pc, #88]	; (8007104 <_tx_timer_initialize+0xf4>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80070ae:	bf00      	nop
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd90      	pop	{r4, r7, pc}
 80070b6:	bf00      	nop
 80070b8:	20000a94 	.word	0x20000a94
 80070bc:	20000ff4 	.word	0x20000ff4
 80070c0:	20000a98 	.word	0x20000a98
 80070c4:	20000b28 	.word	0x20000b28
 80070c8:	20000b34 	.word	0x20000b34
 80070cc:	20000a9c 	.word	0x20000a9c
 80070d0:	20000b1c 	.word	0x20000b1c
 80070d4:	20000b24 	.word	0x20000b24
 80070d8:	20000b20 	.word	0x20000b20
 80070dc:	20000b18 	.word	0x20000b18
 80070e0:	20000be8 	.word	0x20000be8
 80070e4:	20000bf4 	.word	0x20000bf4
 80070e8:	20000bec 	.word	0x20000bec
 80070ec:	20000bf0 	.word	0x20000bf0
 80070f0:	4154494d 	.word	0x4154494d
 80070f4:	0800723d 	.word	0x0800723d
 80070f8:	080077c0 	.word	0x080077c0
 80070fc:	20000b38 	.word	0x20000b38
 8007100:	20000b2c 	.word	0x20000b2c
 8007104:	20000b30 	.word	0x20000b30

08007108 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8007108:	b480      	push	{r7}
 800710a:	b089      	sub	sp, #36	; 0x24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d04a      	beq.n	80071b2 <_tx_timer_system_activate+0xaa>
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007122:	d046      	beq.n	80071b2 <_tx_timer_system_activate+0xaa>
        {
    
            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d142      	bne.n	80071b2 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	2b20      	cmp	r3, #32
 8007130:	d902      	bls.n	8007138 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8007132:	231f      	movs	r3, #31
 8007134:	61bb      	str	r3, [r7, #24]
 8007136:	e002      	b.n	800713e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	3b01      	subs	r3, #1
 800713c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */
    
                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800713e:	4b20      	ldr	r3, [pc, #128]	; (80071c0 <_tx_timer_system_activate+0xb8>)
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800714a:	4b1e      	ldr	r3, [pc, #120]	; (80071c4 <_tx_timer_system_activate+0xbc>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	69fa      	ldr	r2, [r7, #28]
 8007150:	429a      	cmp	r2, r3
 8007152:	d30b      	bcc.n	800716c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8007154:	4b1b      	ldr	r3, [pc, #108]	; (80071c4 <_tx_timer_system_activate+0xbc>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	69fa      	ldr	r2, [r7, #28]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	109b      	asrs	r3, r3, #2
 800715e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8007160:	4b19      	ldr	r3, [pc, #100]	; (80071c8 <_tx_timer_system_activate+0xc0>)
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	61fb      	str	r3, [r7, #28]
                }
    
                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d109      	bne.n	8007188 <_tx_timer_system_activate+0x80>
                {
                
                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	e011      	b.n	80071ac <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	69fa      	ldr	r2, [r7, #28]
 80071b0:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80071b2:	bf00      	nop
 80071b4:	3724      	adds	r7, #36	; 0x24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	20000b24 	.word	0x20000b24
 80071c4:	20000b20 	.word	0x20000b20
 80071c8:	20000b1c 	.word	0x20000b1c

080071cc <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d026      	beq.n	800722e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d108      	bne.n	8007200 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d117      	bne.n	8007228 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	e013      	b.n	8007228 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	429a      	cmp	r2, r3
 800721a:	d105      	bne.n	8007228 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	619a      	str	r2, [r3, #24]
    }
}
 800722e:	bf00      	nop
 8007230:	371c      	adds	r7, #28
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
	...

0800723c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b094      	sub	sp, #80	; 0x50
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8007244:	2300      	movs	r3, #0
 8007246:	647b      	str	r3, [r7, #68]	; 0x44
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a6e      	ldr	r2, [pc, #440]	; (8007404 <_tx_timer_thread_entry+0x1c8>)
 800724c:	4293      	cmp	r3, r2
 800724e:	f040 80d5 	bne.w	80073fc <_tx_timer_thread_entry+0x1c0>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007252:	f3ef 8310 	mrs	r3, PRIMASK
 8007256:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007258:	b672      	cpsid	i
    return(primask_value);
 800725a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {

            /* First, move the current list pointer and clear the timer 
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800725c:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800725e:	4b6a      	ldr	r3, [pc, #424]	; (8007408 <_tx_timer_thread_entry+0x1cc>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <_tx_timer_thread_entry+0x38>
            {
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f107 020c 	add.w	r2, r7, #12
 8007272:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8007274:	4b64      	ldr	r3, [pc, #400]	; (8007408 <_tx_timer_thread_entry+0x1cc>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800727c:	4b62      	ldr	r3, [pc, #392]	; (8007408 <_tx_timer_thread_entry+0x1cc>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	3304      	adds	r3, #4
 8007282:	4a61      	ldr	r2, [pc, #388]	; (8007408 <_tx_timer_thread_entry+0x1cc>)
 8007284:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8007286:	4b60      	ldr	r3, [pc, #384]	; (8007408 <_tx_timer_thread_entry+0x1cc>)
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	4b60      	ldr	r3, [pc, #384]	; (800740c <_tx_timer_thread_entry+0x1d0>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	429a      	cmp	r2, r3
 8007290:	d103      	bne.n	800729a <_tx_timer_thread_entry+0x5e>
            {
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
 8007292:	4b5f      	ldr	r3, [pc, #380]	; (8007410 <_tx_timer_thread_entry+0x1d4>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a5c      	ldr	r2, [pc, #368]	; (8007408 <_tx_timer_thread_entry+0x1cc>)
 8007298:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800729a:	4b5e      	ldr	r3, [pc, #376]	; (8007414 <_tx_timer_thread_entry+0x1d8>)
 800729c:	2200      	movs	r2, #0
 800729e:	601a      	str	r2, [r3, #0]
 80072a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80072a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a6:	f383 8810 	msr	PRIMASK, r3
}
 80072aa:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80072ac:	f3ef 8310 	mrs	r3, PRIMASK
 80072b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 80072b2:	b672      	cpsid	i
    return(primask_value);
 80072b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80072b6:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80072b8:	e07b      	b.n	80073b2 <_tx_timer_thread_entry+0x176>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	63bb      	str	r3, [r7, #56]	; 0x38
            
                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 80072c4:	2300      	movs	r3, #0
 80072c6:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80072c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d102      	bne.n	80072d6 <_tx_timer_thread_entry+0x9a>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 80072d0:	2300      	movs	r3, #0
 80072d2:	60fb      	str	r3, [r7, #12]
 80072d4:	e00e      	b.n	80072f4 <_tx_timer_thread_entry+0xb8>
                {

                    /* No, not the only expired timer.  */
            
                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 80072d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	637b      	str	r3, [r7, #52]	; 0x34
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80072dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072e0:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 80072e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072e6:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 80072e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ea:	f107 020c 	add.w	r2, r7, #12
 80072ee:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 80072f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f2:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really 
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80072f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b20      	cmp	r3, #32
 80072fa:	d911      	bls.n	8007320 <_tx_timer_thread_entry+0xe4>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 80072fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =  
 8007304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007306:	601a      	str	r2, [r3, #0]
                
                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8007308:	2300      	movs	r3, #0
 800730a:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800730c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800730e:	f107 0208 	add.w	r2, r7, #8
 8007312:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8007314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007316:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007318:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800731a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800731c:	60bb      	str	r3, [r7, #8]
 800731e:	e01a      	b.n	8007356 <_tx_timer_thread_entry+0x11a>
                    }
#endif
                  
                    /* Copy the calling function and ID into local variables before interrupts 
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8007320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	64bb      	str	r3, [r7, #72]	; 0x48
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8007326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800732c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007332:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8007334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d009      	beq.n	8007350 <_tx_timer_thread_entry+0x114>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will 
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800733c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800733e:	f107 0208 	add.w	r2, r7, #8
 8007342:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8007344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007346:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007348:	611a      	str	r2, [r3, #16]
                        
                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800734a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800734c:	60bb      	str	r3, [r7, #8]
 800734e:	e002      	b.n	8007356 <_tx_timer_thread_entry+0x11a>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8007350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007352:	2200      	movs	r2, #0
 8007354:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8007356:	4a30      	ldr	r2, [pc, #192]	; (8007418 <_tx_timer_thread_entry+0x1dc>)
 8007358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800735e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	f383 8810 	msr	PRIMASK, r3
}
 8007366:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8007368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800736a:	2b00      	cmp	r3, #0
 800736c:	d002      	beq.n	8007374 <_tx_timer_thread_entry+0x138>
                {
            
                    (timeout_function) (timeout_param);
 800736e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007370:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007372:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007374:	f3ef 8310 	mrs	r3, PRIMASK
 8007378:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800737a:	b672      	cpsid	i
    return(primask_value);
 800737c:	6a3b      	ldr	r3, [r7, #32]
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800737e:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8007380:	4b25      	ldr	r3, [pc, #148]	; (8007418 <_tx_timer_thread_entry+0x1dc>)
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800738a:	429a      	cmp	r2, r3
 800738c:	d105      	bne.n	800739a <_tx_timer_thread_entry+0x15e>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800738e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007390:	2200      	movs	r2, #0
 8007392:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8007394:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007396:	f7ff feb7 	bl	8007108 <_tx_timer_system_activate>
 800739a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800739c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	f383 8810 	msr	PRIMASK, r3
}
 80073a4:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80073a6:	f3ef 8310 	mrs	r3, PRIMASK
 80073aa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80073ac:	b672      	cpsid	i
    return(primask_value);
 80073ae:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80073b0:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (expired_timers != TX_NULL)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d180      	bne.n	80072ba <_tx_timer_thread_entry+0x7e>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80073b8:	4b16      	ldr	r3, [pc, #88]	; (8007414 <_tx_timer_thread_entry+0x1d8>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d116      	bne.n	80073ee <_tx_timer_thread_entry+0x1b2>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 80073c0:	4b16      	ldr	r3, [pc, #88]	; (800741c <_tx_timer_thread_entry+0x1e0>)
 80073c2:	643b      	str	r3, [r7, #64]	; 0x40

                /* Set the status to suspending, in order to indicate the 
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80073c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073c6:	2203      	movs	r2, #3
 80073c8:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80073ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073cc:	2201      	movs	r2, #1
 80073ce:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 80073d0:	4b13      	ldr	r3, [pc, #76]	; (8007420 <_tx_timer_thread_entry+0x1e4>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3301      	adds	r3, #1
 80073d6:	4a12      	ldr	r2, [pc, #72]	; (8007420 <_tx_timer_thread_entry+0x1e4>)
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073dc:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f383 8810 	msr	PRIMASK, r3
}
 80073e4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80073e6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80073e8:	f7ff fc56 	bl	8006c98 <_tx_thread_system_suspend>
 80073ec:	e731      	b.n	8007252 <_tx_timer_thread_entry+0x16>
 80073ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073f0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	f383 8810 	msr	PRIMASK, r3
}
 80073f8:	bf00      	nop
            TX_DISABLE
 80073fa:	e72a      	b.n	8007252 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 80073fc:	bf00      	nop
 80073fe:	3750      	adds	r7, #80	; 0x50
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	4154494d 	.word	0x4154494d
 8007408:	20000b24 	.word	0x20000b24
 800740c:	20000b20 	.word	0x20000b20
 8007410:	20000b1c 	.word	0x20000b1c
 8007414:	20000b28 	.word	0x20000b28
 8007418:	20000b34 	.word	0x20000b34
 800741c:	20000b38 	.word	0x20000b38
 8007420:	20000a88 	.word	0x20000a88

08007424 <_get_ipsr>:
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 800742a:	f3ef 8305 	mrs	r3, IPSR
 800742e:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8007430:	687b      	ldr	r3, [r7, #4]
}
 8007432:	4618      	mov	r0, r3
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
	...

08007440 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b08e      	sub	sp, #56	; 0x38
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800744e:	2300      	movs	r3, #0
 8007450:	637b      	str	r3, [r7, #52]	; 0x34

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d102      	bne.n	800745e <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007458:	2302      	movs	r3, #2
 800745a:	637b      	str	r3, [r7, #52]	; 0x34
 800745c:	e06f      	b.n	800753e <_txe_byte_pool_create+0xfe>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800745e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007460:	2b34      	cmp	r3, #52	; 0x34
 8007462:	d002      	beq.n	800746a <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007464:	2302      	movs	r3, #2
 8007466:	637b      	str	r3, [r7, #52]	; 0x34
 8007468:	e069      	b.n	800753e <_txe_byte_pool_create+0xfe>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800746a:	f3ef 8310 	mrs	r3, PRIMASK
 800746e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007470:	b672      	cpsid	i
    return(primask_value);
 8007472:	69fb      	ldr	r3, [r7, #28]
    }
    else
    {
    
        /* Disable interrupts.  */
        TX_DISABLE
 8007474:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8007476:	4b39      	ldr	r3, [pc, #228]	; (800755c <_txe_byte_pool_create+0x11c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3301      	adds	r3, #1
 800747c:	4a37      	ldr	r2, [pc, #220]	; (800755c <_txe_byte_pool_create+0x11c>)
 800747e:	6013      	str	r3, [r2, #0]
 8007480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007482:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	f383 8810 	msr	PRIMASK, r3
}
 800748a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800748c:	4b34      	ldr	r3, [pc, #208]	; (8007560 <_txe_byte_pool_create+0x120>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8007492:	2300      	movs	r3, #0
 8007494:	633b      	str	r3, [r7, #48]	; 0x30
 8007496:	e009      	b.n	80074ac <_txe_byte_pool_create+0x6c>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749c:	429a      	cmp	r2, r3
 800749e:	d00b      	beq.n	80074b8 <_txe_byte_pool_create+0x78>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80074a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80074a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a8:	3301      	adds	r3, #1
 80074aa:	633b      	str	r3, [r7, #48]	; 0x30
 80074ac:	4b2d      	ldr	r3, [pc, #180]	; (8007564 <_txe_byte_pool_create+0x124>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d3f0      	bcc.n	8007498 <_txe_byte_pool_create+0x58>
 80074b6:	e000      	b.n	80074ba <_txe_byte_pool_create+0x7a>
                break;
 80074b8:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80074ba:	f3ef 8310 	mrs	r3, PRIMASK
 80074be:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80074c0:	b672      	cpsid	i
    return(primask_value);
 80074c2:	697b      	ldr	r3, [r7, #20]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80074c4:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80074c6:	4b25      	ldr	r3, [pc, #148]	; (800755c <_txe_byte_pool_create+0x11c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	4a23      	ldr	r2, [pc, #140]	; (800755c <_txe_byte_pool_create+0x11c>)
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	f383 8810 	msr	PRIMASK, r3
}
 80074da:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80074dc:	f7ff fa8e 	bl	80069fc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d102      	bne.n	80074ee <_txe_byte_pool_create+0xae>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 80074e8:	2302      	movs	r3, #2
 80074ea:	637b      	str	r3, [r7, #52]	; 0x34
 80074ec:	e027      	b.n	800753e <_txe_byte_pool_create+0xfe>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d102      	bne.n	80074fa <_txe_byte_pool_create+0xba>
        {
    
            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 80074f4:	2303      	movs	r3, #3
 80074f6:	637b      	str	r3, [r7, #52]	; 0x34
 80074f8:	e021      	b.n	800753e <_txe_byte_pool_create+0xfe>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b63      	cmp	r3, #99	; 0x63
 80074fe:	d802      	bhi.n	8007506 <_txe_byte_pool_create+0xc6>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8007500:	2305      	movs	r3, #5
 8007502:	637b      	str	r3, [r7, #52]	; 0x34
 8007504:	e01b      	b.n	800753e <_txe_byte_pool_create+0xfe>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8007506:	4b18      	ldr	r3, [pc, #96]	; (8007568 <_txe_byte_pool_create+0x128>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	4a17      	ldr	r2, [pc, #92]	; (800756c <_txe_byte_pool_create+0x12c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d101      	bne.n	8007518 <_txe_byte_pool_create+0xd8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8007514:	2313      	movs	r3, #19
 8007516:	637b      	str	r3, [r7, #52]	; 0x34
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8007518:	f7ff ff84 	bl	8007424 <_get_ipsr>
 800751c:	4602      	mov	r2, r0
 800751e:	4b14      	ldr	r3, [pc, #80]	; (8007570 <_txe_byte_pool_create+0x130>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4313      	orrs	r3, r2
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00a      	beq.n	800753e <_txe_byte_pool_create+0xfe>
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8007528:	f7ff ff7c 	bl	8007424 <_get_ipsr>
 800752c:	4602      	mov	r2, r0
 800752e:	4b10      	ldr	r3, [pc, #64]	; (8007570 <_txe_byte_pool_create+0x130>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4313      	orrs	r3, r2
 8007534:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007538:	d201      	bcs.n	800753e <_txe_byte_pool_create+0xfe>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800753a:	2313      	movs	r3, #19
 800753c:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800753e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007540:	2b00      	cmp	r3, #0
 8007542:	d106      	bne.n	8007552 <_txe_byte_pool_create+0x112>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	68b9      	ldr	r1, [r7, #8]
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f7fe ffaa 	bl	80064a4 <_tx_byte_pool_create>
 8007550:	6378      	str	r0, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8007552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007554:	4618      	mov	r0, r3
 8007556:	3738      	adds	r7, #56	; 0x38
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	20000a88 	.word	0x20000a88
 8007560:	200009e0 	.word	0x200009e0
 8007564:	200009e4 	.word	0x200009e4
 8007568:	200009f0 	.word	0x200009f0
 800756c:	20000b38 	.word	0x20000b38
 8007570:	2000000c 	.word	0x2000000c

08007574 <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800757a:	f3ef 8310 	mrs	r3, PRIMASK
 800757e:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007580:	b672      	cpsid	i
    return(primask_value);
 8007582:	687b      	ldr	r3, [r7, #4]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 8007584:	60fb      	str	r3, [r7, #12]


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 8007586:	4b07      	ldr	r3, [pc, #28]	; (80075a4 <tx_low_power_enter+0x30>)
 8007588:	2201      	movs	r2, #1
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f383 8810 	msr	PRIMASK, r3
}
 8007596:	bf00      	nop

    /* User code to enter low power mode. This allows the application to power down
       peripherals and put the processor in sleep mode.
    */
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
 8007598:	f7f9 f931 	bl	80007fe <App_ThreadX_LowPower_Enter>
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 800759c:	bf00      	nop
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	20000ff8 	.word	0x20000ff8

080075a8 <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 80075ae:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <tx_low_power_exit+0x30>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00c      	beq.n	80075d0 <tx_low_power_exit+0x28>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 80075b6:	4b08      	ldr	r3, [pc, #32]	; (80075d8 <tx_low_power_exit+0x30>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	601a      	str	r2, [r3, #0]

        /* User code to exit low power mode and reprogram the
           timer to the desired interrupt frequency.  */
#ifdef TX_LOW_POWER_USER_EXIT
        TX_LOW_POWER_USER_EXIT;
 80075bc:	f7f9 f926 	bl	800080c <App_ThreadX_LowPower_Exit>
#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
 80075c0:	2300      	movs	r3, #0
 80075c2:	607b      	str	r3, [r7, #4]
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d002      	beq.n	80075d0 <tx_low_power_exit+0x28>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f806 	bl	80075dc <tx_time_increment>
        }
    }
}
 80075d0:	bf00      	nop
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	20000ff8 	.word	0x20000ff8

080075dc <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b08a      	sub	sp, #40	; 0x28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f000 8099 	beq.w	800771e <tx_time_increment+0x142>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80075ec:	f3ef 8310 	mrs	r3, PRIMASK
 80075f0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80075f2:	b672      	cpsid	i
    return(primask_value);
 80075f4:	693b      	ldr	r3, [r7, #16]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 80075f6:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 80075f8:	4b4b      	ldr	r3, [pc, #300]	; (8007728 <tx_time_increment+0x14c>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4413      	add	r3, r2
 8007600:	4a49      	ldr	r2, [pc, #292]	; (8007728 <tx_time_increment+0x14c>)
 8007602:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 8007604:	4b49      	ldr	r3, [pc, #292]	; (800772c <tx_time_increment+0x150>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00e      	beq.n	800762a <tx_time_increment+0x4e>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 800760c:	4b47      	ldr	r3, [pc, #284]	; (800772c <tx_time_increment+0x150>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	429a      	cmp	r2, r3
 8007614:	d206      	bcs.n	8007624 <tx_time_increment+0x48>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 8007616:	4b45      	ldr	r3, [pc, #276]	; (800772c <tx_time_increment+0x150>)
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	4a43      	ldr	r2, [pc, #268]	; (800772c <tx_time_increment+0x150>)
 8007620:	6013      	str	r3, [r2, #0]
 8007622:	e002      	b.n	800762a <tx_time_increment+0x4e>
        }
        else
        {
            _tx_timer_time_slice =  1;
 8007624:	4b41      	ldr	r3, [pc, #260]	; (800772c <tx_time_increment+0x150>)
 8007626:	2201      	movs	r2, #1
 8007628:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 800762a:	4b41      	ldr	r3, [pc, #260]	; (8007730 <tx_time_increment+0x154>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 8007630:	2300      	movs	r3, #0
 8007632:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 8007634:	2300      	movs	r3, #0
 8007636:	627b      	str	r3, [r7, #36]	; 0x24
 8007638:	e046      	b.n	80076c8 <tx_time_increment+0xec>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d034      	beq.n	80076ac <tx_time_increment+0xd0>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b20      	cmp	r3, #32
 800764e:	d908      	bls.n	8007662 <tx_time_increment+0x86>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	4413      	add	r3, r2
 8007658:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	601a      	str	r2, [r3, #0]
 8007660:	e003      	b.n	800766a <tx_time_increment+0x8e>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007664:	1c5a      	adds	r2, r3, #1
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	69fa      	ldr	r2, [r7, #28]
 8007676:	429a      	cmp	r2, r3
 8007678:	d1e6      	bne.n	8007648 <tx_time_increment+0x6c>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	695b      	ldr	r3, [r3, #20]
 8007680:	2200      	movs	r2, #0
 8007682:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d103      	bne.n	8007692 <tx_time_increment+0xb6>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	61bb      	str	r3, [r7, #24]
 8007690:	e009      	b.n	80076a6 <tx_time_increment+0xca>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	6a3a      	ldr	r2, [r7, #32]
 8007698:	6812      	ldr	r2, [r2, #0]
 800769a:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	695a      	ldr	r2, [r3, #20]
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	2200      	movs	r2, #0
 80076aa:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	3304      	adds	r3, #4
 80076b0:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 80076b2:	4b20      	ldr	r3, [pc, #128]	; (8007734 <tx_time_increment+0x158>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6a3a      	ldr	r2, [r7, #32]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d302      	bcc.n	80076c2 <tx_time_increment+0xe6>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 80076bc:	4b1e      	ldr	r3, [pc, #120]	; (8007738 <tx_time_increment+0x15c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	3301      	adds	r3, #1
 80076c6:	627b      	str	r3, [r7, #36]	; 0x24
 80076c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ca:	2b1f      	cmp	r3, #31
 80076cc:	d9b5      	bls.n	800763a <tx_time_increment+0x5e>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 80076ce:	4b1a      	ldr	r3, [pc, #104]	; (8007738 <tx_time_increment+0x15c>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a17      	ldr	r2, [pc, #92]	; (8007730 <tx_time_increment+0x154>)
 80076d4:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 80076d6:	e019      	b.n	800770c <tx_time_increment+0x130>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d206      	bcs.n	80076fa <tx_time_increment+0x11e>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	1ad2      	subs	r2, r2, r3
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	e002      	b.n	8007700 <tx_time_increment+0x124>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	2201      	movs	r2, #1
 80076fe:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	2200      	movs	r2, #0
 8007704:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 8007706:	69f8      	ldr	r0, [r7, #28]
 8007708:	f7ff fcfe 	bl	8007108 <_tx_timer_system_activate>
    while (temp_list_head)
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1e2      	bne.n	80076d8 <tx_time_increment+0xfc>
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f383 8810 	msr	PRIMASK, r3
}
 800771c:	e000      	b.n	8007720 <tx_time_increment+0x144>
        return;
 800771e:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8007720:	3728      	adds	r7, #40	; 0x28
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	20000a94 	.word	0x20000a94
 800772c:	20000ff4 	.word	0x20000ff4
 8007730:	20000b24 	.word	0x20000b24
 8007734:	20000b20 	.word	0x20000b20
 8007738:	20000b1c 	.word	0x20000b1c

0800773c <__libc_init_array>:
 800773c:	b570      	push	{r4, r5, r6, lr}
 800773e:	4d0d      	ldr	r5, [pc, #52]	; (8007774 <__libc_init_array+0x38>)
 8007740:	2600      	movs	r6, #0
 8007742:	4c0d      	ldr	r4, [pc, #52]	; (8007778 <__libc_init_array+0x3c>)
 8007744:	1b64      	subs	r4, r4, r5
 8007746:	10a4      	asrs	r4, r4, #2
 8007748:	42a6      	cmp	r6, r4
 800774a:	d109      	bne.n	8007760 <__libc_init_array+0x24>
 800774c:	4d0b      	ldr	r5, [pc, #44]	; (800777c <__libc_init_array+0x40>)
 800774e:	2600      	movs	r6, #0
 8007750:	4c0b      	ldr	r4, [pc, #44]	; (8007780 <__libc_init_array+0x44>)
 8007752:	f000 f81f 	bl	8007794 <_init>
 8007756:	1b64      	subs	r4, r4, r5
 8007758:	10a4      	asrs	r4, r4, #2
 800775a:	42a6      	cmp	r6, r4
 800775c:	d105      	bne.n	800776a <__libc_init_array+0x2e>
 800775e:	bd70      	pop	{r4, r5, r6, pc}
 8007760:	f855 3b04 	ldr.w	r3, [r5], #4
 8007764:	3601      	adds	r6, #1
 8007766:	4798      	blx	r3
 8007768:	e7ee      	b.n	8007748 <__libc_init_array+0xc>
 800776a:	f855 3b04 	ldr.w	r3, [r5], #4
 800776e:	3601      	adds	r6, #1
 8007770:	4798      	blx	r3
 8007772:	e7f2      	b.n	800775a <__libc_init_array+0x1e>
 8007774:	0800785c 	.word	0x0800785c
 8007778:	0800785c 	.word	0x0800785c
 800777c:	0800785c 	.word	0x0800785c
 8007780:	08007860 	.word	0x08007860

08007784 <memset>:
 8007784:	4402      	add	r2, r0
 8007786:	4603      	mov	r3, r0
 8007788:	4293      	cmp	r3, r2
 800778a:	d100      	bne.n	800778e <memset+0xa>
 800778c:	4770      	bx	lr
 800778e:	f803 1b01 	strb.w	r1, [r3], #1
 8007792:	e7f9      	b.n	8007788 <memset+0x4>

08007794 <_init>:
 8007794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007796:	bf00      	nop
 8007798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800779a:	bc08      	pop	{r3}
 800779c:	469e      	mov	lr, r3
 800779e:	4770      	bx	lr

080077a0 <_fini>:
 80077a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a2:	bf00      	nop
 80077a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077a6:	bc08      	pop	{r3}
 80077a8:	469e      	mov	lr, r3
 80077aa:	4770      	bx	lr
